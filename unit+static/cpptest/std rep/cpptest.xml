<?xml version='1.0' encoding='UTF-8'?>
<ResultsSession buildId="FlowAnalysisCpp-2023-03-20" climode="true" execEnv="win32_x86_64" hasViols="true" id="1678531006992" lang="en_US" machine="DESKTOP-DCD46AU" prjModule="cicd.findings.cpptest.static.analysis.report" project="FlowAnalysisCpp" tag="cpptest_settings-cicd.findings.cpptest.static.analysis.report-${scontrol_branch}-win32_x86_64" time="2023-03-20T11:43:11+08:00" toolDispName="C/C++test" toolId="c++test" toolName="DTP Engine for C/C++" toolVer="2022.1.0" user="devtest">
   <TestConfig machine="DESKTOP-DCD46AU" name="cpptest_settings" pseudoUrl="conf/std/cpptest_settings.properties" user="devtest" />
   <Authors>
      <Author id="dev1" name="devtest" />
   </Authors>
   <Analyzers>
      <Analyzer id="com.parasoft.xtest.scope.analyzer" name="Scope Analyzer" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.code" name="Parasoft C/C++ Code Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.dupcode.parser" name="Code Duplication Parser" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.pattern" name="Parasoft C/C++ Static Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.flow" name="Parasoft C/C++ Flow Analyzer" ver="10.6.0.20220527B3558" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.metrics" name="Parasoft C/C++ Metrics Analyzer" ver="10.6.0.20220614B1716" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.dupcode" name="Code Duplication Detector" ver="10.6.0.20220510" />
      <Analyzer id="com.parasoft.xtest.cpp.analyzer.static.global" name="Parasoft C/C++ Global Static Analyzer" ver="10.6.0.20220614B1716" />
   </Analyzers>
   <VersionInfos>
      <StorageInfo ownerId="" resultId="ISetupResult" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IMetricsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IExecutionViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IDupCodeViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="IFlowAnalysisViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IFunctionalViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="" resultId="IChangeImpactViolation" ver="1" ver10x="1" />
      <StorageInfo ownerId="com.parasoft.xtest.checkers.api.standards" resultId="ICodingStandardsViolation" ver="2" ver10x="1" />
      <StorageInfo ownerId="" resultId="IUnitTestViolation" ver="1" ver10x="1" />
   </VersionInfos>
   <Goals tsks="50">
      
   </Goals>
   <Metrics>
      <Metric avg="0" disp="true" id="METRIC.CBO" max="0" min="0" name="Coupling Between Objects" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.CC" max="3" min="1" name="McCabe Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="0.028" disp="true" id="METRIC.CLLOCRIF" max="0.114" min="0" name="Comment/Logical Lines in Files" noi="4" stddev="0.049">
         <Info avg="0.028" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0.114" min="0" noi="4" stddev="0.049" />
      </Metric>
      <Metric avg="0.22" disp="true" id="METRIC.CLLOCRIM" max="1" min="0" name="Comment/Logical Lines in Methods" noi="10" stddev="0.394">
         <Info avg="0.22" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="0" noi="10" stddev="0.394" />
      </Metric>
      <Metric avg="0.273" disp="true" id="METRIC.DIF" max="1" min="0" name="Depth of Nested 'if' Statements" noi="11" stddev="0.445">
         <Info avg="0.273" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="0" noi="11" stddev="0.445" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.ECC" max="1" min="1" name="Essential Cyclomatic Complexity" noi="11" stddev="0">
         <Info avg="1" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="1" noi="11" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.FO" max="0" min="0" name="Fan Out" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="5.938" disp="true" id="METRIC.HDIFM" max="16.333" min="1.5" name="Halstead Difficulty" noi="11" stddev="4.48">
         <Info avg="5.938" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="16.333" min="1.5" noi="11" stddev="4.48" />
      </Metric>
      <Metric avg="1255.953" disp="true" id="METRIC.HEFM" max="4452.883" min="29.477" name="Halstead Effort" noi="11" stddev="1479.851">
         <Info avg="1255.953" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="4452.883" min="29.477" noi="11" stddev="1479.851" />
      </Metric>
      <Metric avg="25.634" disp="true" id="METRIC.HICM" max="57.125" min="12.687" name="Halstead Intelligent Content" noi="11" stddev="16.172">
         <Info avg="25.634" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="57.125" min="12.687" noi="11" stddev="16.172" />
      </Metric>
      <Metric avg="32.455" disp="true" id="METRIC.HLENM" max="62" min="7" name="Halstead Program Length" noi="11" stddev="20.237">
         <Info avg="32.455" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="62" min="7" noi="11" stddev="20.237" />
      </Metric>
      <Metric avg="0.293" disp="true" id="METRIC.HLEVM" max="0.667" min="0.061" name="Halstead Program Level" noi="11" stddev="0.199">
         <Info avg="0.293" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0.667" min="0.061" noi="11" stddev="0.199" />
      </Metric>
      <Metric avg="0.033" disp="true" id="METRIC.HNOBM" max="0.09" min="0.003" name="Halstead Number of Bugs" noi="11" stddev="0.03">
         <Info avg="0.033" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0.09" min="0.003" noi="11" stddev="0.03" />
      </Metric>
      <Metric avg="69.775" disp="true" id="METRIC.HTTPM" max="247.382" min="1.638" name="Halstead Time to Program" noi="11" stddev="82.214">
         <Info avg="69.775" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="247.382" min="1.638" noi="11" stddev="82.214" />
      </Metric>
      <Metric avg="18.455" disp="true" id="METRIC.HVOCM" max="37" min="7" name="Halstead Program Vocabulary" noi="11" stddev="9.764">
         <Info avg="18.455" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="37" min="7" noi="11" stddev="9.764" />
      </Metric>
      <Metric avg="145.589" disp="true" id="METRIC.HVOLM" max="307.16" min="19.651" name="Halstead Program Volume" noi="11" stddev="107.517">
         <Info avg="145.589" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="307.16" min="19.651" noi="11" stddev="107.517" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.IDOC" max="0" min="0" name="Inheritance Depth of Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.LCOM" max="0" min="0" name="Lack of Cohesion" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.MCC" max="3" min="1" name="Modified Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="171" disp="true" id="METRIC.MI" max="171" min="171" name="Maintainability Index" noi="1" stddev="0">
         <Info avg="171" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="171" min="171" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0.727" disp="true" id="METRIC.NBD" max="2" min="0" name="Nested Blocks Depth" noi="11" stddev="0.862">
         <Info avg="0.727" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="2" min="0" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="9.75" disp="true" id="METRIC.NOBLIF" max="33" min="1" name="Blank Lines in Files" noi="4" stddev="13.442">
         <Info avg="9.75" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="33" min="1" noi="4" stddev="13.442" />
      </Metric>
      <Metric avg="0.182" disp="true" id="METRIC.NOBLIM" max="1" min="0" name="Blank Lines in Methods" noi="11" stddev="0.386">
         <Info avg="0.182" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="0" noi="11" stddev="0.386" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOBLIT" max="0" min="0" name="Blank Lines in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOC" max="1" min="1" name="Number of Classes" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.25" disp="true" id="METRIC.NOCLIF" max="5" min="0" name="Comment Lines in Files" noi="4" stddev="2.165">
         <Info avg="1.25" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="5" min="0" noi="4" stddev="2.165" />
      </Metric>
      <Metric avg="0.455" disp="true" id="METRIC.NOCLIM" max="2" min="0" name="Comment Lines in Methods" noi="11" stddev="0.656">
         <Info avg="0.455" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="2" min="0" noi="11" stddev="0.656" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOCLIT" max="0" min="0" name="Comment Lines in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOF" max="1" min="1" name="Number of Files" noi="4" stddev="0">
         <Info avg="1" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="1" noi="4" stddev="0" />
      </Metric>
      <Metric avg="14.25" disp="true" id="METRIC.NOLLOCIF" max="44" min="1" name="Logical Lines in Files" noi="4" stddev="17.311">
         <Info avg="14.25" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="44" min="1" noi="4" stddev="17.311" />
      </Metric>
      <Metric avg="5.182" disp="true" id="METRIC.NOLLOCIM" max="12" min="0" name="Logical Lines in Methods" noi="11" stddev="4.174">
         <Info avg="5.182" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="12" min="0" noi="11" stddev="4.174" />
      </Metric>
      <Metric avg="2.909" disp="true" id="METRIC.NOMCIM" max="10" min="0" name="Method Calls In Methods" noi="11" stddev="3.088">
         <Info avg="2.909" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="10" min="0" noi="11" stddev="3.088" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOMIT" max="0" min="0" name="Number of Methods in Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.182" disp="true" id="METRIC.NOPAR" max="2" min="0" name="Parameters of Methods" noi="11" stddev="0.716">
         <Info avg="1.182" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="2" min="0" noi="11" stddev="0.716" />
      </Metric>
      <Metric avg="46.75" disp="true" id="METRIC.NOPLIF" max="152" min="6" name="Physical Lines in Files" noi="4" stddev="60.866">
         <Info avg="46.75" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="152" min="6" noi="4" stddev="60.866" />
      </Metric>
      <Metric avg="8.727" disp="true" id="METRIC.NOPLIM" max="17" min="4" name="Physical Lines in Methods" noi="11" stddev="4.35">
         <Info avg="8.727" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="17" min="4" noi="11" stddev="4.35" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOPLIT" max="1" min="1" name="Physical Lines in Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPRIVMIT" max="0" min="0" name="Private Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPROTMIT" max="0" min="0" name="Protected Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.NOPUBMIT" max="0" min="0" name="Public Members of Types" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0.636" disp="true" id="METRIC.NORET" max="1" min="0" name="Number of Returns in Methods" noi="11" stddev="0.481">
         <Info avg="0.636" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="0" noi="11" stddev="0.481" />
      </Metric>
      <Metric avg="35.75" disp="true" id="METRIC.NOSLIF" max="114" min="5" name="Source Lines in Files" noi="4" stddev="45.273">
         <Info avg="35.75" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="114" min="5" noi="4" stddev="45.273" />
      </Metric>
      <Metric avg="8.091" disp="true" id="METRIC.NOSLIM" max="16" min="3" name="Source Lines in Methods" noi="11" stddev="4.144">
         <Info avg="8.091" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="16" min="3" noi="11" stddev="4.144" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOSLIT" max="1" min="1" name="Source Lines in Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1" disp="true" id="METRIC.NOT" max="1" min="1" name="Number of Types" noi="1" stddev="0">
         <Info avg="1" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="1" min="1" noi="1" stddev="0" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.RFC" max="0" min="0" name="Response for Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
      <Metric avg="1.727" disp="true" id="METRIC.SCC" max="3" min="1" name="Strict Cyclomatic Complexity" noi="11" stddev="0.862">
         <Info avg="1.727" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="3" min="1" noi="11" stddev="0.862" />
      </Metric>
      <Metric avg="0" disp="true" id="METRIC.WMC" max="0" min="0" name="Weighted Methods of Class" noi="1" stddev="0">
         <Info avg="0" disp="true" elem="cicd.findings.cpptest.static.analysis.report" max="0" min="0" noi="1" stddev="0" />
      </Metric>
   </Metrics>
   <Scope>
      <Repositories />
      <Locations>
         <Loc auth="devtest" hash="-1257393797" locRef="1" projId="cicd.findings.cpptest.static.analysis.report" projPath="/cicd.findings.cpptest.static.analysis.report" project="cicd.findings.cpptest.static.analysis.report" resProjPath="NullPointer.cpp" totLns="14" uri="file://DESKTOP-DCD46AU/c:/jenkins/workspace/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" />
         <Loc auth="devtest" hash="-1665970746" locRef="2" projId="cicd.findings.cpptest.static.analysis.report" projPath="/cicd.findings.cpptest.static.analysis.report" project="cicd.findings.cpptest.static.analysis.report" resProjPath="DivisionByZero.cpp" totLns="6" uri="file://DESKTOP-DCD46AU/c:/jenkins/workspace/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" />
         <Loc auth="devtest" hash="1013754779" locRef="3" projId="cicd.findings.cpptest.static.analysis.report" projPath="/cicd.findings.cpptest.static.analysis.report" project="cicd.findings.cpptest.static.analysis.report" resProjPath="MemoryLeak.cpp" totLns="15" uri="file://DESKTOP-DCD46AU/c:/jenkins/workspace/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" />
         <Loc auth="devtest" hash="-1769734618" locRef="4" projId="cicd.findings.cpptest.static.analysis.report" projPath="/cicd.findings.cpptest.static.analysis.report" project="cicd.findings.cpptest.static.analysis.report" resProjPath="DeadLock.cpp" totLns="152" uri="file://DESKTOP-DCD46AU/c:/jenkins/workspace/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" />
      </Locations>
   </Scope>
   
  <SetupProblems />

   <CodingStandards ownerId="com.parasoft.xtest.checkers.api.standards" time="0:00:28">
      <Projects>
         <Project bdCheckedFiles="0" bdTotalFiles="0" checkedFiles="4" checkedLns="187" id="cicd.findings.cpptest.static.analysis.report" name="cicd.findings.cpptest.static.analysis.report" qfixErrs="0" suppErrs="0" totErrs="2468" totFiles="4" totLns="187" />
      </Projects>
      
      
      <Rules>
         <CategoriesList>
            <Category authTot="0;" authUrg="0;" desc="DISA ASD STIG" name="APSC_DV" rules="104" total="0">
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001850 The application must not display passwords/PINs as clear text." name="APSC_DV-001850" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001750 The application must transmit only cryptographically-protected passwords." name="APSC_DV-001750" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000480 The application must enforce approved authorizations for controlling the flow of information within the system based on organization-defined information flow control policies." name="APSC_DV-000480" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000160 The application must implement DoD-approved encryption to protect the confidentiality of remote access sessions." name="APSC_DV-000160" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002460 The application must maintain the confidentiality and integrity of information during preparation for transmission." name="APSC_DV-002460" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002560 The application must not be subject to input handling vulnerabilities." name="APSC_DV-002560" rules="11" total="1" />
               <Category authTot="3;" authUrg="2;" desc="APSC_DV-003110 The application must not contain embedded authentication data." name="APSC_DV-003110" rules="1" total="3" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session." name="APSC_DV-002000" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002440 The application must protect the confidentiality and integrity of transmitted information." name="APSC_DV-002440" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002540 The application must not be vulnerable to SQL Injection." name="APSC_DV-002540" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000500 The application must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures." name="APSC_DV-000500" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001995 The application must not be vulnerable to race conditions." name="APSC_DV-001995" rules="9" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002520 The application must protect from canonical representation vulnerabilities." name="APSC_DV-002520" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-003235 The application must not be subject to error handling vulnerabilities." name="APSC_DV-003235" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002400 The application must restrict the ability to launch Denial of Service (DoS) attacks against itself or other information systems." name="APSC_DV-002400" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002290 The application must use the Federal Information Processing Standard (FIPS) 140-2-validated cryptographic modules and random number generator if the application implements encryption, key exchange, digital signature, and hash functionality." name="APSC_DV-002290" rules="4" total="0" />
               <Category authTot="2;" authUrg="0;" desc="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways." name="APSC_DV-002390" rules="4" total="2" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002590 The application must not be vulnerable to overflow attacks." name="APSC_DV-002590" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000170 The application must implement cryptographic mechanisms to protect the integrity of remote access sessions." name="APSC_DV-000170" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001300 The application must protect audit information from unauthorized deletion." name="APSC_DV-001300" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001740 The application must only store cryptographic representations of passwords." name="APSC_DV-001740" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-000650 The application must not write sensitive data into the application logs." name="APSC_DV-000650" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-001860 The application must use mechanisms meeting the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance for authentication to a cryptographic module." name="APSC_DV-001860" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002470 The application must maintain the confidentiality and integrity of information during reception." name="APSC_DV-002470" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002350 The application must use appropriate cryptography in order to protect stored DoD information when required by the information owner or DoD policy." name="APSC_DV-002350" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002570 The application must generate error messages that provide information necessary for corrective actions without revealing information that could be exploited by adversaries." name="APSC_DV-002570" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002010 The application must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards." name="APSC_DV-002010" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks." name="APSC_DV-002550" rules="11" total="1" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-002530 The application must validate all input." name="APSC_DV-002530" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002510 The application must protect from command injection." name="APSC_DV-002510" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="APSC_DV-002480 The application must not disclose unnecessary information to users." name="APSC_DV-002480" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="APSC_DV-001290 The application must protect audit information from unauthorized modification." name="APSC_DV-001290" rules="4" total="1" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="AUTOSAR C++14 Coding Guidelines" name="AUTOSAR" rules="554" total="0">
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-6-1 #error directive shall not be used" name="AUTOSAR-A16_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-3-1 All overloads of a function shall be visible from where it is called" name="AUTOSAR-A7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-5-2 Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" name="AUTOSAR-M8_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-1 A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" name="AUTOSAR-A6_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-4-1 Ordering predicates used with associative containers and STL sorting and related algorithms shall adhere to a strict weak ordering relation" name="AUTOSAR-A25_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-1 The assignment-expression of a throw statement shall not itself cause an exception to be thrown" name="AUTOSAR-M15_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-3 An empty throw (throw;) shall only be used in the compound statement of a catch handler" name="AUTOSAR-M15_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-1-2 NULL shall not be thrown explicitly" name="AUTOSAR-M15_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-7-1 If the behavior of a user-defined special member function is identical to implicitly defined special member function, then it shall be defined &quot;=default&quot; or be left undefined" name="AUTOSAR-A12_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-2 The unary minus operator shall not be applied to an expression whose underlying type is unsigned" name="AUTOSAR-M5_3_2" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" name="AUTOSAR-M5_3_1" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-4 Evaluation of the operand to the sizeof operator shall not contain side effects" name="AUTOSAR-M5_3_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-3-3 The unary &amp; operator shall not be overloaded" name="AUTOSAR-M5_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-2 All user-defined conversion operators shall be defined explicit" name="AUTOSAR-A13_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-3 User-defined conversion operators should not be used" name="AUTOSAR-A13_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-6-1 The goto statement shall not be used" name="AUTOSAR-A6_6_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio> shall not be used" name="AUTOSAR-M27_0_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-1 If &quot;operator[]&quot; is to be overloaded with a non-const version, const version shall also be implemented" name="AUTOSAR-A13_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-16-1 The ternary conditional operator shall not be used as a sub-expression" name="AUTOSAR-A5_16_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-4 If two opposite operators are defined, one shall be defined in terms of the other" name="AUTOSAR-A13_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-5-5 Comparison operators shall be non-member functions with identical parameter types and noexcept" name="AUTOSAR-A13_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-2 Elements of a container shall only be accessed via valid references, iterators, and pointers" name="AUTOSAR-A23_0_2" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them" name="AUTOSAR-A15_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A23-0-1 An iterator shall not be implicitly converted to const_iterator" name="AUTOSAR-A23_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-3 Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" name="AUTOSAR-M4_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-1-5 Exceptions shall not be thrown across execution boundaries" name="AUTOSAR-A15_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-17-1 The semantic equivalence between a binary operator and its assignment operator form shall be preserved" name="AUTOSAR-M5_17_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-2 An exception object shall not be a pointer" name="AUTOSAR-A15_1_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-5-1 Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" name="AUTOSAR-M4_5_1" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR M0-1-10 Every defined function should be called at least once" name="AUTOSAR-M0_1_10" rules="2" total="4" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown" name="AUTOSAR-A15_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-4-1 Hierarchies should be based on interface classes" name="AUTOSAR-A10_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-7-1 The #pragma directive shall not be used" name="AUTOSAR-A16_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-1 A non-POD type should be defined as class" name="AUTOSAR-A11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-0-2 A type defined as struct shall: (1) provide only public data members, (2) not provide any special member functions or methods, (3) not be a base of another struct or class, (4) not inherit from another struct or class" name="AUTOSAR-A11_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-3 Enumerations shall be declared as scoped enum classes" name="AUTOSAR-A7_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-4 A function identifier shall either be used to call the function or it shall be preceded by &amp;" name="AUTOSAR-M8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-2 Enumeration underlying base type shall be explicitly defined" name="AUTOSAR-A7_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-1 An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" name="AUTOSAR-A7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-4-2 The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" name="AUTOSAR-M8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-1 The character \ shall not occur as a last character of a C++ comment" name="AUTOSAR-A2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-1 The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" name="AUTOSAR-M3_9_1" rules="1" total="0" />
               <Category authTot="28;" authUrg="3;" desc="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags" name="AUTOSAR-A2_7_3" rules="2" total="28" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-7-2 Sections of code shall not be &quot;commented out&quot;" name="AUTOSAR-A2_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M12-1-1 An object's dynamic type shall not be used from the body of its constructor or destructor" name="AUTOSAR-M12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-9-3 The underlying bit representations of floating-point values shall not be used" name="AUTOSAR-M3_9_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features" name="AUTOSAR-A1_1_1" rules="11" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-1-2 Functions shall not be declared at block scope" name="AUTOSAR-M3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-4-1 A switch statement shall have at least two case-clauses, distinct from the default label" name="AUTOSAR-A6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-6-1 All class data members that are initialized by the constructor shall be initialized using member initializers" name="AUTOSAR-A12_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-0-3 Control shall not be transferred into a try or catch block using a goto or a switch statement" name="AUTOSAR-M15_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-6 A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" name="AUTOSAR-M5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-9 A cast shall not convert a pointer type to an integral type" name="AUTOSAR-M5_2_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-5-3 A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" name="AUTOSAR-M14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-2-1 The macro offsetof shall not be used" name="AUTOSAR-M18_2_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type" name="AUTOSAR-M5_2_8" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-6-1 The right hand operand of the integer division or remainder operators shall not be equal to zero" name="AUTOSAR-A5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-3 Casts from a base class to a derived class should not be performed on polymorphic types" name="AUTOSAR-M5_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-2 A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" name="AUTOSAR-M5_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-3 Do statements should not be used" name="AUTOSAR-A6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-2 A for loop shall contain a single loop-counter which shall not have floating-point type" name="AUTOSAR-A6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-5 Hexadecimal constants should be upper case" name="AUTOSAR-A2_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-6 Universal character names shall be used only inside character or string literals" name="AUTOSAR-A2_13_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-5-4 For-init-statement and expression should not perform actions other than loop-counter initialization and modification" name="AUTOSAR-A6_5_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-3 Type wchar_t shall not be used" name="AUTOSAR-A2_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-4 String literals shall not be assigned to non-constant pointers" name="AUTOSAR-A2_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-1 Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" name="AUTOSAR-A2_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-13-2 String literals with different encoding prefixes shall not be concatenated" name="AUTOSAR-A2_13_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic" name="AUTOSAR-M5_0_15" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-16 A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" name="AUTOSAR-M5_0_16" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-17 Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="AUTOSAR-M5_0_17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-18 >, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" name="AUTOSAR-M5_0_18" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee" name="AUTOSAR-A15_0_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-1 Const member functions shall not return non-const pointers or references to class-data" name="AUTOSAR-M9_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-10 If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" name="AUTOSAR-M5_0_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-3-3 If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" name="AUTOSAR-M9_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-11 The plain char type shall only be used for the storage and use of character values" name="AUTOSAR-M5_0_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-12 Signed char and unsigned char type shall only be used for the storage and use of numeric values" name="AUTOSAR-M5_0_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-14 The first operand of a conditional-operator shall have type bool" name="AUTOSAR-M5_0_14" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified" name="AUTOSAR-M7_1_2" rules="3" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-4 The register keyword shall not be used" name="AUTOSAR-A7_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-3 CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" name="AUTOSAR-A7_1_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time" name="AUTOSAR-A7_1_2" rules="2" total="2" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration" name="AUTOSAR-A7_1_1" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-8-1 A header file name shall be identical to a type name declared in it if it declares a type" name="AUTOSAR-A2_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-11-1 Volatile keyword shall not be used" name="AUTOSAR-A2_11_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-5-1 Unions shall not be used" name="AUTOSAR-A9_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-3-1 The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement" name="AUTOSAR-M6_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-20 Non-constant operands to a binary bitwise operator shall have the same underlying type" name="AUTOSAR-M5_0_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-21 Bitwise operators shall only be applied to operands of unsigned underlying type" name="AUTOSAR-M5_0_21" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers" name="AUTOSAR-A18_0_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-0-3 The library &lt;clocale> (locale.h) and the setlocale function shall not be used" name="AUTOSAR-A18_0_3" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented" name="AUTOSAR-M0_4_2" rules="1" total="1" />
               <Category authTot="4;" authUrg="0;" desc="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked" name="AUTOSAR-A18_0_2" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-3-1 A function that contains &quot;forwarding reference&quot; as its argument shall not be overloaded" name="AUTOSAR-A13_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-5-1 A pointer to member shall not access non-existent class members" name="AUTOSAR-A5_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M14-6-1 In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" name="AUTOSAR-M14_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-2 Type long double shall not be used" name="AUTOSAR-A0_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-4-4 Range, domain and pole errors shall be checked when using math functions" name="AUTOSAR-A0_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-7-1 An integer expression shall not lead to data loss" name="AUTOSAR-A4_7_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-5 Enumerations should be used to represent sets of related named constants" name="AUTOSAR-A7_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-2-4 In an enumeration, either (1) none, (2) the first or (3) all enumerators shall be initialized" name="AUTOSAR-A7_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-6 std::make_shared shall be used to construct objects owned by std::shared_ptr" name="AUTOSAR-A20_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-5 std::make_unique shall be used to construct objects owned by std::unique_ptr" name="AUTOSAR-A20_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-7 A std::weak_ptr shall be used to represent temporary shared ownership" name="AUTOSAR-A20_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-2 A std::unique_ptr shall be used to represent exclusive ownership" name="AUTOSAR-A20_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-1 An already-owned pointer value shall not be stored in an unrelated smart pointer" name="AUTOSAR-A20_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-4 A std::unique_ptr shall be used over std::shared_ptr if ownership sharing is not required" name="AUTOSAR-A20_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A20-8-3 A std::shared_ptr shall be used to represent shared ownership" name="AUTOSAR-A20_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-1 Data types used for interfacing with hardware or conforming to communication protocols shall be trivial, standard-layout and only contain members of types with defined sizes" name="AUTOSAR-A9_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-3 Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" name="AUTOSAR-M6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-2 Floating-point expressions shall not be directly or indirectly tested for equality or inequality" name="AUTOSAR-M6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-4-1 Destructor of a base class shall be public virtual, public override or protected non-virtual" name="AUTOSAR-A12_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-1 An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="AUTOSAR-A2_10_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-2-1 Assignment operators shall not be used in sub-expressions" name="AUTOSAR-M6_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-2 Expression statements shall not be explicit calls to constructors of temporary objects only" name="AUTOSAR-A6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A6-2-1 Move and copy assignment operators shall either move or respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A6_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-6-2 Bit-fields shall be used only when interfacing to hardware or conforming to communication protocols" name="AUTOSAR-A9_6_2" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final" name="AUTOSAR-A12_4_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-11 &quot;operator new&quot; and &quot;operator delete&quot; shall be defined together" name="AUTOSAR-A18_5_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-11 A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" name="AUTOSAR-A8_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-10 Placement new shall be used only with properly aligned pointers to sufficient storage capacity" name="AUTOSAR-A18_5_10" rules="2" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL" name="AUTOSAR-A8_4_10" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-13 A std::shared_ptr shall be passed to a function as: (1) a copy to express the function shares ownership (2) an lvalue reference to express that the function replaces the managed object (3) a const lvalue reference to express that the function retains a reference count" name="AUTOSAR-A8_4_13" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-12 A std::unique_ptr shall be passed to a function as: (1) a copy to express the function assumes ownership (2) an lvalue reference to express that the function replaces the managed object" name="AUTOSAR-A8_4_12" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-2 The std::vector&lt;bool> specialization shall not be used" name="AUTOSAR-A18_1_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-1-1 C-style arrays shall not be used" name="AUTOSAR-A18_1_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-1 An assignment operator shall return a reference to &quot;this&quot;" name="AUTOSAR-A13_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-4 A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" name="AUTOSAR-A18_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-3 The library functions abort, exit, getenv and system from library &lt;cstdlib> shall not be used" name="AUTOSAR-M18_0_3" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-2 A binary arithmetic operator and a bitwise operator shall return a &quot;prvalue&quot;" name="AUTOSAR-A13_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-3 The std::auto_ptr type shall not be used" name="AUTOSAR-A18_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-1-6 All std::hash specializations for user-defined types shall have a noexcept function call operator" name="AUTOSAR-A18_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-2-3 A relational operator shall return a boolean value" name="AUTOSAR-A13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-5 The unbounded functions of library &lt;cstring> shall not be used" name="AUTOSAR-M18_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-0-4 The time handling functions of library &lt;ctime> shall not be used" name="AUTOSAR-M18_0_4" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous" name="AUTOSAR-M2_10_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-14-1 The right hand operand of a logical &amp;&amp;, || operators shall not contain side effects" name="AUTOSAR-M5_14_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-9 A class, structure, or enumeration shall not be declared in the definition of its type" name="AUTOSAR-A7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-8 A non-type specifier shall be placed before a type specifier in a declaration" name="AUTOSAR-A7_1_8" rules="1" total="0" />
               <Category authTot="12;" authUrg="0;" desc="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line" name="AUTOSAR-A7_1_7" rules="3" total="12" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-6 The typedef specifier shall not be used" name="AUTOSAR-A7_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-1-5 The auto specifier shall not be used apart from following cases: (1) to declare that a variable has the same type as return type of a function call, (2) to declare that a variable has the same type as initializer of non-fundamental type, (3) to declare parameters of a generic lambda expression, (4) to declare a function template using trailing return type syntax" name="AUTOSAR-A7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-2 Forwarding values to other functions shall be done via: (1) std::move if the value is an rvalue reference, (2) std::forward if the value is forwarding reference" name="AUTOSAR-A18_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-1 The std::bind shall not be used" name="AUTOSAR-A18_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-4 An argument to std::forward shall not be subsequently used" name="AUTOSAR-A18_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-9-3 The std::move shall not be used on objects declared const or const&amp;" name="AUTOSAR-A18_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-8-2 Explicit specializations of function templates shall not be used" name="AUTOSAR-A14_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-8-1 An object shall not be accessed outside of its lifetime" name="AUTOSAR-A3_8_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-2 The # and ## operators should not be used" name="AUTOSAR-M16_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-4 If a class has a user-declared constructor that takes a parameter of type std::initializer_list, then it shall be the only constructor apart from special member function constructors" name="AUTOSAR-A8_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-3-1 There shall be at most one occurrence of the # or ## operators in a single macro definition" name="AUTOSAR-M16_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-2 The identifier main shall not be used for a function other than the global function main" name="AUTOSAR-M7_3_2" rules="1" total="0" />
               <Category authTot="13;" authUrg="1;" desc="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" name="AUTOSAR-M7_3_1" rules="1" total="13" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-1 The ', &quot;, /*, //, \ characters shall not occur in a header file name or in #include directive" name="AUTOSAR-A16_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-1 In an initialization list, the order of initialization shall be following: (1) virtual base classes in depth and left to right order of the inheritance graph, (2) direct base classes in left to right order of inheritance list, (3) non-static data members in the order they were declared in the class definition" name="AUTOSAR-A8_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-4 Using-directives shall not be used" name="AUTOSAR-M7_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-0 All memory shall be initialized before it is read" name="AUTOSAR-A8_5_0" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-3 There shall be no unnamed namespaces in header files" name="AUTOSAR-M7_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-5-3 A variable of type auto shall not be initialized using {} or ={} braced-initialization" name="AUTOSAR-A8_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-3-6 Using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" name="AUTOSAR-M7_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A16-2-2 There shall be no unused include directives" name="AUTOSAR-A16_2_2" rules="1" total="0" />
               <Category authTot="7;" authUrg="3;" desc="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization" name="AUTOSAR-A8_5_2" rules="1" total="7" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-0-1 Reserved identifiers, macros and functions in the C++ standard library shall not be defined, redefined or undefined" name="AUTOSAR-A17_0_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A9-3-1 Member functions shall not return non-const &quot;raw&quot; pointers or references to private or protected data owned by the class" name="AUTOSAR-A9_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-5 A loop-control-variable other than the loop-counter shall not be modified within condition or expression" name="AUTOSAR-M6_5_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-4 The loop-counter shall be modified by one of: --, ++, -= n, or += n; where n remains constant for the duration of the loop" name="AUTOSAR-M6_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-4-1 An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" name="AUTOSAR-M3_4_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-3 The loop-counter shall not be modified within condition or statement" name="AUTOSAR-M6_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-2 If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" name="AUTOSAR-M6_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-5-6 A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" name="AUTOSAR-M6_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-2 User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" name="AUTOSAR-A13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-2-1 An object shall not be assigned to an overlapping object" name="AUTOSAR-M0_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M4-10-1 NULL shall not be used as an integer value" name="AUTOSAR-M4_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-1-3 User defined literals operators shall only perform conversion of passed parameters" name="AUTOSAR-A13_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-3 Pointers to incomplete class types shall not be deleted" name="AUTOSAR-A5_3_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A5-3-2 Null pointers shall not be dereferenced" name="AUTOSAR-A5_3_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-3-1 Evaluation of the operand to the typeid operator shall not contain side effects" name="AUTOSAR-A5_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M18-7-1 The signal handling facilities of &lt;csignal> shall not be used" name="AUTOSAR-M18_7_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-1 Pseudorandom numbers shall not be generated using std::rand()" name="AUTOSAR-A26_5_1" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant" name="AUTOSAR-M4_10_2" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-6 A class or enumeration name shall not be hidden by a variable, function or enumerator declaration in the same scope" name="AUTOSAR-A2_10_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A26-5-2 Random number engines shall not be default-initialized" name="AUTOSAR-A26_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-4 The identifier name of a non-member object with static storage duration or static function shall not be reused within a namespace" name="AUTOSAR-A2_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-10-5 An identifier name of a function with static storage duration or a non-member object with external or internal linkage should not be reused" name="AUTOSAR-A2_10_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A4-5-1 Expressions with type enum or enum class shall not be used as operands to built-in and overloaded operators other than the subscript operator [ ], the assignment operator =, the equality operators == and !=, the unary &amp; operator, and the relational operators &lt;, &lt;=, >, >=" name="AUTOSAR-A4_5_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly" name="AUTOSAR-A15_5_3" rules="11" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-2 Program shall not be abruptly terminated. In particular, an implicit or explicit invocation of std::abort(), std::quick_exit(), std::_Exit(), std::terminate() shall not be done" name="AUTOSAR-A15_5_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-5-1 All user-provided class destructors, deallocation functions, move constructors, move assignment operators and swap functions shall not exit with an exception. A noexcept exception specification shall be added to these functions as appropriate" name="AUTOSAR-A15_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M9-6-4 Named bit-fields with signed integer type shall have a length of more than one bit" name="AUTOSAR-M9_6_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-10 The increment (++) and decrement (--) operators shall not be mixed with other operators in an expression" name="AUTOSAR-M5_2_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-12 An identifier with array type passed as a function argument shall not decay to a pointer" name="AUTOSAR-M5_2_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-2-11 The comma operator, &amp;&amp; operator and the || operator shall not be overloaded" name="AUTOSAR-M5_2_11" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-7-2 Template specialization shall be declared in the same file (1) as the primary template (2) as a user-defined type, for which the specialization is declared" name="AUTOSAR-A14_7_2" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" name="AUTOSAR-A3_9_1" rules="1" total="15" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-2-3 Include guards shall be provided" name="AUTOSAR-M16_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-6 Trivial accessor and mutator functions should be inlined" name="AUTOSAR-A3_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-5 A function definition shall only be placed in a class definition if (1) the function is intended to be inlined (2) it is a member function template (3) it is a member function of a class template" name="AUTOSAR-A3_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-4 When an array with external linkage is declared, its size shall be stated explicitly" name="AUTOSAR-A3_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-3 Implementation files, that are defined locally in the project, should have a file name extension of &quot;.cpp&quot;" name="AUTOSAR-A3_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-2 Header files, that are defined locally in the project, shall have a file name extension of one of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" name="AUTOSAR-A3_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A3-1-1 It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" name="AUTOSAR-A3_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-3-1 Only those characters specified in the C++ Language Standard basic source character set shall be used in the source code" name="AUTOSAR-A2_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-2 A base class shall only be declared virtual if it is used in a diamond hierarchy" name="AUTOSAR-M10_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-1 Classes should not be derived from virtual bases" name="AUTOSAR-M10_1_1" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" name="AUTOSAR-M8_0_1" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-2 All if ... else if constructs shall be terminated with an else clause" name="AUTOSAR-M6_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-1 An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" name="AUTOSAR-M6_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-1-1 Use of the C Standard Library shall be encapsulated and isolated" name="AUTOSAR-A17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A21-8-1 Arguments to character-handling functions shall be representable as an unsigned char" name="AUTOSAR-A21_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-1-3 An accessible base class shall not be both virtual and non-virtual in the same hierarchy" name="AUTOSAR-M10_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-6 The final clause of a switch statement shall be the default-clause" name="AUTOSAR-M6_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A25-1-1 Non-static data members or captured values of predicate function objects that are state related to this object's identity shall not be copied" name="AUTOSAR-A25_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-5 An unconditional throw or break statement shall terminate every non-empty switch-clause" name="AUTOSAR-M6_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-4 A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="AUTOSAR-M6_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-3 A switch statement shall be a well-formed switch statement" name="AUTOSAR-M6_4_3" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-7-1 The character sequence /* shall not be used within a C-style comment" name="AUTOSAR-M2_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-4-7 The condition of a switch statement shall not have bool type" name="AUTOSAR-M6_4_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-1 dynamic_cast should not be used" name="AUTOSAR-A5_2_1" rules="1" total="0" />
               <Category authTot="17;" authUrg="0;" desc="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested" name="AUTOSAR-M0_3_2" rules="1" total="17" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-5 An array or container shall not be accessed beyond its range" name="AUTOSAR-A5_2_5" rules="4" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults" name="AUTOSAR-M0_3_1" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-4 reinterpret_cast shall not be used" name="AUTOSAR-A5_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-3 A cast shall not remove any const or volatile qualification from the type of a pointer or reference" name="AUTOSAR-A5_2_3" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A5-2-2 Traditional C-style casts shall not be used" name="AUTOSAR-A5_2_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-5 Checked exceptions that could be thrown from a function shall be specified together with the function declaration and they shall be identical in all function declarations and for all its overriders" name="AUTOSAR-A15_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-2 The names of standard library macros and objects shall not be reused" name="AUTOSAR-M17_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-3 The noexcept specification of a function shall either be identical across all translation units, or identical or more restrictive between a virtual member function and an overrider" name="AUTOSAR-A15_4_3" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification" name="AUTOSAR-A15_4_4" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-3 The names of standard library functions shall not be overridden" name="AUTOSAR-M17_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-1 Dynamic exception-specification shall not be used" name="AUTOSAR-A15_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-4-2 If a function is declared to be noexcept, noexcept(true) or noexcept(&lt;true condition>), then it shall not exit with an exception" name="AUTOSAR-A15_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-1-1 Class shall not be derived from more than one base class which is not an interface class" name="AUTOSAR-A10_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M17-0-5 The setjmp macro and the longjmp function shall not be used" name="AUTOSAR-M17_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-2 All #else, #elif and #endif pre-processor directives shall reside in the same file as the #if or #ifdef directive to which they are related" name="AUTOSAR-M16_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A11-3-1 Friend declarations shall not be used" name="AUTOSAR-A11_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-1-1 The defined pre-processor operator shall only be used in one of the two standard forms" name="AUTOSAR-M16_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-2 The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" name="AUTOSAR-M7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-5-1 A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" name="AUTOSAR-M7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-4 An identifier with external linkage shall have exactly one definition" name="AUTOSAR-M3_2_4" rules="1" total="0" />
               <Category authTot="18;" authUrg="0;" desc="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include" name="AUTOSAR-A16_0_1" rules="5" total="18" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-2-1 All accessible entity names within a multiple inheritance hierarchy should be unique" name="AUTOSAR-M10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M8-3-1 Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" name="AUTOSAR-M8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-1 Constructors shall explicitly initialize all virtual base classes, all direct non-virtual base classes and all non-static data members" name="AUTOSAR-A12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-2 Both NSDMI and a non-static member initializer in a constructor shall not be used in the same type" name="AUTOSAR-A12_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-4 Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" name="AUTOSAR-M15_3_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-3 If all user-defined constructors of a class initialize data members with constant values that are the same across all constructors, then data members shall be initialized using NSDMI instead" name="AUTOSAR-A12_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-7 Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" name="AUTOSAR-M15_3_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-4 All constructors that are callable with a single argument of fundamental type shall be declared explicit" name="AUTOSAR-A12_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-6 Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" name="AUTOSAR-M15_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-1 All declarations of an object or function shall have compatible types" name="AUTOSAR-M3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A17-6-1 Non-standard entities shall not be added to standard namespaces" name="AUTOSAR-A17_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-3 A type, object or function that is used in multiple translation units shall be declared in one and only one file" name="AUTOSAR-M3_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-10-1 A pointer to member virtual function shall only be tested for equality with null-pointer-constant" name="AUTOSAR-A5_10_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-2-2 The One Definition Rule shall not be violated" name="AUTOSAR-M3_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-2-6 The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" name="AUTOSAR-A5_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-5 Common class initialization for non-constant members shall be done by a delegating constructor" name="AUTOSAR-A12_1_5" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination" name="AUTOSAR-M15_3_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-1-6 Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" name="AUTOSAR-A12_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M15-3-3 Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" name="AUTOSAR-M15_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M11-0-1 Member data in non-POD class types shall be private" name="AUTOSAR-M11_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-2 Variables shall not be implicitly captured in a lambda expression" name="AUTOSAR-A5_1_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead" name="AUTOSAR-A5_1_1" rules="1" total="2" />
               <Category authTot="21;" authUrg="0;" desc="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant" name="AUTOSAR-A4_10_1" rules="2" total="21" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-6 Return type of a non-void return type lambda expression should be explicitly specified" name="AUTOSAR-A5_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-4 A lambda expression object shall not outlive any of its reference-captured objects" name="AUTOSAR-A5_1_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-3 Parameter list (possibly empty) shall be included in every lambda expression" name="AUTOSAR-A5_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-4 Catch-all (ellipsis and std::exception) handlers shall be used only in (a) main, (b) task main functions, (c) in functions that are supposed to isolate independent components and (d) when calling third-party code that uses exceptions not according to AUTOSAR C++14 guidelines" name="AUTOSAR-A15_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-5 A class type exception shall be caught by reference or const reference" name="AUTOSAR-A15_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-3-2 If a function throws an exception, it shall be handled when meaningful actions can be taken, otherwise it shall be propagated" name="AUTOSAR-A15_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-2 Octal constants (other than zero) and octal escape sequences (other than &quot;\0&quot; ) shall not be used" name="AUTOSAR-M2_13_2" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions" name="AUTOSAR-A15_3_3" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-6-1 Functions declared with the [[noreturn]] attribute shall not return" name="AUTOSAR-A7_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-4 Literal suffixes shall be upper case" name="AUTOSAR-M2_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M2-13-3 A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" name="AUTOSAR-M2_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-19-1 Evaluation of constant unsigned integer expressions shall not lead to wrap-around" name="AUTOSAR-M5_19_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-1 A template constructor shall not participate in overload resolution for a single argument of the enclosing class type" name="AUTOSAR-A14_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-2-1 Non-virtual member functions shall not be redefined in derived classes" name="AUTOSAR-A10_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-2-1 When declaring function templates, the trailing return type syntax shall be used if the return type depends on the type of parameters" name="AUTOSAR-A8_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A14-5-3 A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations." name="AUTOSAR-A14_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-6 &quot;forward&quot; parameters declared as T &amp;&amp; shall always be forwarded" name="AUTOSAR-A8_4_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-5 Arguments to a function-like macro shall not contain tokens that look like pre-processing directives" name="AUTOSAR-M16_0_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-5 &quot;consume&quot; parameters declared as X &amp;&amp; shall always be moved from" name="AUTOSAR-A8_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-8 Output parameters shall not be used" name="AUTOSAR-A8_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-1 All usage of assembler shall be documented" name="AUTOSAR-M7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-7 &quot;in&quot; parameters for &quot;cheap to copy&quot; types shall be passed by value" name="AUTOSAR-A8_4_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-2 Macros shall only be #define'd or #undef'd in the global namespace" name="AUTOSAR-M16_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-6 Copy and move constructors and copy assignment and move assignment operators shall be declared protected or defined &quot;=delete&quot; in base class" name="AUTOSAR-A12_8_6" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized" name="AUTOSAR-A3_3_2" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-2 All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="AUTOSAR-A8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-1 #include directives in a file shall only be preceded by other pre-processor directives or comments" name="AUTOSAR-M16_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-3 Assembly language shall be encapsulated and isolated" name="AUTOSAR-M7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-7 Assignment operators should be declared with the ref-qualifier &amp;" name="AUTOSAR-A12_8_7" rules="1" total="0" />
               <Category authTot="16;" authUrg="1;" desc="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file" name="AUTOSAR-A3_3_1" rules="2" total="16" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-1 Functions shall not be defined using the ellipsis notation" name="AUTOSAR-A8_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M7-4-2 Assembler instructions shall only be introduced using the asm declaration" name="AUTOSAR-M7_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-4 Multiple output values from a function should be returned as a struct or tuple" name="AUTOSAR-A8_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-3 Common ways of passing parameters should be used" name="AUTOSAR-A8_4_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-4-1 The asm declaration shall not be used" name="AUTOSAR-A7_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-1 Trigraphs shall not be used" name="AUTOSAR-A2_5_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A2-5-2 Digraphs shall not be used" name="AUTOSAR-A2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A8-4-9 &quot;in-out&quot; parameters declared as T &amp; shall be modified" name="AUTOSAR-A8_4_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-8 If the # token appears as the first token on a line, then it shall be immediately followed by a pre-processing token" name="AUTOSAR-M16_0_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M16-0-7 Undefined macro identifiers shall not be used in #if or #elif pre-processor directives, except as operands to the defined operator" name="AUTOSAR-M16_0_7" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" name="AUTOSAR-M16_0_6" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-2 Bitwise operations and operations that assume data representation in memory shall not be performed on objects" name="AUTOSAR-A12_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M10-3-3 A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" name="AUTOSAR-M10_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-3 The continue statement shall only be used within a well-formed for loop" name="AUTOSAR-M6_6_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M3-3-2 If a function has internal linkage then all re-declarations shall include the static storage class specifier" name="AUTOSAR-M3_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-2 The goto statement shall jump to a label declared later in the same function body" name="AUTOSAR-M6_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-0-1 If a class declares a copy or move operation, or a destructor, either via &quot;=default&quot;, &quot;=delete&quot;, or via a user-provided declaration, then all others of these five special member functions shall be declared as well" name="AUTOSAR-A12_0_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M6-6-1 Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" name="AUTOSAR-M6_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-2 User-defined copy and move assignment operators should use user-defined no-throw swap function" name="AUTOSAR-A12_8_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-3 Moved-from object shall not be read-accessed" name="AUTOSAR-A12_8_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-4 Move constructor shall not initialize its class members and base classes using copy semantics" name="AUTOSAR-A12_8_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-8 Lambda expressions should not be defined inside another lambda expression" name="AUTOSAR-A5_1_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-5 A copy assignment and a move assignment operators shall handle self-assignment" name="AUTOSAR-A12_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-1-7 A lambda shall not be an operand to decltype or typeid" name="AUTOSAR-A5_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M19-3-1 The error indicator errno shall not be used" name="AUTOSAR-M19_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A12-8-1 Move and copy constructors shall move and respectively copy base classes and data members of a class, without any side effects" name="AUTOSAR-A12_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-3 The declaration of objects shall contain no more than two levels of pointer indirection" name="AUTOSAR-A5_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-9 An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-8-1 The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" name="AUTOSAR-M5_8_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-1 A project shall not contain instances of non-volatile variables being given values that are not subsequently used" name="AUTOSAR-A0_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-2 The condition of an if-statement and the condition of an iteration statement shall have type bool" name="AUTOSAR-A5_0_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-8 An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" name="AUTOSAR-M5_0_8" rules="2" total="0" />
               <Category authTot="17;" authUrg="0;" desc="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used" name="AUTOSAR-A0_1_2" rules="1" total="17" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-1 The value of an expression shall be the same under any order of evaluation that the standard permits" name="AUTOSAR-A5_0_1" rules="7" total="0" />
               <Category authTot="9;" authUrg="0;" desc="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use" name="AUTOSAR-M0_1_4" rules="1" total="9" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-3 Every function defined in an anonymous namespace, or static function with internal linkage, or private member function shall be used" name="AUTOSAR-A0_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-2 A project shall not contain infeasible paths" name="AUTOSAR-M0_1_2" rules="29" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions" name="AUTOSAR-M5_0_5" rules="2" total="1" />
               <Category authTot="5;" authUrg="0;" desc="AUTOSAR A27-0-4 C-style strings shall not be used" name="AUTOSAR-A27_0_4" rules="4" total="5" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-3 A project shall not contain unused variables" name="AUTOSAR-M0_1_3" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type" name="AUTOSAR-M5_0_4" rules="1" total="2" />
               <Category authTot="2;" authUrg="0;" desc="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used" name="AUTOSAR-A18_5_2" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-3 Alternate input and output operations on a file stream shall not be used without an intervening flush or positioning call" name="AUTOSAR-A27_0_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-7 There shall be no explicit floating-integral conversions of a cvalue expression" name="AUTOSAR-M5_0_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-1 Functions malloc, calloc, realloc and free shall not be used" name="AUTOSAR-A18_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-2 A C-style string shall guarantee sufficient space for data and the null terminator" name="AUTOSAR-A27_0_2" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A5-0-4 Pointer arithmetic shall not be used with pointers to non-final classes" name="AUTOSAR-A5_0_4" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-1 A project shall not contain unreachable code" name="AUTOSAR-M0_1_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-6 An implicit integral or floating-point conversion shall not reduce the size of the underlying type" name="AUTOSAR-M5_0_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A13-6-1 Digit sequences separators ' shall only be used as follows: (1) for decimal, every 3 digits, (2) for hexadecimal, every 2 digits, (3) for binary, every 4 digits" name="AUTOSAR-A13_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A27-0-1 Inputs from independent components shall be validated" name="AUTOSAR-A27_0_1" rules="8" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions" name="AUTOSAR-A0_1_4" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-5 There shall be no unused named parameters in the set of parameters for a virtual function and all the functions that override it" name="AUTOSAR-A0_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A0-1-6 There should be no unused type declarations" name="AUTOSAR-A0_1_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-5 A user-defined assignment operator shall not be virtual" name="AUTOSAR-A10_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A15-2-1 Constructors that are not noexcept shall not be invoked before program startup" name="AUTOSAR-A15_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-2 Functions shall not call themselves, either directly or indirectly" name="AUTOSAR-A7_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-18-1 The comma operator shall not be used" name="AUTOSAR-M5_18_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A7-5-1 A function shall not return a reference or a pointer to a parameter that is passed by reference to const" name="AUTOSAR-A7_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-4 If a project has sized or unsized version of operator &quot;delete&quot; globally defined, then both sized and unsized versions shall be defined" name="AUTOSAR-A18_5_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-3 The form of the delete expression shall match the form of the new expression used to allocate the memory" name="AUTOSAR-A18_5_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-3 A cvalue expression shall not be implicitly converted to a different underlying type" name="AUTOSAR-M5_0_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-5 Memory management functions shall ensure the following: (a) deterministic behavior resulting with the existence of worst-case execution time, (b) avoiding memory fragmentation, (c) avoid running out of memory, (d) avoiding mismatched allocations or deallocations, (e) no dependence on non-deterministic calls to kernel" name="AUTOSAR-A18_5_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M5-0-2 Limited dependence should be placed on C++ operator precedence rules in expressions" name="AUTOSAR-M5_0_2" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-1 Virtual function declaration shall contain exactly one of the three specifiers:" name="AUTOSAR-A10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-8 Objects that do not outlive a function shall have automatic storage duration" name="AUTOSAR-A18_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-2 Each overriding virtual function shall be declared with the override or final specifier" name="AUTOSAR-A10_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A10-3-3 Virtual functions shall not be introduced in a final class" name="AUTOSAR-A10_3_3" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)" name="AUTOSAR-M0_1_8" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR A18-5-9 Custom implementations of dynamic memory allocation and deallocation functions shall meet the semantic requirements specified in the corresponding &quot;Required behaviour&quot; clause from the C++ Standard" name="AUTOSAR-A18_5_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="AUTOSAR M0-1-9 There shall be no dead code" name="AUTOSAR-M0_1_9" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Flow Analysis" name="BD" rules="122" total="0">
               <Category authTot="0;" authUrg="0;" desc="Incorrect API usage" name="BD-API" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Miscellaneous" name="BD-MISC" rules="2" total="0" />
               <Category authTot="3;" authUrg="0;" desc="Possible Bugs" name="BD-PB" rules="67" total="3" />
               <Category authTot="1;" authUrg="0;" desc="Resources" name="BD-RES" rules="8" total="1" />
               <Category authTot="2;" authUrg="0;" desc="Security" name="BD-SECURITY" rules="19" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Containers" name="BD-CO" rules="5" total="0" />
               <Category authTot="7;" authUrg="0;" desc="Threads &amp; Synchronization" name="BD-TRS" rules="15" total="7" />
            </Category>
            <Category authTot="9;" authUrg="9;" desc="Code Duplication Detection" name="CDD" rules="4" total="9" />
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C" name="CERT_C" rules="363" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC12_C (REC) Detect and remove code that has no effect or is never executed" name="CERT_C-MSC12" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC11_C (REC) Incorporate diagnostic tests using assertions" name="CERT_C-MSC11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC14_C (REC) Do not introduce unnecessary platform dependencies" name="CERT_C-MSC14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC13_C (REC) Detect and remove unused values" name="CERT_C-MSC13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC15_C (REC) Do not depend on undefined behavior" name="CERT_C-MSC15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-WIN00_C (REC) Be specific when dynamically loading libraries" name="CERT_C-WIN00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP03_C (REC) Detect and handle floating-point errors" name="CERT_C-FLP03" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC17_C (REC) Finish every set of statements associated with a case label with a break statement" name="CERT_C-MSC17" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP02_C (REC) Avoid using floating-point numbers when precise computation is needed" name="CERT_C-FLP02" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value" name="CERT_C-MSC19" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP06_C (REC) Convert integers to floating point for floating-point operations" name="CERT_C-FLP06" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT02_C (REC) Understand integer conversion rules" name="CERT_C-INT02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP00_C (REC) Understand the limitations of floating-point numbers" name="CERT_C-FLP00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-API01_C (REC) Avoid laying out strings in memory directly before sensitive data" name="CERT_C-API01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-API02_C (REC) Functions that read or write to or from an array should take an argument to specify the source or target size" name="CERT_C-API02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT08_C (REC) Verify that all integer values are in range" name="CERT_C-INT08" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT09_C (REC) Ensure enumeration constants map to unique values" name="CERT_C-INT09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT07_C (REC) Use only explicitly signed or unsigned char type for numeric values" name="CERT_C-INT07" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT04_C (REC) Enforce limits on integer values originating from tainted sources" name="CERT_C-INT04" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs" name="CERT_C-INT05" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV30_C (RULE) Do not modify the object referenced by the return value of certain functions" name="CERT_C-ENV30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC22_C (REC) Use the setjmp(), longjmp() facility securely" name="CERT_C-MSC22" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions" name="CERT_C-MSC24" rules="4" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT13_C (REC) Use bitwise operators only on unsigned operands" name="CERT_C-INT13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT12_C (REC) Do not make assumptions about the type of a plain int bit-field when used in an expression" name="CERT_C-INT12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT10_C (REC) Do not assume a positive remainder when using the % operator" name="CERT_C-INT10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV33_C (RULE) Do not call system()" name="CERT_C-ENV33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV34_C (RULE) Do not store pointers returned by certain functions" name="CERT_C-ENV34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT18_C (REC) Evaluate integer expressions in a larger size before comparing or assigning to that size" name="CERT_C-INT18" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV31_C (RULE) Do not rely on an environment pointer following an operation that may invalidate it" name="CERT_C-ENV31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT15_C (REC) Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" name="CERT_C-INT15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC30_C (RULE) Do not use the rand() function for generating pseudorandom numbers" name="CERT_C-MSC30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV32_C (RULE) All exit handlers must return normally" name="CERT_C-ENV32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT16_C (REC) Do not make assumptions about representation of signed integers" name="CERT_C-INT16" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction" name="CERT_C-MEM00" rules="5" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM01_C (REC) Store a new value in pointers immediately after free()" name="CERT_C-MEM01" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG30_C (RULE) Call only asynchronous-safe functions within signal handlers" name="CERT_C-SIG30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM04_C (REC) Beware of zero-length allocations" name="CERT_C-MEM04" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM05_C (REC) Avoid large stack allocations" name="CERT_C-MEM05" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG31_C (RULE) Do not access shared objects in signal handlers" name="CERT_C-SIG31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM02_C (REC) Immediately cast the result of a memory allocation function call into a pointer to the allocated type" name="CERT_C-MEM02" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG34_C (RULE) Do not call signal() from within interruptible signal handlers" name="CERT_C-SIG34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM03_C (REC) Clear sensitive information stored in reusable resources" name="CERT_C-MEM03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG35_C (RULE) Do not return from a computational exception signal handler" name="CERT_C-SIG35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE31_C (RULE) Avoid side effects in arguments to unsafe macros" name="CERT_C-PRE31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE32_C (RULE) Do not use preprocessor directives in invocations of function-like macros" name="CERT_C-PRE32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE30_C (RULE) Do not create a universal character name through concatenation" name="CERT_C-PRE30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV02_C (REC) Beware of multiple environment variables with the same effective name" name="CERT_C-ENV02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ENV01_C (REC) Do not make assumptions about the size of an environment variable" name="CERT_C-ENV01" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC01_C (REC) Strive for logical completeness" name="CERT_C-MSC01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC04_C (REC) Use comments consistently and in a readable fashion" name="CERT_C-MSC04" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC07_C (REC) Detect and remove dead code" name="CERT_C-MSC07" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC09_C (REC) Character encoding: Use subset of ASCII for safety" name="CERT_C-MSC09" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT35_C (RULE) Use correct integer precisions" name="CERT_C-INT35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT36_C (RULE) Converting a pointer to integer or integer to pointer" name="CERT_C-INT36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT33_C (RULE) Ensure that division and remainder operations do not result in divide-by-zero errors" name="CERT_C-INT33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT34_C (RULE) Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand" name="CERT_C-INT34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT31_C (RULE) Ensure that integer conversions do not result in lost or misinterpreted data" name="CERT_C-INT31" rules="15" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT32_C (RULE) Ensure that operations on signed integers do not result in overflow" name="CERT_C-INT32" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT30_C (RULE) Ensure that unsigned integer operations do not wrap" name="CERT_C-INT30" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO34_C (RULE) Distinguish between characters read from a file and EOF or WEOF" name="CERT_C-FIO34" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO32_C (RULE) Do not perform operations on devices that are only appropriate for files" name="CERT_C-FIO32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO38_C (RULE) Do not copy a FILE object" name="CERT_C-FIO38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO39_C (RULE) Do not alternately input and output from a stream without an intervening flush or positioning call" name="CERT_C-FIO39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO37_C (RULE) Do not assume that fgets() or fgetws() returns a nonempty string when successful" name="CERT_C-FIO37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP44_C (RULE) Do not rely on side effects in operands to sizeof, _Alignof, or _Generic" name="CERT_C-EXP44" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP45_C (RULE) Do not perform assignments in selection statements" name="CERT_C-EXP45" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP42_C (RULE) Do not compare padding data" name="CERT_C-EXP42" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP43_C (RULE) Avoid undefined behavior when using restrict-qualified pointers" name="CERT_C-EXP43" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO30_C (RULE) Exclude user input from format strings" name="CERT_C-FIO30" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP46_C (RULE) Do not use a bitwise operator with a Boolean-like operand" name="CERT_C-EXP46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP47_C (RULE) Do not call va_arg with an argument of the incorrect type" name="CERT_C-EXP47" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources" name="CERT_C-MEM12" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR34_C (RULE) Cast characters to unsigned char before converting to larger integer sizes" name="CERT_C-STR34" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR31_C (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_C-STR31" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR32_C (RULE) Do not pass a non-null-terminated character sequence to a library function that expects a string" name="CERT_C-STR32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR30_C (RULE) Do not attempt to modify string literals" name="CERT_C-STR30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO45_C (RULE) Avoid TOCTOU race conditions while accessing files" name="CERT_C-FIO45" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO46_C (RULE) Do not access a closed file" name="CERT_C-FIO46" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO44_C (RULE) Only use values for fsetpos() that are returned from fgetpos()" name="CERT_C-FIO44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR37_C (RULE) Arguments to character-handling functions must be representable as an unsigned char" name="CERT_C-STR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR38_C (RULE) Do not confuse narrow and wide character strings and functions" name="CERT_C-STR38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO47_C (RULE) Use valid format strings" name="CERT_C-FIO47" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO41_C (RULE) Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects" name="CERT_C-FIO41" rules="5" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO42_C (RULE) Close files when they are no longer needed" name="CERT_C-FIO42" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO40_C (RULE) Reset strings on fgets() or fgetws() failure" name="CERT_C-FIO40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM07_C (REC) Ensure that the arguments to calloc(), when multiplied, do not wrap" name="CERT_C-MEM07" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC32_C (RULE) Properly seed pseudorandom number generators" name="CERT_C-MSC32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC33_C (RULE) Do not pass invalid data to the asctime() function" name="CERT_C-MSC33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC38_C (RULE) Do not treat a predefined identifier as an object if it might only be implemented as a macro" name="CERT_C-MSC38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC37_C (RULE) Ensure that control never reaches the end of a non-void function" name="CERT_C-MSC37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC39_C (RULE) Do not call va_arg() on a va_list that has an indeterminate value" name="CERT_C-MSC39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP30_C (RULE) Do not depend on the order of evaluation for side effects" name="CERT_C-EXP30" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON40_C (RULE) Do not refer to an atomic variable twice in an expression" name="CERT_C-CON40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP20_C (REC) Perform explicit tests to determine success, true and false, and equality" name="CERT_C-EXP20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON43_C (RULE) Do not allow data races in multithreaded code" name="CERT_C-CON43" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON41_C (RULE) Wrap functions that can fail spuriously in a loop" name="CERT_C-CON41" rules="1" total="0" />
               <Category authTot="3;" authUrg="1;" desc="CERT-MSC41_C (RULE) Never hard code sensitive information" name="CERT_C-MSC41" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC40_C (RULE) Do not violate constraints" name="CERT_C-MSC40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM33_C (RULE) Allocate and copy structures containing a flexible array member dynamically" name="CERT_C-MEM33" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM34_C (RULE) Only free memory allocated dynamically" name="CERT_C-MEM34" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed" name="CERT_C-MEM31" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM35_C (RULE) Allocate sufficient memory for an object" name="CERT_C-MEM35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG01_C (REC) Understand implementation-specific details regarding signal handler persistence" name="CERT_C-SIG01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM36_C (RULE) Do not modify the alignment of objects by calling realloc()" name="CERT_C-MEM36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG00_C (REC) Mask signals handled by noninterruptible signal handlers" name="CERT_C-SIG00" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="CERT-API00_C (REC) Functions should validate their parameters" name="CERT_C-API00" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO24_C (REC) Do not open a file that is already open" name="CERT_C-FIO24" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-SIG02_C (REC) Avoid using signals to implement normal functionality" name="CERT_C-SIG02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO21_C (REC) Do not create temporary files in shared directories" name="CERT_C-FIO21" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO22_C (REC) Close files before spawning processes" name="CERT_C-FIO22" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP40_C (RULE) Do not modify constant objects" name="CERT_C-EXP40" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM30_C (RULE) Do not access freed memory" name="CERT_C-MEM30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP33_C (RULE) Do not read uninitialized memory" name="CERT_C-EXP33" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP34_C (RULE) Do not dereference null pointers" name="CERT_C-EXP34" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP32_C (RULE) Do not access a volatile object through a nonvolatile reference" name="CERT_C-EXP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON32_C (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_C-CON32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP37_C (RULE) Call functions with the correct number and type of arguments" name="CERT_C-EXP37" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON33_C (RULE) Avoid race conditions when using library functions" name="CERT_C-CON33" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-CON30_C (RULE) Clean up thread-specific storage" name="CERT_C-CON30" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP35_C (RULE) Do not modify objects with temporary lifetime" name="CERT_C-EXP35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON31_C (RULE) Do not destroy a mutex while it is locked" name="CERT_C-CON31" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP36_C (RULE) Do not cast pointers into more strictly aligned pointer types" name="CERT_C-EXP36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON36_C (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_C-CON36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON37_C (RULE) Do not call signal() in a multithreaded program" name="CERT_C-CON37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON34_C (RULE) Declare objects shared between threads with appropriate storage durations" name="CERT_C-CON34" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type" name="CERT_C-EXP39" rules="6" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON35_C (RULE) Avoid deadlock by locking in a predefined order" name="CERT_C-CON35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON38_C (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_C-CON38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON39_C (RULE) Do not join or detach a thread that was previously joined or detached" name="CERT_C-CON39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL22_C (REC) Use volatile for data that cannot be cached" name="CERT_C-DCL22" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL20_C (REC) Explicitly specify void when a function accepts no arguments" name="CERT_C-DCL20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP00_C (REC) Use parentheses for precedence of operation" name="CERT_C-EXP00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP05_C (REC) Do not cast away a const qualification" name="CERT_C-EXP05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP02_C (REC) Be aware of the short-circuit behavior of the logical AND and OR operators" name="CERT_C-EXP02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP08_C (REC) Ensure pointer arithmetic is used correctly" name="CERT_C-EXP08" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL19_C (REC) Minimize the scope of variables and functions" name="CERT_C-DCL19" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL18_C (REC) Do not begin integer constants with 0 when specifying a decimal value" name="CERT_C-DCL18" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL12_C (REC) Implement abstract data types using opaque types" name="CERT_C-DCL12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO01_C (REC) Be careful using functions that use file names for identification" name="CERT_C-FIO01" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL11_C (REC) Understand the type issues associated with variadic functions" name="CERT_C-DCL11" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL10_C (REC) Maintain the contract between the writer and caller of variadic functions" name="CERT_C-DCL10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL16_C (REC) Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value" name="CERT_C-DCL16" rules="1" total="0" />
               <Category authTot="16;" authUrg="1;" desc="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static" name="CERT_C-DCL15" rules="1" total="16" />
               <Category authTot="3;" authUrg="0;" desc="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const" name="CERT_C-DCL13" rules="1" total="3" />
               <Category authTot="17;" authUrg="0;" desc="CERT-EXP12_C (REC) Do not ignore values returned by functions" name="CERT_C-EXP12" rules="2" total="17" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP10_C (REC) Do not depend on the order of evaluation of subexpressions or the order in which side effects take place" name="CERT_C-EXP10" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP15_C (REC) Do not place a semicolon on the same line as an if, for, or while statement" name="CERT_C-EXP15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP16_C (REC) Do not compare function pointers to constant values" name="CERT_C-EXP16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP14_C (REC) Beware of integer promotion when performing bitwise operations on integer types smaller than int" name="CERT_C-EXP14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP19_C (REC) Use braces for the body of an if, for, or while statement" name="CERT_C-EXP19" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR00_C (REC) Represent characters using an appropriate type" name="CERT_C-STR00" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR09_C (REC) Don't assume numeric values for expressions with type plain character" name="CERT_C-STR09" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation" name="CERT_C-STR07" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR04_C (REC) Use plain char for characters in the basic character set" name="CERT_C-STR04" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR05_C (REC) Use pointers to const when referring to string literals" name="CERT_C-STR05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR02_C (REC) Sanitize data passed to complex subsystems" name="CERT_C-STR02" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR03_C (REC) Do not inadvertently truncate a string" name="CERT_C-STR03" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL41_C (RULE) Do not declare variables inside a switch statement before the first case label" name="CERT_C-DCL41" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL40_C (RULE) Do not create incompatible declarations of the same function or object" name="CERT_C-DCL40" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" name="CERT_C-CON01" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON02_C (REC) Do not use volatile as a synchronization primitive" name="CERT_C-CON02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON05_C (REC) Do not perform operations that can block while holding a lock" name="CERT_C-CON05" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR11_C (REC) Do not specify the bound of a character array initialized with a string literal" name="CERT_C-STR11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL39_C (RULE) Avoid information leakage when passing a structure across a trust boundary" name="CERT_C-DCL39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR10_C (REC) Do not concatenate different type of string literals" name="CERT_C-STR10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL31_C (RULE) Declare identifiers before using them" name="CERT_C-DCL31" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL38_C (RULE) Use the correct syntax when declaring a flexible array member" name="CERT_C-DCL38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL37_C (RULE) Do not declare or define a reserved identifier" name="CERT_C-DCL37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL36_C (RULE) Do not declare an identifier with conflicting linkage classifications" name="CERT_C-DCL36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL30_C (RULE) Declare objects with appropriate storage durations" name="CERT_C-DCL30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR01_C (REC) Do not apply the sizeof operator to a pointer when taking the size of an array" name="CERT_C-ARR01" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR02_C (REC) Explicitly specify array bounds, even if implicitly defined by an initializer" name="CERT_C-ARR02" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized" name="CERT_C-PRE02" rules="1" total="8" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros" name="CERT_C-PRE00" rules="1" total="8" />
               <Category authTot="8;" authUrg="0;" desc="CERT-PRE01_C (REC) Use parentheses within macros around parameter names" name="CERT_C-PRE01" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE06_C (REC) Enclose header files in an include guard" name="CERT_C-PRE06" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-PRE07_C (REC) Avoid using repeated question marks" name="CERT_C-PRE07" rules="1" total="0" />
               <Category authTot="18;" authUrg="0;" desc="CERT-POS54_C (RULE) Detect and handle POSIX library errors" name="CERT_C-POS54" rules="3" total="18" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR30_C (RULE) Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure" name="CERT_C-ERR30" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR32_C (RULE) Do not rely on indeterminate values of errno" name="CERT_C-ERR32" rules="1" total="0" />
               <Category authTot="18;" authUrg="0;" desc="CERT-ERR33_C (RULE) Detect and handle standard library errors" name="CERT_C-ERR33" rules="4" total="18" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR34_C (RULE) Detect errors when converting a string to a number" name="CERT_C-ERR34" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS51_C (RULE) Avoid deadlock with POSIX threads by locking in predefined order" name="CERT_C-POS51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS50_C (RULE) Declare objects shared between POSIX threads with appropriate storage durations" name="CERT_C-POS50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS53_C (RULE) Do not use more than one mutex for concurrent waiting operations on a condition variable" name="CERT_C-POS53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS52_C (RULE) Do not perform operations that can block while holding a POSIX lock" name="CERT_C-POS52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR06_C (REC) Understand the termination behavior of assert() and abort()" name="CERT_C-ERR06" rules="1" total="0" />
               <Category authTot="4;" authUrg="0;" desc="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't" name="CERT_C-ERR07" rules="2" total="4" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL06_C (REC) Use meaningful symbolic constants to represent literal values" name="CERT_C-DCL06" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL01_C (REC) Do not reuse variable names in subscopes" name="CERT_C-DCL01" rules="2" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-DCL00_C (REC) Const-qualify immutable objects" name="CERT_C-DCL00" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL05_C (REC) Use typedefs of non-pointer types only" name="CERT_C-DCL05" rules="1" total="0" />
               <Category authTot="6;" authUrg="0;" desc="CERT-DCL04_C (REC) Do not declare more than one variable per declaration" name="CERT_C-DCL04" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL02_C (REC) Use visually distinct identifiers" name="CERT_C-DCL02" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS44_C (RULE) Do not use signals to terminate threads" name="CERT_C-POS44" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS48_C (RULE) Do not unlock or destroy another POSIX thread's mutex" name="CERT_C-POS48" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS47_C (RULE) Do not use threads that can be canceled asynchronously" name="CERT_C-POS47" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS49_C (RULE) When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed" name="CERT_C-POS49" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions" name="CERT_C-WIN30" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR01_C (REC) Use ferror() rather than errno to check for FILE stream errors" name="CERT_C-ERR01" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR02_C (REC) Avoid in-band error indicators" name="CERT_C-ERR02" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR04_C (REC) Choose an appropriate termination strategy" name="CERT_C-ERR04" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR05_C (REC) Application-independent code should provide error detection without dictating error handling" name="CERT_C-ERR05" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP37_C (RULE) Do not use object representations to compare floating-point values" name="CERT_C-FLP37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP36_C (RULE) Preserve precision when converting integral values to floating-point type" name="CERT_C-FLP36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP34_C (RULE) Ensure that floating-point conversions are within range of the new type" name="CERT_C-FLP34" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS33_C (RULE) Do not use vfork()" name="CERT_C-POS33" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR32_C (RULE) Ensure size arguments for variable length arrays are in a valid range" name="CERT_C-ARR32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS35_C (RULE) Avoid race conditions while checking for the existence of a symbolic link" name="CERT_C-POS35" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS34_C (RULE) Do not call putenv() with a pointer to an automatic variable as the argument" name="CERT_C-POS34" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR30_C (RULE) Do not form or use out-of-bounds pointers or array subscripts" name="CERT_C-ARR30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS37_C (RULE) Ensure that privilege relinquishment is successful" name="CERT_C-POS37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP32_C (RULE) Prevent or detect domain and range errors in math functions" name="CERT_C-FLP32" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS36_C (RULE) Observe correct revocation order while relinquishing privileges" name="CERT_C-POS36" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS39_C (RULE) Use the correct byte ordering when transferring data between systems" name="CERT_C-POS39" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FLP30_C (RULE) Do not use floating-point variables as loop counters" name="CERT_C-FLP30" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS38_C (RULE) Beware of race conditions when using fork and file descriptors" name="CERT_C-POS38" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR39_C (RULE) Do not add or subtract a scaled integer to a pointer" name="CERT_C-ARR39" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR38_C (RULE) Guarantee that library functions do not form invalid pointers" name="CERT_C-ARR38" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR37_C (RULE) Do not add or subtract an integer to a pointer to a non-array object" name="CERT_C-ARR37" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ARR36_C (RULE) Do not subtract or compare two pointers that do not refer to the same array" name="CERT_C-ARR36" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-POS30_C (RULE) Use the readlink() function properly" name="CERT_C-POS30" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="SEI CERT C++" name="CERT_CPP" rules="143" total="0">
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL55_CPP (RULE) Avoid information leakage when passing a class object across a trust boundary" name="CERT_CPP-DCL55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR52_CPP (RULE) Do not use setjmp() or longjmp()" name="CERT_CPP-ERR52" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL56_CPP (RULE) Avoid cycles during initialization of static objects" name="CERT_CPP-DCL56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR51_CPP (RULE) Handle all exceptions" name="CERT_CPP-ERR51" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON56_CPP (RULE) Do not speculatively lock a non-recursive mutex that is already owned by the calling thread" name="CERT_CPP-CON56" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL53_CPP (RULE) Do not write syntactically ambiguous declarations" name="CERT_CPP-DCL53" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program" name="CERT_CPP-ERR50" rules="14" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL54_CPP (RULE) Overload allocation and deallocation functions as a pair in the same scope" name="CERT_CPP-DCL54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL59_CPP (RULE) Do not define an unnamed namespace in a header file" name="CERT_CPP-DCL59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM51_CPP (RULE) Properly deallocate dynamically allocated resources" name="CERT_CPP-MEM51" rules="4" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors" name="CERT_CPP-MEM52" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL57_CPP (RULE) Do not let exceptions escape from destructors or deallocation functions" name="CERT_CPP-DCL57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL58_CPP (RULE) Do not modify the standard namespaces" name="CERT_CPP-DCL58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM50_CPP (RULE) Do not access freed memory" name="CERT_CPP-MEM50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON50_CPP (RULE) Do not destroy a mutex while it is locked" name="CERT_CPP-CON50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM55_CPP (RULE) Honor replacement dynamic storage management requirements" name="CERT_CPP-MEM55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON51_CPP (RULE) Ensure actively held locks are released on exceptional conditions" name="CERT_CPP-CON51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR59_CPP (RULE) Do not throw an exception across execution boundaries" name="CERT_CPP-ERR59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM56_CPP (RULE) Do not store an already-owned pointer value in an unrelated smart pointer" name="CERT_CPP-MEM56" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing" name="CERT_CPP-ERR58" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM53_CPP (RULE) Explicitly construct and destruct objects when manually managing object lifetime" name="CERT_CPP-MEM53" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions" name="CERT_CPP-ERR57" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM54_CPP (RULE) Provide placement new with properly aligned pointers to sufficient storage capacity" name="CERT_CPP-MEM54" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON54_CPP (RULE) Wrap functions that can spuriously wake up in a loop" name="CERT_CPP-CON54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR56_CPP (RULE) Guarantee exception safety" name="CERT_CPP-ERR56" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON55_CPP (RULE) Preserve thread safety and liveness when using condition variables" name="CERT_CPP-CON55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR55_CPP (RULE) Honor exception specifications" name="CERT_CPP-ERR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON52_CPP (RULE) Prevent data races when accessing bit-fields from multiple threads" name="CERT_CPP-CON52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR54_CPP (RULE) Catch handlers should order their parameter types from most derived to least derived" name="CERT_CPP-ERR54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MEM57_CPP (RULE) Avoid using default operator new for over-aligned types" name="CERT_CPP-MEM57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CON53_CPP (RULE) Avoid deadlock by locking in a predefined order" name="CERT_CPP-CON53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR53_CPP (RULE) Do not reference base classes or class data members in a constructor or destructor function-try-block handler" name="CERT_CPP-ERR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR53_CPP (RULE) Range check element access" name="CERT_CPP-STR53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL51_CPP (RULE) Do not declare or define a reserved identifier" name="CERT_CPP-DCL51" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR50_CPP (RULE) Guarantee that storage for strings has sufficient space for character data and the null terminator" name="CERT_CPP-STR50" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL52_CPP (RULE) Never qualify a reference type with const or volatile" name="CERT_CPP-DCL52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-STR52_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a basic_string" name="CERT_CPP-STR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL50_CPP (RULE) Do not define a C-style variadic function" name="CERT_CPP-DCL50" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer" name="CERT_CPP-STR51" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP53_CPP (RULE) Write constructor member initializers in the canonical order" name="CERT_CPP-OOP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP52_CPP (RULE) Do not delete a polymorphic object without a virtual destructor" name="CERT_CPP-OOP52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP51_CPP (RULE) Do not slice derived objects" name="CERT_CPP-OOP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP50_CPP (RULE) Do not invoke virtual functions from constructors or destructors" name="CERT_CPP-OOP50" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP57_CPP (RULE) Prefer special member functions and overloaded operators to C Standard Library functions" name="CERT_CPP-OOP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC50_CPP (RULE) Do not use std::rand() for generating pseudorandom numbers" name="CERT_CPP-MSC50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP56_CPP (RULE) Honor replacement handler requirements" name="CERT_CPP-OOP56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC51_CPP (RULE) Ensure your random number generator is properly seeded" name="CERT_CPP-MSC51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP55_CPP (RULE) Do not use pointer-to-member operators to access nonexistent members" name="CERT_CPP-OOP55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC52_CPP (RULE) Value-returning functions must return a value from all exit paths" name="CERT_CPP-MSC52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP54_CPP (RULE) Gracefully handle self-copy assignment" name="CERT_CPP-OOP54" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-OOP58_CPP (RULE) Copy operations must not mutate the source object" name="CERT_CPP-OOP58" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CERT-FIO51_CPP (RULE) Close files when they are no longer needed" name="CERT_CPP-FIO51" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CERT-FIO50_CPP (RULE) Do not alternately input and output from a file stream without an intervening positioning call" name="CERT_CPP-FIO50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-DCL60_CPP (RULE) Obey the one-definition rule" name="CERT_CPP-DCL60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP55_CPP (RULE) Do not access a cv-qualified object through a cv-unqualified type" name="CERT_CPP-EXP55" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage" name="CERT_CPP-EXP56" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP53_CPP (RULE) Do not read uninitialized memory" name="CERT_CPP-EXP53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP54_CPP (RULE) Do not access an object outside of its lifetime" name="CERT_CPP-EXP54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP59_CPP (RULE) Use offsetof() on valid types and members" name="CERT_CPP-EXP59" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP57_CPP (RULE) Do not cast or delete pointers to incomplete classes" name="CERT_CPP-EXP57" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP58_CPP (RULE) Pass an object of the correct type to va_start" name="CERT_CPP-EXP58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP62_CPP (RULE) Do not access the bits of an object representation that are not part of the object's value representation" name="CERT_CPP-EXP62" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP63_CPP (RULE) Do not rely on the value of a moved-from object" name="CERT_CPP-EXP63" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP60_CPP (RULE) Do not pass a nonstandard-layout type object across execution boundaries" name="CERT_CPP-EXP60" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP61_CPP (RULE) A lambda object must not outlive any of its reference captured objects" name="CERT_CPP-EXP61" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC53_CPP (RULE) Do not return from a function declared [[noreturn]]" name="CERT_CPP-MSC53" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-MSC54_CPP (RULE) A signal handler must be a plain old function" name="CERT_CPP-MSC54" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number" name="CERT_CPP-ERR62" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR61_CPP (RULE) Catch exceptions by lvalue reference" name="CERT_CPP-ERR61" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-ERR60_CPP (RULE) Exception objects must be nothrow copy constructible" name="CERT_CPP-ERR60" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR57_CPP (RULE) Provide a valid ordering predicate" name="CERT_CPP-CTR57" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR58_CPP (RULE) Predicate function objects should not be mutable" name="CERT_CPP-CTR58" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR53_CPP (RULE) Use valid iterator ranges" name="CERT_CPP-CTR53" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR54_CPP (RULE) Do not subtract iterators that do not refer to the same container" name="CERT_CPP-CTR54" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR55_CPP (RULE) Do not use an additive operator on an iterator if the result would overflow" name="CERT_CPP-CTR55" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR56_CPP (RULE) Do not use pointer arithmetic on polymorphic objects" name="CERT_CPP-CTR56" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR50_CPP (RULE) Guarantee that container indices and iterators are within the valid range" name="CERT_CPP-CTR50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR51_CPP (RULE) Use valid references, pointers, and iterators to reference elements of a container" name="CERT_CPP-CTR51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-CTR52_CPP (RULE) Guarantee that library functions do not overflow" name="CERT_CPP-CTR52" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-INT50_CPP (RULE) Do not cast to an out-of-range enumeration value" name="CERT_CPP-INT50" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP51_CPP (RULE) Do not delete an array through a pointer of the incorrect type" name="CERT_CPP-EXP51" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP52_CPP (RULE) Do not rely on side effects in unevaluated operands" name="CERT_CPP-EXP52" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CERT-EXP50_CPP (RULE) Do not depend on the order of evaluation for side effects" name="CERT_CPP-EXP50" rules="6" total="0" />
            </Category>
            <Category authTot="149;" authUrg="6;" desc="Coding Conventions" name="CODSTA" rules="441" total="149">
               <Category authTot="91;" authUrg="1;" desc="Coding Conventions for C++" name="CODSTA-CPP" rules="112" total="91" />
               <Category authTot="41;" authUrg="4;" desc="Coding Conventions for Modern C++" name="CODSTA-MCPP" rules="68" total="41" />
            </Category>
            <Category authTot="69;" authUrg="5;" desc="Comments" name="COMMENT" rules="16" total="69" />
            <Category authTot="0;" authUrg="0;" desc="Common Weakness Enumeration" name="CWE" rules="83" total="0">
               <Category authTot="0;" authUrg="0;" desc="CWE-532 Inclusion of Sensitive Information in Log Files" name="CWE-532" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-772 Missing Release of Resource after Effective Lifetime" name="CWE-772" rules="2" total="1" />
               <Category authTot="1;" authUrg="0;" desc="CWE-476 NULL Pointer Dereference" name="CWE-476" rules="2" total="1" />
               <Category authTot="1;" authUrg="0;" desc="CWE-770 Allocation of Resources Without Limits or Throttling" name="CWE-770" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-190 Integer Overflow or Wraparound" name="CWE-190" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-78 Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" name="CWE-78" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-617 Reachable Assertion" name="CWE-617" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-835 Loop with Unreachable Exit Condition ('Infinite Loop')" name="CWE-835" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-415 Double Free" name="CWE-415" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-119 Improper Restriction of Operations within the Bounds of a Memory Buffer" name="CWE-119" rules="11" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-416 Use After Free" name="CWE-416" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-611 Improper Restriction of XML External Entity Reference" name="CWE-611" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-732 Incorrect Permission Assignment for Critical Resource" name="CWE-732" rules="2" total="0" />
               <Category authTot="3;" authUrg="2;" desc="CWE-798 Use of Hard-coded Credentials" name="CWE-798" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="CWE-125 Out-of-bounds Read" name="CWE-125" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-400 Uncontrolled Resource Consumption" name="CWE-400" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-269 Improper Privilege Management" name="CWE-269" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-863 Incorrect Authorization" name="CWE-863" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-200 Information Exposure" name="CWE-200" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-287 Improper Authentication" name="CWE-287" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-362 Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" name="CWE-362" rules="5" total="0" />
               <Category authTot="1;" authUrg="0;" desc="CWE-20 Improper Input Validation" name="CWE-20" rules="10" total="1" />
               <Category authTot="0;" authUrg="0;" desc="CWE-22 Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" name="CWE-22" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-89 Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" name="CWE-89" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-704 Incorrect Type Conversion or Cast" name="CWE-704" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-426 Untrusted Search Path" name="CWE-426" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-787 Out-of-bounds Write" name="CWE-787" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="CWE-326 Inadequate Encryption Strength" name="CWE-326" rules="1" total="0" />
            </Category>
            <Category authTot="5;" authUrg="0;" desc="Exceptions" name="EXCEPT" rules="26" total="5" />
            <Category authTot="212;" authUrg="0;" desc="Formatting" name="FORMAT" rules="51" total="212" />
            <Category authTot="13;" authUrg="0;" desc="Global Static Analysis" name="GLOBAL" rules="20" total="13" />
            <Category authTot="0;" authUrg="0;" desc="High Integrity C++" name="HICPP" rules="234" total="0">
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.2 Initialize none, the first only or all enumerators in an enumeration" name="HICPP-7_2_2" rules="1" total="0" />
               <Category authTot="153;" authUrg="0;" desc="HIC++ 2.1.1 Do not use tab characters in source files" name="HICPP-2_1_1" rules="1" total="153" />
               <Category authTot="21;" authUrg="0;" desc="HIC++ 2.5.3 Use nullptr for the null pointer constant" name="HICPP-2_5_3" rules="1" total="21" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.1.1 Only use instances of std::exception for exceptions" name="HICPP-15_1_1" rules="2" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.2 Do not use octal constants (other than zero)" name="HICPP-2_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.5.1 Do not concatenate strings with different encoding prefixes" name="HICPP-2_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.4 Write members in an initialization list in the order in which they are declared" name="HICPP-12_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.2.1 Use an explicit enumeration base and ensure that it is large enough to store all enumerators" name="HICPP-7_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.5 Use delegating constructors to reduce code duplication" name="HICPP-12_4_5" rules="1" total="0" />
               <Category authTot="7;" authUrg="0;" desc="HIC++ 3.3.1 Do not use variables with static storage duration" name="HICPP-3_3_1" rules="1" total="7" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.5.1 Do not ignore the result of std::remove, std::remove if or std::unique" name="HICPP-17_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.5 Implement a minimal set of operators and use them to implement all other related operators" name="HICPP-13_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.1.1 Ensure that a function argument does not undergo an array-to-pointer conversion" name="HICPP-4_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.2 Ensure that a braced aggregate initializer matches the layout of the aggregate object" name="HICPP-8_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.4.1 Do not access an invalid object or an object with indeterminate value" name="HICPP-8_4_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.2 If a member of a set of callable functions includes a universal reference parameter, ensure that one appears in the same position for all other members" name="HICPP-13_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.1 Within the scope of a lock, ensure that no static path results in a lock of the same mutex" name="HICPP-18_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.2 Ensure that order of nesting of locks in a project forms a DAG" name="HICPP-18_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.5 Do not access the members of std::mutex directly" name="HICPP-18_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.6 Do not use relaxed atomics" name="HICPP-18_3_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.3 Ensure that the form of delete matches the form of new used to allocate the memory" name="HICPP-5_3_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.3 Do not use std::recursive mutex" name="HICPP-18_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.2 Ensure that a pointer to member that is a virtual function is only compared (==) with nullptr" name="HICPP-5_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.1.1 Ensure that all overloads of a function are visible from where it is called" name="HICPP-13_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.3.4 Only use std::unique lock when std::lock guard cannot be used" name="HICPP-18_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.7.1 Do not write code that expects floating point calculations to yield exact results" name="HICPP-5_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.2 Allocate memory using new and release it using delete" name="HICPP-5_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.3.1 Do not apply unary minus to operands of unsigned type" name="HICPP-5_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.2.1 Declare bit-fields with an explicitly unsigned integral or enumeration type" name="HICPP-9_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.3.1 Correctly declare overloads for operator new and delete" name="HICPP-12_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.4 Ensure that a switch statement has at least two case labels, distinct from the default label" name="HICPP-6_1_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.1.1 Declare all data members private" name="HICPP-11_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.3 Ensure that a non-empty case statement block does not fall through to the next label" name="HICPP-6_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.2 Explicitly cover all paths through multi-way selection statements" name="HICPP-6_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.1.1 Enclose the body of a selection or an iteration statement in a compound statement" name="HICPP-6_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.3.1 Do not use using directives" name="HICPP-7_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.2.1 Do not throw an exception from a destructor" name="HICPP-15_2_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier" name="HICPP-2_4_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.7 Declare assignment operators with the ref-qualifier &amp;" name="HICPP-12_5_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.3.1 Ensure that a derived class has at most one base class which is not an interface class" name="HICPP-10_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.8 Make the copy assignment operator of an abstract class protected or define it =delete" name="HICPP-12_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.6 Use an atomic, non-throwing swap operation to implement the copy and move assignment operators" name="HICPP-12_5_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.3 Ensure that a user defined move/copy constructor only moves/copies base and member objects" name="HICPP-12_5_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.4 Declare noexcept the move constructor and move assignment operator" name="HICPP-12_5_4" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="HIC++ 8.1.1 Do not use multiple levels of pointer indirection" name="HICPP-8_1_1" rules="1" total="3" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.2.1 Do not declare functions at block scope" name="HICPP-3_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.1 Use const container calls when result is immediately converted to a const iterator" name="HICPP-17_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.4.2 Use API calls that construct objects in place" name="HICPP-17_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.4.1 Do not convert floating values to integral types except through use of standard library functions" name="HICPP-4_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.1 Do not overload operators with special semantics" name="HICPP-13_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.2 Synchronize access to data shared between threads using a single lock" name="HICPP-18_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.2 Ensure that the return type of an overloaded binary operator matches the built-in counterparts" name="HICPP-13_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.3 Do not share volatile data between threads" name="HICPP-18_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.3 Declare binary arithmetic and bitwise operators as non-members" name="HICPP-13_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 13.2.4 When overloading the subscript operator (operator[]) implement both const and non-const versions" name="HICPP-13_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.1 Use high integrity::thread in place of std::thread" name="HICPP-18_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.6.1 Do not use bitwise operators with signed operands" name="HICPP-5_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.2.4 Use std::call_once rather than the Double-Checked Locking pattern" name="HICPP-18_2_4" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object" name="HICPP-5_2_1" rules="3" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.2.2 Ensure that functions do not call themselves, either directly or indirectly" name="HICPP-5_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.2 Ensure that a constructor initializes explicitly all base classes and non-static data members" name="HICPP-12_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.3 Do not specify both an NSDMI and a member initializer in a constructor for the same non static member" name="HICPP-12_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.4.1 Do not use the dynamic type of an object unless the object is fully constructed" name="HICPP-12_4_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.4.1 Postpone variable definitions as long as possible" name="HICPP-6_4_1" rules="2" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate" name="HICPP-15_3_2" rules="3" total="1" />
               <Category authTot="22;" authUrg="0;" desc="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards" name="HICPP-16_1_1" rules="9" total="22" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.2 Do not include a path specifier in filenames supplied in #include directives" name="HICPP-16_1_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 11.2.1 Do not use friend declarations" name="HICPP-11_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.1 Do not use the C comment delimiters /* ... */" name="HICPP-2_3_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file" name="HICPP-7_4_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.3 Ensure that an object or a function used from multiple translation units is declared in a single header file" name="HICPP-7_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.4.2 Ensure that an inline function, a function template, or a type used from multiple translation units is defined in a single header file" name="HICPP-7_4_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.5 Include directly the minimum number of headers required for compilation" name="HICPP-16_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.3 Match the filename in a #include directive to the one on the filesystem" name="HICPP-16_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 15.3.1 Do not access non-static members from a catch handler of constructor/destructor function try block" name="HICPP-15_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 16.1.4 Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" name="HICPP-16_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.3.2 Do not comment out code" name="HICPP-2_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.2.1 Use the override special identifier when overriding a virtual function" name="HICPP-10_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.4 Do not create smart pointers of array type" name="HICPP-17_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.5 Do not create an rvalue reference of std::array" name="HICPP-17_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.1.1 Do not hide declarations" name="HICPP-3_1_1" rules="5" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.1 Do not use std::move on objects declared with const or const &amp; type" name="HICPP-17_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.1.1 Use variadic templates rather than an ellipsis" name="HICPP-14_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.2 Use std::forward to forward universal references" name="HICPP-17_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.3.3 Do not subsequently use the argument to std::forward" name="HICPP-17_3_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object" name="HICPP-3_5_1" rules="4" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 4.3.1 Do not convert an expression of wider floating point type to a narrower floating point type" name="HICPP-4_3_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.10 Use static assert for assertions involving compile time constants" name="HICPP-7_1_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.4 Do not pass std::unique ptr by const reference" name="HICPP-8_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.3 Pass small objects with a trivial copy constructor by value" name="HICPP-8_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.2 Do not declare functions with an excessive number of parameters" name="HICPP-8_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.2.1 Make parameter names absent or identical in all declarations" name="HICPP-8_2_1" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="HIC++ 18.1.1 Do not use platform specific multi-threading facilities" name="HICPP-18_1_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.6 Do not code side effects into the right-hand operands of: &amp;&amp;, ||, sizeof, typeid or a function passed to condition variable::wait" name="HICPP-5_1_6" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.5 Include a (possibly empty) parameter list in every lambda expression" name="HICPP-5_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.5.1 Ensure that the right hand operand of the division or remainder operators is demonstrably non-zero" name="HICPP-5_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.2 Do not rely on the sequence of evaluation within an expression" name="HICPP-5_1_2" rules="10" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 5.1.1 Use symbolic names instead of literal values in code" name="HICPP-5_1_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.4 Do not capture variables implicitly in a lambda" name="HICPP-5_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.1.3 Use parentheses in expressions to specify the intent of the expression" name="HICPP-5_1_3" rules="2" total="0" />
               <Category authTot="6;" authUrg="0;" desc="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes" name="HICPP-12_5_1" rules="1" total="6" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.5.2 Define special members =default if the behavior is equivalent" name="HICPP-12_5_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.2 Ensure that execution of a function with a non-void return type ends in a return statement with a value" name="HICPP-6_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.1.1 Do not declare implicit user defined conversions" name="HICPP-12_1_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.1 Ensure that all statements are reachable" name="HICPP-1_2_1" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.2.2 Ensure that no expression or sub-expression is redundant" name="HICPP-1_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.3.1 Ensure that the label(s) for a jump statement or a switch condition appear later, in the same or an enclosing block" name="HICPP-6_3_1" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to" name="HICPP-7_1_4" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 2.2.1 Do not use digraphs or trigraphs" name="HICPP-2_2_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.3 Do not place type specifiers before non-type specifiers in a declaration" name="HICPP-7_1_3" rules="1" total="0" />
               <Category authTot="15;" authUrg="0;" desc="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types" name="HICPP-7_1_6" rules="3" total="15" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.5 Do not inline large functions" name="HICPP-7_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.5.1 Do not use the asm declaration" name="HICPP-7_5_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call" name="HICPP-7_1_8" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.7 Use a trailing return type in preference to type disambiguation using typename" name="HICPP-7_1_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 7.1.9 Do not explicitly specify the return type of a lambda" name="HICPP-7_1_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 10.1.1 Ensure that access to base class subobjects does not require explicit disambiguation" name="HICPP-10_1_1" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="HIC++ 7.1.2 Use const whenever possible" name="HICPP-7_1_2" rules="1" total="8" />
               <Category authTot="12;" authUrg="0;" desc="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration" name="HICPP-7_1_1" rules="2" total="12" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.2 Do not explicitly specialize a function template that is overloaded with other templates" name="HICPP-14_2_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 17.2.1 Wrap use of the C Standard Library" name="HICPP-17_2_1" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.1 Do not return a reference or a pointer to an automatic variable defined within the function" name="HICPP-3_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.3 Declare extern an explicitly instantiated template" name="HICPP-14_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.3 Use RAII for resources" name="HICPP-3_4_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 14.2.1 Declare template specializations in the same file as the primary template they specialize." name="HICPP-14_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 3.4.2 Do not assign the address of a variable to a pointer with a greater lifetime" name="HICPP-3_4_2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression" name="HICPP-4_2_2" rules="6" total="2" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression" name="HICPP-4_2_1" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.4 Define =delete functions with parameters of type rvalue reference to const" name="HICPP-8_3_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.3 Do not use default arguments" name="HICPP-8_3_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 8.3.1 Do not write functions with an excessive McCabe Cyclomatic Complexity" name="HICPP-8_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 18.4.1 Do not use std::condition variable any on a std::mutex" name="HICPP-18_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.3 Do not convert from a base class to a derived class" name="HICPP-5_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.4.2 Do not cast an expression to an enumeration type" name="HICPP-5_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 5.8.1 Do not use the conditional operator (?:) as a sub-expression" name="HICPP-5_8_1" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call" name="HICPP-5_4_1" rules="3" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.5 Do not introduce virtual functions in a final class" name="HICPP-9_1_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 17.1.1 Do not use std::vector&lt;bool>" name="HICPP-17_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.3 Do not return non-const handles to class data from const member functions" name="HICPP-9_1_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.4 Do not write member functions which return non-const handles to data less accessible than the member function" name="HICPP-9_1_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.1 Declare static any member function that does not require this. Alternatively, declare const any member function that does not modify the externally visible state of the object" name="HICPP-9_1_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 9.1.2 Make default arguments the same or absent when overriding a virtual function" name="HICPP-9_1_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.4 Do not use deprecated STL library features" name="HICPP-1_3_4" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="HIC++ 1.3.3 Do not use the C Standard Library .h headers" name="HICPP-1_3_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.4 Only modify a for loop counter in the for expression" name="HICPP-6_2_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.5 Do not use throw exception specifications" name="HICPP-1_3_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.3 Do not alter a control or counter variable more than once in a loop" name="HICPP-6_2_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 12.2.1 Declare virtual, private or protected the destructor of a type used as a base class" name="HICPP-12_2_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.2 Do not use the register keyword" name="HICPP-1_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 1.3.1 Do not use the increment operator (++) on a variable of type bool" name="HICPP-1_3_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.2 Ensure that a loop has a single loop counter, an optional control variable, and is not degenerate" name="HICPP-6_2_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="HIC++ 6.2.1 Implement a loop that only uses element values as a range-based loop" name="HICPP-6_2_1" rules="1" total="0" />
            </Category>
            <Category authTot="12;" authUrg="0;" desc="Initialization" name="INIT" rules="20" total="12" />
            <Category authTot="385;" authUrg="4;" desc="Joint Strike Fighter" name="JSF" rules="278" total="385" />
            <Category authTot="35;" authUrg="1;" desc="Metrics" name="METRICS" rules="43" total="35" />
            <Category authTot="49;" authUrg="1;" desc="MISRA C 1998" name="MISRA" rules="60" total="49" />
            <Category authTot="79;" authUrg="1;" desc="MISRA C 2004" name="MISRA2004" rules="221" total="79" />
            <Category authTot="197;" authUrg="2;" desc="MISRA C++ 2008" name="MISRA2008" rules="336" total="197" />
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012 (Legacy)" name="MISRA2012" rules="322" total="0">
               <Category authTot="57;" authUrg="0;" desc="MISRA C 2012 Rules" name="MISRA2012-RULE" rules="279" total="57" />
               <Category authTot="28;" authUrg="0;" desc="MISRA C 2012 Directives" name="MISRA2012-DIR" rules="43" total="28" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="MISRA C 2012" name="MISRAC2012" rules="322" total="0">
               <Category authTot="0;" authUrg="0;" desc="Rule 11.3 (Required) A cast shall not be performed between a pointer to object type and a pointer to a different object type" name="MISRAC2012-RULE_11_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.13 (Required) A line whose first token is # shall be a valid preprocessing directive" name="MISRAC2012-RULE_20_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.5 (Required) An external object or function shall be declared once in one and only one file" name="MISRAC2012-RULE_8_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.4 (Advisory) A conversion should not be performed between a pointer to object and an integer type" name="MISRAC2012-RULE_11_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.12 (Required) A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" name="MISRAC2012-RULE_20_12" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.6 (Required) An identifier with external linkage shall have exactly one external definition" name="MISRAC2012-RULE_8_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.5 (Advisory) A conversion should not be performed from pointer to void into pointer to object" name="MISRAC2012-RULE_11_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.1 (Advisory) The goto statement should not be used" name="MISRAC2012-RULE_15_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.11 (Required) A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" name="MISRAC2012-RULE_20_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.3 (Required) All declarations of an object or function shall use the same names and type qualifiers" name="MISRAC2012-RULE_8_3" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.6 (Required) A cast shall not be performed between pointer to void and an arithmetic type" name="MISRAC2012-RULE_11_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.2 (Required) The goto statement shall jump to a label declared later in the same function" name="MISRAC2012-RULE_15_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.10 (Advisory) The # and ## preprocessor operators should not be used" name="MISRAC2012-RULE_20_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.4 (Required) A compatible declaration shall be visible when an object or function with external linkage is defined" name="MISRAC2012-RULE_8_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.7 (Required) A cast shall not be performed between pointer to object and a non-integer arithmetic type" name="MISRAC2012-RULE_11_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.3 (Required) Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" name="MISRAC2012-RULE_15_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.9 (Advisory) An object should be defined at block scope if its identifier only appears in a single function" name="MISRAC2012-RULE_8_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.8 (Required) A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" name="MISRAC2012-RULE_11_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.4 (Advisory) There should be no more than one break or goto statement used to terminate any iteration statement" name="MISRAC2012-RULE_15_4" rules="1" total="0" />
               <Category authTot="22;" authUrg="0;" desc="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant" name="MISRAC2012-RULE_11_9" rules="2" total="22" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.5 (Advisory) A function should have a single point of exit at the end" name="MISRAC2012-RULE_15_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.1 (Mandatory) An object shall not be assigned or copied to an overlapping object" name="MISRAC2012-RULE_19_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.7 (Advisory) Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" name="MISRAC2012-RULE_8_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.6 (Required) The body of an iteration-statement or a selection-statement shall be a compound-statement" name="MISRAC2012-RULE_15_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 19.2 (Advisory) The union keyword should not be used" name="MISRAC2012-RULE_19_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.8 (Required) The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" name="MISRAC2012-RULE_8_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.14 (Required) The validity of values received from external sources shall be checked" name="MISRAC2012-DIR_4_14" rules="12" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 15.7 (Required) All if ... else if constructs shall be terminated with an else statement" name="MISRAC2012-RULE_15_7" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" name="MISRAC2012-DIR_4_13" rules="6" total="2" />
               <Category authTot="2;" authUrg="0;" desc="Dir 4.12 (Required) Dynamic memory allocation shall not be used" name="MISRAC2012-DIR_4_12" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.11 (Required) The validity of values passed to library functions shall be checked" name="MISRAC2012-DIR_4_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.10 (Required) Precautions shall be taken in order to prevent the contents of a header file being included more than once" name="MISRAC2012-DIR_4_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.14 (Required) All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" name="MISRAC2012-RULE_20_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.1 (Required) Octal and hexadecimal escape sequences shall be terminated" name="MISRAC2012-RULE_4_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 4.2 (Advisory) Trigraphs should not be used" name="MISRAC2012-RULE_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.1 (Required) Types shall be explicitly specified" name="MISRAC2012-RULE_8_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.2 (Required) Function types shall be in prototype form with named parameters" name="MISRAC2012-RULE_8_2" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.1 (Required) Conversions shall not be performed between a pointer to a function and any other type" name="MISRAC2012-RULE_11_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 11.2 (Required) Conversions shall not be performed between a pointer to an incomplete type and any other type" name="MISRAC2012-RULE_11_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.3 (Required) The same file shall not be open for read and write access at the same time on different streams" name="MISRAC2012-RULE_22_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.4 (Mandatory) There shall be no attempt to write to a stream which has been opened as read-only" name="MISRAC2012-RULE_22_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.5 (Mandatory) A pointer to a FILE object shall not be dereferenced" name="MISRAC2012-RULE_22_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.6 (Mandatory) The value of a pointer to a FILE shall not be used after the associated stream has been closed" name="MISRAC2012-RULE_22_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.7 (Required) The macro EOF shall only be compared with the unmodified return value from any Standard Library function capable of returning EOF" name="MISRAC2012-RULE_22_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.8 (Required) The value of errno shall be set to zero prior to a call to an errno-setting-function" name="MISRAC2012-RULE_22_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.9 (Required) The value of errno shall be tested against zero after calling an errno-setting-function" name="MISRAC2012-RULE_22_9" rules="1" total="0" />
               <Category authTot="1;" authUrg="0;" desc="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released" name="MISRAC2012-RULE_22_1" rules="1" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.2 (Mandatory) A block of memory shall only be freed if it was allocated by means of a" name="MISRAC2012-RULE_22_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.4 (Required) Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" name="MISRAC2012-RULE_10_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.5 (Advisory) The value of an expression should not be cast to an inappropriate essential type" name="MISRAC2012-RULE_10_5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.1 (Required) A loop counter shall not have essentially floating type" name="MISRAC2012-RULE_14_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.6 (Required) The value of a composite expression shall not be assigned to an object with wider essential type" name="MISRAC2012-RULE_10_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.2 (Required) A for loop shall be well-formed" name="MISRAC2012-RULE_14_2" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.4 (Required) A string literal shall not be assigned to an object unless the object's type is &quot;pointer to const-qualified char&quot;" name="MISRAC2012-RULE_7_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.7 (Required) If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" name="MISRAC2012-RULE_10_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.3 (Required) Controlling expressions shall not be invariant" name="MISRAC2012-RULE_14_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.8 (Required) The value of a composite expression shall not be cast to a different essential type category or a wider essential type" name="MISRAC2012-RULE_10_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 14.4 (Required) The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" name="MISRAC2012-RULE_14_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.1 (Required) A pointer resulting from arithmetic on a pointer operand shall address an element of the same array as that pointer operand" name="MISRAC2012-RULE_18_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.2 (Required) Subtraction between pointers shall only be applied to pointers that address elements of the same array" name="MISRAC2012-RULE_18_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.3 (Required) The relational operators >, >=, &lt; and &lt;= shall not be applied to objects of pointer type except where they point into the same object" name="MISRAC2012-RULE_18_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.4 (Advisory) The +, -, += and -= operators should not be applied to an expression of pointer type" name="MISRAC2012-RULE_18_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.5 (Advisory) Declarations should contain no more than two levels of pointer nesting" name="MISRAC2012-RULE_18_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.6 (Required) The address of an object with automatic storage shall not be copied to another object that persists after the first object has ceased to exist" name="MISRAC2012-RULE_18_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.7 (Required) Flexible array members shall not be declared" name="MISRAC2012-RULE_18_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 18.8 (Required) Variable-length array types shall not be used" name="MISRAC2012-RULE_18_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.2 (Required) Line-splicing shall not be used in // comments" name="MISRAC2012-RULE_3_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 3.1 (Required) The character sequences /* and // shall not be used within a comment" name="MISRAC2012-RULE_3_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.2 (Required) A &quot;u&quot; or &quot;U&quot; suffix shall be applied to all integer constants that are represented in an unsigned type" name="MISRAC2012-RULE_7_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.1 (Required) Operands shall not be of an inappropriate essential type" name="MISRAC2012-RULE_10_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.3 (Required) The lowercase character &quot;l&quot; shall not be used in a literal suffix" name="MISRAC2012-RULE_7_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.2 (Required) Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" name="MISRAC2012-RULE_10_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 10.3 (Required) The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category" name="MISRAC2012-RULE_10_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 7.1 (Required) Octal constants shall not be used" name="MISRAC2012-RULE_7_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.14 (Required) The Standard Library function memcmp shall not be used to compare null terminated strings" name="MISRAC2012-RULE_21_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.4 (Required) The standard header file &lt;setjmp.h> shall not be used" name="MISRAC2012-RULE_21_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.13 (Mandatory) Any value passed to a function in &lt;ctype.h> shall be representable as an unsigned char or be the value EOF" name="MISRAC2012-RULE_21_13" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.5 (Required) The standard header file &lt;signal.h> shall not be used" name="MISRAC2012-RULE_21_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.12 (Advisory) The exception handling features of &lt;fenv.h> should not be used" name="MISRAC2012-RULE_21_12" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.6 (Required) The Standard Library input/output functions shall not be used" name="MISRAC2012-RULE_21_6" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.11 (Required) The standard header file &lt;tgmath.h> shall not be used" name="MISRAC2012-RULE_21_11" rules="2" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_7" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.10 (Required) The Standard Library time and date functions shall not be used" name="MISRAC2012-RULE_21_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.8 (Required) The Standard Library termination functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_8" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.9 (Required) The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.19 (Mandatory) The pointers returned by the Standard Library functions localeconv, getenv, setlocale or, strerror shall only be used as if they have pointer to const-qualified type" name="MISRAC2012-RULE_21_19" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.18 (Mandatory) The size_t argument passed to any function in &lt;string.h> shall have an appropriate value" name="MISRAC2012-RULE_21_18" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.17 (Mandatory) Use of the string handling functions from &lt;string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters" name="MISRAC2012-RULE_21_17" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.16 (Required) The pointer arguments to the Standard Library function memcmp shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" name="MISRAC2012-RULE_21_16" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.15 (Required) The pointer arguments to the Standard Library functions memcpy, memmove and memcmp shall be pointers to qualified or unqualified versions of compatible types" name="MISRAC2012-RULE_21_15" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.1 (Required) #define and #undef shall not be used on a reserved identifier or reserved macro name" name="MISRAC2012-RULE_21_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.2 (Required) A reserved identifier or macro name shall not be declared" name="MISRAC2012-RULE_21_2" rules="3" total="0" />
               <Category authTot="2;" authUrg="0;" desc="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_3" rules="1" total="2" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.1 (Required) Initializer lists shall not contain persistent side effects" name="MISRAC2012-RULE_13_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.2 (Required) The value of an expression and its persistent side effects shall be the same under all permitted evaluation orders" name="MISRAC2012-RULE_13_2" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.3 (Advisory) A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" name="MISRAC2012-RULE_13_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.4 (Advisory) The result of an assignment operator should not be used" name="MISRAC2012-RULE_13_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.5 (Required) The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" name="MISRAC2012-RULE_13_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.1 (Required) The features of &lt;stdarg.h> shall not be used" name="MISRAC2012-RULE_17_1" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.21 (Required) The Standard Library function system of &lt;stdlib.h> shall not be used" name="MISRAC2012-RULE_21_21" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 13.6 (Required) The operand of the sizeof operator shall not contain any expression which has potential side effects" name="MISRAC2012-RULE_13_6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.2 (Required) Functions shall not call themselves, either directly or indirectly" name="MISRAC2012-RULE_17_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 21.20 (Mandatory) The pointer returned by the Standard Library functions asctime, ctime, gmtime, localtime, localeconv, getenv, setlocale or strerror shall not be used following a subsequent call to the same function" name="MISRAC2012-RULE_21_20" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.3 (Mandatory) A function shall not be declared implicitly" name="MISRAC2012-RULE_17_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.4 (Mandatory) All exit paths from a function with non-void return type shall have an explicit return statement with an expression" name="MISRAC2012-RULE_17_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.5 (Required) The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" name="MISRAC2012-RULE_17_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.6 (Mandatory) The declaration of an array parameter shall not contain the static keyword between the [ ]" name="MISRAC2012-RULE_17_6" rules="1" total="0" />
               <Category authTot="17;" authUrg="0;" desc="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used" name="MISRAC2012-RULE_17_7" rules="2" total="17" />
               <Category authTot="0;" authUrg="0;" desc="Rule 17.8 (Advisory) A function parameter should not be modified" name="MISRAC2012-RULE_17_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.3 (Advisory) A project should not contain unused type declarations" name="MISRAC2012-RULE_2_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.4 (Advisory) A project should not contain unused tag declarations" name="MISRAC2012-RULE_2_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.1 (Required) A project shall not contain unreachable code" name="MISRAC2012-RULE_2_1" rules="7" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.2 (Required) There shall be no dead code" name="MISRAC2012-RULE_2_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.7 (Advisory) There should be no unused parameters in functions" name="MISRAC2012-RULE_2_7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.5 (Advisory) A project should not contain unused macro definitions" name="MISRAC2012-RULE_2_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.1 (Required) Bit-fields shall only be declared with an appropriate type" name="MISRAC2012-RULE_6_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 2.6 (Advisory) A function should not contain unused label declarations" name="MISRAC2012-RULE_2_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 6.2 (Required) Single-bit named bit fields shall not be of a signed type" name="MISRAC2012-RULE_6_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.5 (Advisory) #undef should not be used" name="MISRAC2012-RULE_20_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.6 (Required) Tokens that look like a preprocessing directive shall not occur within a macro argument" name="MISRAC2012-RULE_20_6" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" name="MISRAC2012-RULE_20_7" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.8 (Required) The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" name="MISRAC2012-RULE_20_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.9 (Required) All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" name="MISRAC2012-RULE_20_9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.1 (Advisory) #include directives should only be preceded by preprocessor directives or comments" name="MISRAC2012-RULE_20_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.2 (Required) The ', &quot; or \ characters and the /* or // character sequences shall not occur in a header file name" name="MISRAC2012-RULE_20_2" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.3 (Required) The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" name="MISRAC2012-RULE_20_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 20.4 (Required) A macro shall not be defined with the same name as a keyword" name="MISRAC2012-RULE_20_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.2 (Required) The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" name="MISRAC2012-RULE_12_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.8 (Required) Identifiers that define objects or functions with external linkage shall be unique" name="MISRAC2012-RULE_5_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.4 (Required) An element of an object shall not be initialized more than once" name="MISRAC2012-RULE_9_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.3 (Advisory) The comma operator should not be used" name="MISRAC2012-RULE_12_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.9 (Advisory) Identifiers that define objects or functions with internal linkage should be unique" name="MISRAC2012-RULE_5_9" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.5 (Required) Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" name="MISRAC2012-RULE_9_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.4 (Advisory) Evaluation of constant expressions should not lead to unsigned integer wrap-around" name="MISRAC2012-RULE_12_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.6 (Required) A typedef name shall be a unique identifier" name="MISRAC2012-RULE_5_6" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.2 (Required) The initializer for an aggregate or union shall be enclosed in braces" name="MISRAC2012-RULE_9_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.5 (Mandatory) The sizeof operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" name="MISRAC2012-RULE_12_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.1 (Required) All switch statements shall be well-formed" name="MISRAC2012-RULE_16_1" rules="8" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.7 (Required) A tag name shall be a unique identifier" name="MISRAC2012-RULE_5_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.3 (Required) Arrays shall not be partially initialized" name="MISRAC2012-RULE_9_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.2 (Required) A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" name="MISRAC2012-RULE_16_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.3 (Required) An unconditional break statement shall terminate every switch-clause" name="MISRAC2012-RULE_16_3" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 22.10 (Required) The value of errno shall only be tested when the last function to be called was an errno-setting-function" name="MISRAC2012-RULE_22_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.4 (Required) Every switch statement shall have a default label" name="MISRAC2012-RULE_16_4" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.5 (Required) A default label shall appear as either the first or the last switch label of a switch statement" name="MISRAC2012-RULE_16_5" rules="1" total="0" />
               <Category authTot="8;" authUrg="0;" desc="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable" name="MISRAC2012-DIR_4_9" rules="1" total="8" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.6 (Required) Every switch statement shall have at least two switch-clauses" name="MISRAC2012-RULE_16_6" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.8 (Advisory) If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" name="MISRAC2012-DIR_4_8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 16.7 (Required) A switch-expression shall not have essentially Boolean type" name="MISRAC2012-RULE_16_7" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.5 (Advisory) Identifiers in the same name space with overlapping visibility should be typographically unambiguous" name="MISRAC2012-DIR_4_5" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.4 (Advisory) Sections of code should not be &quot;commented out&quot;" name="MISRAC2012-DIR_4_4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.7 (Required) If a function returns error information, then that error information shall be tested" name="MISRAC2012-DIR_4_7" rules="2" total="0" />
               <Category authTot="15;" authUrg="0;" desc="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types" name="MISRAC2012-DIR_4_6" rules="3" total="15" />
               <Category authTot="1;" authUrg="0;" desc="Dir 4.1 (Required) Run-time failures shall be minimized" name="MISRAC2012-DIR_4_1" rules="11" total="1" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.12 (Required) Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" name="MISRAC2012-RULE_8_12" rules="1" total="0" />
               <Category authTot="3;" authUrg="0;" desc="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible" name="MISRAC2012-RULE_8_13" rules="2" total="3" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.3 (Required) Assembly language shall be encapsulated and isolated" name="MISRAC2012-DIR_4_3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.14 (Required) The restrict type qualifier shall not be used" name="MISRAC2012-RULE_8_14" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Dir 4.2 (Advisory) All usage of assembly language should be documented" name="MISRAC2012-DIR_4_2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.1 (Required) The program shall contain no violations of the standard C syntax and constraints, and shall not exceed the implementation's translation limits" name="MISRAC2012-RULE_1_1" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.10 (Required) An inline function shall be declared with the static storage class" name="MISRAC2012-RULE_8_10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 8.11 (Advisory) When an array with external linkage is declared, its size should be explicitly specified" name="MISRAC2012-RULE_8_11" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.4 (Required) Emergent language features shall not be used" name="MISRAC2012-RULE_1_4" rules="14" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.1 (Required) External identifiers shall be distinct" name="MISRAC2012-RULE_5_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 1.3 (Required) There shall be no occurrence of undefined or critical unspecified behaviour" name="MISRAC2012-RULE_1_3" rules="15" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.4 (Required) Macro identifiers shall be distinct" name="MISRAC2012-RULE_5_4" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.5 (Required) Identifiers shall be distinct from macro names" name="MISRAC2012-RULE_5_5" rules="2" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 9.1 (Mandatory) The value of an object with automatic storage duration shall not be read before it has been set" name="MISRAC2012-RULE_9_1" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.2 (Required) Identifiers declared in the same scope and name space shall be distinct" name="MISRAC2012-RULE_5_2" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 12.1 (Advisory) The precedence of operators within expressions should be made explicit" name="MISRAC2012-RULE_12_1" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="Rule 5.3 (Required) An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" name="MISRAC2012-RULE_5_3" rules="2" total="0" />
            </Category>
            <Category authTot="5;" authUrg="0;" desc="Memory and Resource Management" name="MRM" rules="60" total="5" />
            <Category authTot="47;" authUrg="1;" desc="Naming Conventions" name="NAMING" rules="98" total="47">
               <Category authTot="33;" authUrg="0;" desc="Hungarian Notation" name="NAMING-HN" rules="44" total="33" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="Object Oriented" name="OOP" rules="61" total="0" />
            <Category authTot="9;" authUrg="0;" desc="Optimization" name="OPT" rules="43" total="9" />
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2017)" name="OWASP2017" rules="16" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Sensitive Data Exposure" name="OWASP2017-A3" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Broken Authentication" name="OWASP2017-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Injection" name="OWASP2017-A1" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A10 Insufficient Logging&amp;Monitoring" name="OWASP2017-A10" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A6 Security Misconfiguration" name="OWASP2017-A6" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Broken Access Control" name="OWASP2017-A5" rules="3" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 XML External Entities (XXE)" name="OWASP2017-A4" rules="1" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP API Security Top 10 (2019)" name="OWASP2019" rules="42" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP API2 Broken User Authentication" name="OWASP2019-API2" rules="1" total="0" />
               <Category authTot="2;" authUrg="0;" desc="OWASP API4 Lack of Resources &amp; Rate Limiting" name="OWASP2019-API4" rules="2" total="2" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API3 Excessive Data Exposure" name="OWASP2019-API3" rules="17" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API10 Insufficient Logging &amp; Monitoring" name="OWASP2019-API10" rules="2" total="0" />
               <Category authTot="17;" authUrg="1;" desc="OWASP API9 Improper Assets Management" name="OWASP2019-API9" rules="7" total="17" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API8 Injection" name="OWASP2019-API8" rules="10" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP API7 Security Misconfiguration" name="OWASP2019-API7" rules="3" total="0" />
            </Category>
            <Category authTot="0;" authUrg="0;" desc="OWASP Top 10 Most Critical Web Application Security Risks (2021)" name="OWASP2021" rules="18" total="0">
               <Category authTot="0;" authUrg="0;" desc="OWASP A8 Software and Data Integrity Failures" name="OWASP2021-A8" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A7 Identification and Authentication Failures" name="OWASP2021-A7" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A5 Security Misconfiguration" name="OWASP2021-A5" rules="4" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A9 Security Logging and Monitoring Failures" name="OWASP2021-A9" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A4 Insecure Design" name="OWASP2021-A4" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A3 Injection" name="OWASP2021-A3" rules="6" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A2 Cryptographic Failures" name="OWASP2021-A2" rules="1" total="0" />
               <Category authTot="0;" authUrg="0;" desc="OWASP A1 Broken Access Control" name="OWASP2021-A1" rules="3" total="0" />
            </Category>
            <Category authTot="1;" authUrg="0;" desc="Parser diagnostics" name="PARSER" rules="2" total="1" />
            <Category authTot="7;" authUrg="0;" desc="Possible Bugs" name="PB" rules="85" total="7" />
            <Category authTot="4;" authUrg="0;" desc="Physical File Organization" name="PFO" rules="10" total="4" />
            <Category authTot="9;" authUrg="0;" desc="Portability" name="PORT" rules="39" total="9" />
            <Category authTot="64;" authUrg="0;" desc="Preprocessor" name="PREPROC" rules="29" total="64" />
            <Category authTot="0;" authUrg="0;" desc="Qt Best Practices" name="QT" rules="18" total="0" />
            <Category authTot="12;" authUrg="0;" desc="Security" name="SECURITY" rules="54" total="12" />
            <Category authTot="3;" authUrg="0;" desc="STL Best Practices" name="STL" rules="42" total="3" />
            <Category authTot="0;" authUrg="0;" desc="Template" name="TEMPL" rules="18" total="0" />
         </CategoriesList>
         <RulesList>
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000160" desc="Do not use weak encryption functions" id="APSC_DV-000160-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000170" desc="Do not use weak encryption functions" id="APSC_DV-000170-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-000480" desc="Protect against SQL injection" id="APSC_DV-000480-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000500" desc="Observe correct revocation order while relinquishing privileges" id="APSC_DV-000500-a" origId="SECURITY-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-000650" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-000650-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Protect against SQL injection" id="APSC_DV-001290-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-001290" desc="Untrusted data is used as a loop boundary" id="APSC_DV-001290-b" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid passing user input into methods as parameters" id="APSC_DV-001290-c" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001290" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="APSC_DV-001290-d" origId="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001300" desc="Protect against SQL injection" id="APSC_DV-001300-a" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001740" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001740-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001750" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001750-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001850" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-001850-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001860" desc="Do not use weak encryption functions" id="APSC_DV-001860-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions when using fork and file descriptors" id="APSC_DV-001995-a" origId="BD-TRS-FORKFILE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while checking for the existence of a symbolic link" id="APSC_DV-001995-b" origId="BD-TRS-SYMLINK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid race conditions while accessing files" id="APSC_DV-001995-c" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Use locks to prevent race conditions when modifying bit fields" id="APSC_DV-001995-d" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Do not use global variable with different locks set" id="APSC_DV-001995-e" origId="BD-TRS-MLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using thread-unsafe functions" id="APSC_DV-001995-f" origId="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Usage of functions prone to race is not allowed" id="APSC_DV-001995-g" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Avoid using the 'vfork()' function" id="APSC_DV-001995-h" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-001995" desc="Properly define signal handlers" id="APSC_DV-001995-i" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="APSC_DV-002000" desc="Ensure resources are freed" id="APSC_DV-002000-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002010" desc="Do not use weak encryption functions" id="APSC_DV-002010-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Do not use the rand() function for generating pseudorandom numbers" id="APSC_DV-002290-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Properly seed pseudorandom number generators" id="APSC_DV-002290-b" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="The 'random_shuffle' identifier should not be used" id="APSC_DV-002290-c" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002290" desc="Avoid functions which use random numbers from standard C library" id="APSC_DV-002290-d" origId="SECURITY-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002350" desc="Do not use weak encryption functions" id="APSC_DV-002350-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="APSC_DV-002390-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not process structured text data natively" id="APSC_DV-002390-b" origId="CODSTA-201" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="APSC_DV-002390-c" origId="SECURITY-14" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002390" desc="Do not use mbstowcs() function" id="APSC_DV-002390-d" origId="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002400-a" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="APSC_DV-002400-b" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using the 'vfork()' function" id="APSC_DV-002400-c" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002400" desc="Avoid using thread-unsafe functions" id="APSC_DV-002400-d" origId="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002440" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002440-a" origId="BD-SECURITY-SENSLOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002460" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002460-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002470" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002470-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002480" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002480-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002510" desc="Protect against command injection" id="APSC_DV-002510-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against environment injection" id="APSC_DV-002520-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against file name injection" id="APSC_DV-002520-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against SQL injection" id="APSC_DV-002520-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002520-d" origId="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid tainted data in array indexes" id="APSC_DV-002520-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002520-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002520-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Protect against command injection" id="APSC_DV-002520-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Avoid printing tainted data on the output console" id="APSC_DV-002520-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002520" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002520-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002520" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002520-k" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against environment injection" id="APSC_DV-002530-a" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against file name injection" id="APSC_DV-002530-b" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against SQL injection" id="APSC_DV-002530-c" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002530-d" origId="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid tainted data in array indexes" id="APSC_DV-002530-e" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002530-f" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002530-g" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Protect against command injection" id="APSC_DV-002530-h" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Avoid printing tainted data on the output console" id="APSC_DV-002530-i" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002530" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002530-j" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002530" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002530-k" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002540" desc="Protect against SQL injection" id="APSC_DV-002540-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against environment injection" id="APSC_DV-002550-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against file name injection" id="APSC_DV-002550-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against SQL injection" id="APSC_DV-002550-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002550-d" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid tainted data in array indexes" id="APSC_DV-002550-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002550-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002550-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Protect against command injection" id="APSC_DV-002550-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Avoid printing tainted data on the output console" id="APSC_DV-002550-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002550" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002550-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002550" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002550-k" origId="SECURITY-38" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against environment injection" id="APSC_DV-002560-a" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against file name injection" id="APSC_DV-002560-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against SQL injection" id="APSC_DV-002560-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Never use unfiltered data from an untrusted user as the format parameter" id="APSC_DV-002560-d" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid tainted data in array indexes" id="APSC_DV-002560-e" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002560-f" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-002560-g" origId="BD-SECURITY-LOG" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Protect against command injection" id="APSC_DV-002560-h" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Avoid printing tainted data on the output console" id="APSC_DV-002560-i" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002560" desc="Exclude unsanitized user input from format strings" id="APSC_DV-002560-j" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="APSC_DV-002560" desc="Untrusted data is used as a loop boundary" id="APSC_DV-002560-k" origId="SECURITY-38" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-002570-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="APSC_DV-002570" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="APSC_DV-002570-b" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow due to defining incorrect format limits" id="APSC_DV-002590-a" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow due to reading a not zero terminated string" id="APSC_DV-002590-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when reading from a buffer" id="APSC_DV-002590-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid overflow when writing to a buffer" id="APSC_DV-002590-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid integer overflows" id="APSC_DV-002590-e" origId="BD-PB-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Prevent buffer overflows from tainted data" id="APSC_DV-002590-f" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Protect against integer overflow/underflow from tainted data" id="APSC_DV-002590-g" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="APSC_DV-002590-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer read overflow from tainted data" id="APSC_DV-002590-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Avoid buffer write overflow from tainted data" id="APSC_DV-002590-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-002590" desc="Ensure the output buffer is large enough when using path manipulation functions" id="APSC_DV-002590-k" origId="BD-PB-PATHBUF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="APSC_DV-003110" desc="Do not hard code string literals" id="APSC_DV-003110-a" origId="CODSTA-203" sev="1" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing unvalidated binary data to log methods" id="APSC_DV-003235-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="APSC_DV-003235" desc="Avoid passing sensitive data to functions that write to log files" id="APSC_DV-003235-b" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_1" desc="Avoid unused values" id="AUTOSAR-A0_1_1-a" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="AUTOSAR-A0_1_2" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="AUTOSAR-A0_1_2-a" origId="CODSTA-CPP-58" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_3" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-A0_1_3-a" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A0_1_4" desc="Eliminate unused parameters" id="AUTOSAR-A0_1_4-a" origId="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_5" desc="There shall be no unused named parameters in virtual functions" id="AUTOSAR-A0_1_5-a" origId="OPT-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_1_6" desc="A project shall not contain unused type declarations" id="AUTOSAR-A0_1_6-a" origId="GLOBAL-UNUSEDTYPE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_2" desc="Type long double shall not be used" id="AUTOSAR-A0_4_2-a" origId="PORT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A0_4_4" desc="Validate values passed to library functions" id="AUTOSAR-A0_4_4-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_1_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="AUTOSAR-A10_1_1-a" origId="OOP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Never redefine an inherited nonvirtual function" id="AUTOSAR-A10_2_1-a" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_2_1" desc="Member functions declared in derived class should not hide functions declared in base classes" id="AUTOSAR-A10_2_1-b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_1" desc="Only one of virtual, override or final should be specified in a member function declaration" id="AUTOSAR-A10_3_1-a" origId="CODSTA-MCPP-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_2" desc="Each overriding virtual function shall be declared with the override or final specifier" id="AUTOSAR-A10_3_2-a" origId="CODSTA-MCPP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_3" desc="Do not introduce virtual functions in a final class" id="AUTOSAR-A10_3_3-a" origId="CODSTA-MCPP-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_3_5" desc="A user-defined assignment operator shall not be virtual" id="AUTOSAR-A10_3_5-a" origId="OOP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A10_4_1" desc="Hierarchies should be based on abstract classes" id="AUTOSAR-A10_4_1-a" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_1" desc="A non-POD type should be defined as class" id="AUTOSAR-A11_0_1-a" origId="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_0_2" desc="Structs should only contain public data members and should not be a base or inherit" id="AUTOSAR-A11_0_2-a" origId="OOP-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A11_3_1" desc="Friend declarations shall not be used except declarations of comparison operators" id="AUTOSAR-A11_3_1-a" origId="OOP-11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_1" desc="Copy and destroy consistently" id="AUTOSAR-A12_0_1-a" origId="MRM-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_0_2" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="AUTOSAR-A12_0_2-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="AUTOSAR-A12_1_1-a" origId="PB-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_1" desc="All member variables should be initialized in constructor" id="AUTOSAR-A12_1_1-b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_2" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="AUTOSAR-A12_1_2-a" origId="HICPP-12_4_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_3" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="AUTOSAR-A12_1_3-a" origId="INIT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_4" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="AUTOSAR-A12_1_4-a" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_5" desc="Use delegating constructors to reduce code duplication" id="AUTOSAR-A12_1_5-a" origId="CODSTA-CPP-106" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_1_6" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="AUTOSAR-A12_1_6-a" origId="CODSTA-MCPP-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_4_1" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="AUTOSAR-A12_4_1-a" origId="OOP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A12_4_2" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="AUTOSAR-A12_4_2-a" origId="CODSTA-MCPP-23" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_6_1" desc="Prefer initialization to assignment in constructors" id="AUTOSAR-A12_6_1-a" origId="INIT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_7_1" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="AUTOSAR-A12_7_1-a" origId="CODSTA-CPP-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_1" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="AUTOSAR-A12_8_1-a" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_2" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="AUTOSAR-A12_8_2-a" origId="CODSTA-MCPP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_3" desc="Do not rely on the value of a moved-from object" id="AUTOSAR-A12_8_3-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_4" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A12_8_4-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_5" desc="Check for assignment to self in operator=" id="AUTOSAR-A12_8_5-a" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_6" desc="Avoid public copy constructors and assignment operators in base classes" id="AUTOSAR-A12_8_6-a" origId="OOP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A12_8_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="AUTOSAR-A12_8_7-a" origId="CODSTA-MCPP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_2" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="AUTOSAR-A13_1_2-a" origId="NAMING-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_1_3" desc="User defined literals operators shall only perform conversion of passed parameters" id="AUTOSAR-A13_1_3-a" origId="CODSTA-MCPP-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_1" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="AUTOSAR-A13_2_1-a" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="AUTOSAR-A13_2_2-a" origId="CODSTA-CPP-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_2_3" desc="A relational operator shall return a boolean value" id="AUTOSAR-A13_2_3-a" origId="CODSTA-CPP-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_3_1" desc="Avoid Overloading on Forwarding References" id="AUTOSAR-A13_3_1-a" origId="CODSTA-MCPP-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_1" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="AUTOSAR-A13_5_1-a" origId="HICPP-13_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_2" desc="User-conversion cast operators should be made explicit" id="AUTOSAR-A13_5_2-a" origId="CODSTA-MCPP-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_3" desc="Do not use user-defined conversion functions" id="AUTOSAR-A13_5_3-a" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_4" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="AUTOSAR-A13_5_4-b" origId="CODSTA-CPP-86" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions" id="AUTOSAR-A13_5_5-a" origId="CODSTA-CPP-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_5_5" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="AUTOSAR-A13_5_5-b" origId="CODSTA-CPP-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A13_6_1" desc="Digit sequences separators ' shall only be used consistently" id="AUTOSAR-A13_6_1-a" origId="CODSTA-MCPP-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_1" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="AUTOSAR-A14_5_1-a" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_5_3" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="AUTOSAR-A14_5_3-a" origId="TEMPL-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_7_2" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="AUTOSAR-A14_7_2-a" origId="TEMPL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A14_8_2" desc="Overloaded function templates shall not be explicitly specialized" id="AUTOSAR-A14_8_2-a" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_0_2" desc="Ensure resources are freed" id="AUTOSAR-A15_0_2-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_1" desc="Only use instances of std::exception for exceptions" id="AUTOSAR-A15_1_1-a" origId="HICPP-15_1_1-a" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_2" desc="An exception object should not have pointer type" id="AUTOSAR-A15_1_2-a" origId="EXCEPT-09" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_1_4" desc="Ensure resources are freed" id="AUTOSAR-A15_1_4-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_1_5" desc="Do not throw an exception across execution boundaries" id="AUTOSAR-A15_1_5-a" origId="PORT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_2_1-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_2_1" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_2_1-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_2" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_3_2-a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_3_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_3_3-a" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_4" desc="Avoid using catch-all exception handlers" id="AUTOSAR-A15_3_4-a" origId="EXCEPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_3_5" desc="A class type exception shall always be caught by reference" id="AUTOSAR-A15_3_5-a" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_1" desc="Do not use throw exception specifications" id="AUTOSAR-A15_4_1-a" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="AUTOSAR-A15_4_2-a" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_3" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="AUTOSAR-A15_4_3-a" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A15_4_4" desc="Declare functions 'noexcept' if they will not emit exceptions" id="AUTOSAR-A15_4_4-a" origId="CODSTA-MCPP-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_4_5" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="AUTOSAR-A15_4_5-a" origId="EXCEPT-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_1-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_1" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="AUTOSAR-A15_5_1-b" origId="EXCEPT-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_2-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-b" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_2" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-A15_5_2-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="AUTOSAR-A15_5_3-a" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="AUTOSAR-A15_5_3-b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Do not throw from within destructor" id="AUTOSAR-A15_5_3-c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="AUTOSAR-A15_5_3-d" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-A15_5_3-e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-A15_5_3-f" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-A15_5_3-g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="AUTOSAR-A15_5_3-h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-A15_5_3-i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Always catch exceptions" id="AUTOSAR-A15_5_3-j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A15_5_3" desc="Properly define exit handlers" id="AUTOSAR-A15_5_3-k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="AUTOSAR-A16_0_1-a" origId="PREPROC-26" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#error directive shall not be used" id="AUTOSAR-A16_0_1-b" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_0_1-c" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="Avoid using macro definitions" id="AUTOSAR-A16_0_1-d" origId="PREPROC-01" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_0_1" desc="#undef shall not be used" id="AUTOSAR-A16_0_1-e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_1" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="AUTOSAR-A16_2_1-a" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_2_2" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="AUTOSAR-A16_2_2-a" origId="OPT-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_6_1" desc="#error directive shall not be used" id="AUTOSAR-A16_6_1-a" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A16_7_1" desc="The #pragma directive shall not be used" id="AUTOSAR-A16_7_1-a" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define nor #undef identifier 'defined'" id="AUTOSAR-A17_0_1-a" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="AUTOSAR-A17_0_1-b" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="AUTOSAR-A17_0_1-c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not redefine reserved words" id="AUTOSAR-A17_0_1-d" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_0_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="AUTOSAR-A17_0_1-e" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_1_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-A17_1_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A17_6_1" desc="Do not modify the standard namespaces 'std' and 'posix'" id="AUTOSAR-A17_6_1-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_1" desc="The C library shall not be used" id="AUTOSAR-A18_0_1-a" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_0_2" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="AUTOSAR-A18_0_2-b" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not include &lt;locale.h> header" id="AUTOSAR-A18_0_3-a" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_0_3" desc="Do not use 'setlocale' function" id="AUTOSAR-A18_0_3-b" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_1_1" desc="C-style arrays shall not be used" id="AUTOSAR-A18_1_1-a" origId="STL-37" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_2" desc="Avoid using vector&lt;bool>" id="AUTOSAR-A18_1_2-a" origId="STL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_3" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A18_1_3-a" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_4" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="AUTOSAR-A18_1_4-a" origId="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_1_6" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="AUTOSAR-A18_1_6-a" origId="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_1" desc="Do not use calloc, malloc, realloc and free functions" id="AUTOSAR-A18_5_1-a" origId="MRM-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="AUTOSAR-A18_5_10-a" origId="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_10" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="AUTOSAR-A18_5_10-b" origId="MRM-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete if you write operator new" id="AUTOSAR-A18_5_11-a" origId="MRM-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_11" desc="Write operator delete[] if you write operator new[]" id="AUTOSAR-A18_5_11-b" origId="MRM-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A18_5_2" desc="Dynamic heap memory allocation shall not be used" id="AUTOSAR-A18_5_2-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="AUTOSAR-A18_5_3-a" origId="MRM-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="AUTOSAR-A18_5_3-b" origId="MRM-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_3" desc="Properly deallocate dynamically allocated resources" id="AUTOSAR-A18_5_3-c" origId="BD-RES-BADDEALLOC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_4" desc="Define both sized and unsized versions of operator delete" id="AUTOSAR-A18_5_4-a" origId="CODSTA-MCPP-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="AUTOSAR-A18_5_5-a" origId="MRM-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Freed memory shouldn't be accessed under any circumstances" id="AUTOSAR-A18_5_5-b" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_5" desc="Properly define new handlers" id="AUTOSAR-A18_5_5-c" origId="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_8" desc="Use allocation by declaration rather than by new or malloc" id="AUTOSAR-A18_5_8-a" origId="MRM-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_5_9" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="AUTOSAR-A18_5_9-a" origId="MRM-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A18_9_1-a" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_2" desc="The 'std::forward' function shall be used to forward universal references" id="AUTOSAR-A18_9_2-a" origId="CODSTA-MCPP-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_3" desc="Do not use std::move on objects declared with the const or const &amp; type" id="AUTOSAR-A18_9_3-a" origId="CODSTA-MCPP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A18_9_4" desc="Do not subsequently use the argument to std::forward" id="AUTOSAR-A18_9_4-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A1_1_1-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="AUTOSAR-A1_1_1-b" origId="MRM-40_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="AUTOSAR-A1_1_1-c" origId="MRM-40_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The C library shall not be used" id="AUTOSAR-A1_1_1-d" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="AUTOSAR-A1_1_1-e" origId="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="AUTOSAR-A1_1_1-f" origId="CODSTA-MCPP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="AUTOSAR-A1_1_1-g" origId="CODSTA-MCPP-16_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'random_shuffle' identifier should not be used" id="AUTOSAR-A1_1_1-h" origId="CODSTA-MCPP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="AUTOSAR-A1_1_1-i" origId="CODSTA-MCPP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="The 'set_unexpected' identifier should not be used" id="AUTOSAR-A1_1_1-j" origId="CODSTA-MCPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A1_1_1" desc="Do not use throw exception specifications" id="AUTOSAR-A1_1_1-k" origId="EXCEPT-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_1" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="AUTOSAR-A20_8_1-a" origId="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_2" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_2-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_3" desc="Use smart pointers when passing a pointer to an object in a thread" id="AUTOSAR-A20_8_3-a" origId="CODSTA-MCPP-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_4" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="AUTOSAR-A20_8_4-a" origId="CODSTA-MCPP-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_5" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="AUTOSAR-A20_8_5-a" origId="CODSTA-MCPP-16_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_6" desc="Prefer 'std::make_shared' to the direct use of new" id="AUTOSAR-A20_8_6-a" origId="CODSTA-MCPP-16_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A20_8_7" desc="Avoid cyclic shared_ptr references" id="AUTOSAR-A20_8_7-a" origId="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A21_8_1" desc="Do not pass incorrect values to ctype.h library functions" id="AUTOSAR-A21_8_1-a" origId="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="AUTOSAR-A23_0_1-a" origId="CODSTA-MCPP-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Do not modify container while iterating over it" id="AUTOSAR-A23_0_2-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A23_0_2" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="AUTOSAR-A23_0_2-b" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_1_1" desc="Make predicates const pure functions" id="AUTOSAR-A25_1_1-a" origId="STL-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A25_4_1" desc="For associative containers never use comparison function returning true for equal values" id="AUTOSAR-A25_4_1-a" origId="STL-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_1" desc="Do not use the rand() function for generating pseudorandom numbers" id="AUTOSAR-A26_5_1-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A26_5_2" desc="Properly seed pseudorandom number generators" id="AUTOSAR-A26_5_2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="AUTOSAR-A27_0_1-a" origId="SECURITY-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid tainted data in array indexes" id="AUTOSAR-A27_0_1-b" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_1-c" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="AUTOSAR-A27_0_1-d" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer read overflow from tainted data" id="AUTOSAR-A27_0_1-e" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_1-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Protect against command injection" id="AUTOSAR-A27_0_1-g" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_1" desc="Exclude unsanitized user input from format strings" id="AUTOSAR-A27_0_1-h" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-A27_0_2-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-A27_0_2-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_2-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Prevent buffer overflows from tainted data" id="AUTOSAR-A27_0_2-e" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_2" desc="Avoid buffer write overflow from tainted data" id="AUTOSAR-A27_0_2-f" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_3" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="AUTOSAR-A27_0_3-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="AUTOSAR-A27_0_4-a" origId="SECURITY-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Avoid using unsafe string functions that do not check bounds" id="AUTOSAR-A27_0_4-b" origId="SECURITY-13" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="AUTOSAR-A27_0_4-c" origId="SECURITY-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-A27_0_4" desc="C-style strings shall not be used" id="AUTOSAR-A27_0_4-d" origId="PB-76" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="AUTOSAR-A2_10_1-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="AUTOSAR-A2_10_1-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="AUTOSAR-A2_10_1-c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="AUTOSAR-A2_10_1-d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="AUTOSAR-A2_10_1-e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="AUTOSAR-A2_10_4-a" origId="GLOBAL-REUSEDQUALGLOBVAR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_4" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="AUTOSAR-A2_10_4-b" origId="GLOBAL-REUSEDQUALSTATFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_5" desc="No object or function identifier with static storage duration should be reused" id="AUTOSAR-A2_10_5-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-a" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_10_6" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="AUTOSAR-A2_10_6-c" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_11_1" desc="Do not use the volatile keyword" id="AUTOSAR-A2_11_1-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_1" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="AUTOSAR-A2_13_1-a" origId="CODSTA-CPP-60_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_2" desc="String literals with different encoding prefixes shall not be concatenated" id="AUTOSAR-A2_13_2-a" origId="PB-38_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_3" desc="Type wchar_t shall not be used" id="AUTOSAR-A2_13_3-a" origId="PORT-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_4" desc="A string literal shall not be modified" id="AUTOSAR-A2_13_4-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_5" desc="Hexadecimal constants will be represented using all uppercase letters" id="AUTOSAR-A2_13_5-a" origId="CODSTA-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_13_6" desc="Universal character names shall be used only inside character or string literals" id="AUTOSAR-A2_13_6-a" origId="NAMING-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_3_1" desc="Only use characters defined in ISO C standard" id="AUTOSAR-A2_3_1-a" origId="MISRA-005" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-a" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_1" desc="Trigraphs shall not be used" id="AUTOSAR-A2_5_1-b" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_5_2" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="AUTOSAR-A2_5_2-a" origId="CODSTA-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_1" desc="Line-splicing shall not be used in // comments" id="AUTOSAR-A2_7_1-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_7_2" desc="Sections of code should not be &quot;commented out&quot;" id="AUTOSAR-A2_7_2-a" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="1;" cat="AUTOSAR-A2_7_3" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="AUTOSAR-A2_7_3-a" origId="COMMENT-14" sev="2" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="2;" cat="AUTOSAR-A2_7_3" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="AUTOSAR-A2_7_3-b" origId="COMMENT-14_b" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A2_8_1" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="AUTOSAR-A2_8_1-a" origId="NAMING-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_1_1-a" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_2" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="AUTOSAR-A3_1_2-a" origId="NAMING-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_3" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="AUTOSAR-A3_1_3-a" origId="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_4" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="AUTOSAR-A3_1_4-a" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_5" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="AUTOSAR-A3_1_5-a" origId="CODSTA-CPP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_1_6" desc="Trivial accessor and mutator functions should be inlined" id="AUTOSAR-A3_1_6-a" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="AUTOSAR-A3_3_1" desc="Objects or functions with external linkage shall be declared in a header file" id="AUTOSAR-A3_3_1-a" origId="MISRA-023" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_3_1" desc="Don't define entities with linkage in a header file" id="AUTOSAR-A3_3_1-b" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-A3_3_2" desc="Static and thread-local objects shall be constant-initialized" id="AUTOSAR-A3_3_2-a" origId="CODSTA-MCPP-32" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not use resources that have been freed" id="AUTOSAR-A3_8_1-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-A3_8_1-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-A3_8_1-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A3_8_1" desc="Do not point to a wrapped object that has been freed" id="AUTOSAR-A3_8_1-d" origId="BD-PB-WRAPESC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="AUTOSAR-A3_9_1" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="AUTOSAR-A3_9_1-b" origId="CODSTA-223" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-A4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="AUTOSAR-A4_10_1" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="AUTOSAR-A4_10_1-b" origId="CODSTA-MCPP-04" sev="2" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_5_1" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="AUTOSAR-A4_5_1-a" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from signed to unsigned type" id="AUTOSAR-A4_7_1-a" origId="PB-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid conversions of constant values to a narrower type" id="AUTOSAR-A4_7_1-c" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-d" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-A4_7_1-e" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-A4_7_1-f" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="AUTOSAR-A4_7_1-g" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A4_7_1" desc="Avoid integer overflows" id="AUTOSAR-A4_7_1-h" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function calls" id="AUTOSAR-A5_0_1-a" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Do not use more than one volatile between two adjacent sequence points" id="AUTOSAR-A5_0_1-b" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="AUTOSAR-A5_0_1-c" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="AUTOSAR-A5_0_1-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="AUTOSAR-A5_0_1-e" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="Don't write code that depends on the order of evaluation of function arguments" id="AUTOSAR-A5_0_1-f" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_1" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="AUTOSAR-A5_0_1-g" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_2" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="AUTOSAR-A5_0_2-a" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_3" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="AUTOSAR-A5_0_3-a" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Don't treat arrays polymorphically" id="AUTOSAR-A5_0_4-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="AUTOSAR-A5_0_4-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_0_4" desc="Do not treat arrays polymorphically" id="AUTOSAR-A5_0_4-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_10_1" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="AUTOSAR-A5_10_1-a" origId="CODSTA-MCPP-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_16_1" desc="The conditional operator should not be used as a sub-expression" id="AUTOSAR-A5_16_1-a" origId="CODSTA-224" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A5_1_1" desc="Avoid magic numbers" id="AUTOSAR-A5_1_1-a" origId="CODSTA-26" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_2" desc="Avoid default capture modes" id="AUTOSAR-A5_1_2-a" origId="CODSTA-MCPP-15_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_3" desc="Include a parameter list in every lambda expression" id="AUTOSAR-A5_1_3-a" origId="CODSTA-MCPP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never return lambdas that capture local objects by reference" id="AUTOSAR-A5_1_4-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="Never capture local objects from an outer lambda by reference" id="AUTOSAR-A5_1_4-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_4" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="AUTOSAR-A5_1_4-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_6" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="AUTOSAR-A5_1_6-a" origId="CODSTA-MCPP-45" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_7" desc="A lambda shall not be an operand to typeid" id="AUTOSAR-A5_1_7-a" origId="CODSTA-MCPP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_1_8" desc="Lambda expressions should not be defined inside another lambda expression" id="AUTOSAR-A5_1_8-a" origId="CODSTA-MCPP-44" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_1" desc="Avoid dynamic_casts" id="AUTOSAR-A5_2_1-a" origId="CODSTA-CPP-35" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A5_2_2" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="AUTOSAR-A5_2_2-a" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_3" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="AUTOSAR-A5_2_3-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_4" desc="Avoid using reinterpret_cast" id="AUTOSAR-A5_2_4-a" origId="CODSTA-CPP-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-A5_2_5-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid accessing arrays and pointers out of bounds" id="AUTOSAR-A5_2_5-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-A5_2_5-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_5" desc="Avoid tainted data in array indexes" id="AUTOSAR-A5_2_5-d" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_2_6" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="AUTOSAR-A5_2_6-a" origId="CODSTA-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="AUTOSAR-A5_3_1-a" origId="CODSTA-CPP-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_1" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="AUTOSAR-A5_3_1-b" origId="CODSTA-CPP-104_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-A5_3_2" desc="Avoid null pointer dereferencing" id="AUTOSAR-A5_3_2-a" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_3_3" desc="Do not delete objects with incomplete class at the point of deletion" id="AUTOSAR-A5_3_3-a" origId="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_5_1" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-A5_5_1-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A5_6_1" desc="Avoid division by zero" id="AUTOSAR-A5_6_1-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Copy assignment operators should not have side effects that could affect copying the object" id="AUTOSAR-A6_2_1-a" origId="MRM-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_1" desc="Move assignment operators should not have side effects that could affect moving the object" id="AUTOSAR-A6_2_1-b" origId="MRM-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_2_2" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="AUTOSAR-A6_2_2-a" origId="PB-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_4_1" desc="Every switch statement will have at least two cases and a potential default" id="AUTOSAR-A6_4_1-a" origId="CODSTA-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="AUTOSAR-A6_5_1-a" origId="CODSTA-MCPP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_2" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="AUTOSAR-A6_5_2-a" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_3" desc="Prefer while statements over do statements" id="AUTOSAR-A6_5_3-a" origId="CODSTA-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="AUTOSAR-A6_5_4-a" origId="CODSTA-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_5_4" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="AUTOSAR-A6_5_4-b" origId="CODSTA-53" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A6_6_1" desc="The goto statement shall not be used" id="AUTOSAR-A6_6_1-a" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-A7_1_1" desc="Declare parameters or local variable as const whenever possible" id="AUTOSAR-A7_1_1-a" origId="CODSTA-CPP-53" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare const variables whenever possible" id="AUTOSAR-A7_1_2-a" origId="CODSTA-MCPP-11_a_cpp11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-A7_1_2" desc="Use constexpr to declare functions whenever possible" id="AUTOSAR-A7_1_2-b" origId="CODSTA-MCPP-11_b_cpp11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_3" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="AUTOSAR-A7_1_3-a" origId="FORMAT-47_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_4" desc="The 'register' storage class specifier shall not be used" id="AUTOSAR-A7_1_4-a" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_5" desc="Do not overuse 'auto' specifier" id="AUTOSAR-A7_1_5-a" origId="CODSTA-MCPP-40" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_6" desc="Prefer alias declarations to typedefs" id="AUTOSAR-A7_1_6-a" origId="CODSTA-MCPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Only one statement shall be allowed per line" id="AUTOSAR-A7_1_7-a" origId="FORMAT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Multiple variable declarations shall not be allowed on the same line" id="AUTOSAR-A7_1_7-b" origId="FORMAT-29" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-A7_1_7" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-A7_1_7-c" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_8" desc="Do not place type specifiers before non-type specifiers in a declaration" id="AUTOSAR-A7_1_8-a" origId="HICPP-7_1_3-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_1_9" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="AUTOSAR-A7_1_9-a" origId="CODSTA-CPP-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_1" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="AUTOSAR-A7_2_1-a" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_2" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="AUTOSAR-A7_2_2-a" origId="HICPP-7_2_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_3" desc="Prefer Scoped Enums to Unscoped Enums" id="AUTOSAR-A7_2_3-a" origId="CODSTA-MCPP-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_4" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="AUTOSAR-A7_2_4-a" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_2_5" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="AUTOSAR-A7_2_5-a" origId="CODSTA-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_3_1" desc="Write a using declaration to redeclare overloaded functions" id="AUTOSAR-A7_3_1-a" origId="OOP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_4_1" desc="Do not use the asm declaration" id="AUTOSAR-A7_4_1-a" origId="HICPP-7_5_1-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_1" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="AUTOSAR-A7_5_1-a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_5_2" desc="Functions shall not call themselves, either directly or indirectly" id="AUTOSAR-A7_5_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A7_6_1" desc="Never return from functions that should not return" id="AUTOSAR-A7_6_1-a" origId="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_2_1" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="AUTOSAR-A8_2_1-a" origId="TEMPL-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_1" desc="Do not use functions with variable numbers of arguments" id="AUTOSAR-A8_4_1-a" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="AUTOSAR-A8_4_10" desc="A parameter shall be passed by reference if it can't be NULL" id="AUTOSAR-A8_4_10-a" origId="BD-PB-REFPARAM" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_11" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_11-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not pass std::unique_ptr by const reference" id="AUTOSAR-A8_4_12-a" origId="HICPP-8_2_4-a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_12-b" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_12-c" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_12" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_12-d" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="AUTOSAR-A8_4_13-a" origId="CODSTA-MCPP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="AUTOSAR-A8_4_13-b" origId="CODSTA-MCPP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_13" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="AUTOSAR-A8_4_13-c" origId="CODSTA-MCPP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="AUTOSAR-A8_4_2-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Pass objects by reference instead of by value" id="AUTOSAR-A8_4_3-a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_3" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_3-b" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_4" desc="Multiple output values from a function should be returned as a struct or tuple" id="AUTOSAR-A8_4_4-a" origId="CODSTA-MCPP-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_5" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_5-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_6" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="AUTOSAR-A8_4_6-a" origId="CODSTA-MCPP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass built-in-types by value unless you are modifying them" id="AUTOSAR-A8_4_7-a" origId="CODSTA-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_7" desc="Pass small objects with a trivial copy constructor by value" id="AUTOSAR-A8_4_7-b" origId="HICPP-8_2_3-b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_8" desc="Output parameters shall not be used" id="AUTOSAR-A8_4_8-a" origId="CODSTA-CPP-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_4_9" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-A8_4_9-a" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_0" desc="Avoid use before initialization" id="AUTOSAR-A8_5_0-a" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_1" desc="List members in an initialization list in the order in which they are declared" id="AUTOSAR-A8_5_1-a" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="3;" cat="AUTOSAR-A8_5_2" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="AUTOSAR-A8_5_2-a" origId="CODSTA-MCPP-38" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_3" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="AUTOSAR-A8_5_3-a" origId="CODSTA-MCPP-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A8_5_4" desc="Avoid overloading constructors with std::initializer_list" id="AUTOSAR-A8_5_4-a" origId="CODSTA-MCPP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Public member functions shall not return non-const handles to private/protected class-data" id="AUTOSAR-A9_3_1-a" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_3_1" desc="Protected member function shall not return non-const handles to private class-data" id="AUTOSAR-A9_3_1-b" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-a" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_5_1" desc="Unions shall not be used" id="AUTOSAR-A9_5_1-b" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="AUTOSAR-A9_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-A9_6_2" desc="Do not declare member variables as bit-fields" id="AUTOSAR-A9_6_2-a" origId="CODSTA-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="AUTOSAR-M0_1_1-a" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="AUTOSAR-M0_1_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="AUTOSAR-M0_1_1-c" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="AUTOSAR-M0_1_1-d" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="AUTOSAR-M0_1_1-e" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in 'for' loop" id="AUTOSAR-M0_1_1-f" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_1" desc="There shall be no unreachable code in switch statement" id="AUTOSAR-M0_1_1-g" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with external linkage shall be used at least once" id="AUTOSAR-M0_1_10-a" origId="GLOBAL-UNUSEDFUNC" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_10" desc="Every defined function with internal linkage shall be used at least once" id="AUTOSAR-M0_1_10-b" origId="OPT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-a" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-aa" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-ab" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Avoid conditions that always evaluate to the same value" id="AUTOSAR-M0_1_2-ac" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-b" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-c" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-d" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-e" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-f" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-g" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-h" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-i" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-j" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-k" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-l" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-m" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-n" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-o" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-p" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-q" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-r" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-s" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-t" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-u" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-v" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-w" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-x" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-y" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_2" desc="Boolean operations whose results are invariant shall not be permitted" id="AUTOSAR-M0_1_2-z" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused local variables" id="AUTOSAR-M0_1_3-a" origId="OPT-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unnecessary local variables" id="AUTOSAR-M0_1_3-b" origId="OPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_3" desc="Avoid unused private member variables" id="AUTOSAR-M0_1_3-c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="AUTOSAR-M0_1_4" desc="A project shall not contain non-volatile POD variables having only one use" id="AUTOSAR-M0_1_4-a" origId="GLOBAL-ONEUSEVAR" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="All non-empty functions with void return type shall have external side effect(s)" id="AUTOSAR-M0_1_8-a" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_1_8" desc="Functions with void return type shall not be empty" id="AUTOSAR-M0_1_8-b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_1_9" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="AUTOSAR-M0_1_9-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_2_1" desc="An object shall not be assigned to an overlapping object" id="AUTOSAR-M0_2_1-b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M0_3_1-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when writing to a buffer" id="AUTOSAR-M0_3_1-b" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not compare two unrelated pointers" id="AUTOSAR-M0_3_1-c" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M0_3_1-d" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid division by zero" id="AUTOSAR-M0_3_1-e" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid null pointer dereferencing" id="AUTOSAR-M0_3_1-f" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow due to reading a not zero terminated string" id="AUTOSAR-M0_3_1-g" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="AUTOSAR-M0_3_1-h" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Avoid overflow when reading from a buffer" id="AUTOSAR-M0_3_1-i" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M0_3_1" desc="Do not check for null after dereferencing" id="AUTOSAR-M0_3_1-j" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="AUTOSAR-M0_3_2" desc="If a function returns error information, then that error information shall be tested" id="AUTOSAR-M0_3_2-a" origId="MISRA2004-16_10" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M0_4_2" desc="Use of floating-point arithmetic shall be documented" id="AUTOSAR-M0_4_2-a" origId="COMMENT-10" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_1" desc="Classes should not be derived from virtual bases" id="AUTOSAR-M10_1_1-a" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_2" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="AUTOSAR-M10_1_2-a" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_1_3" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="AUTOSAR-M10_1_3-a" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_2_1" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="AUTOSAR-M10_2_1-a" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M10_3_3" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="AUTOSAR-M10_3_3-a" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M11_0_1" desc="Member data in non-POD types shall be private" id="AUTOSAR-M11_0_1-a" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M12_1_1" desc="Do not use dynamic type of an object under construction" id="AUTOSAR-M12_1_1-a" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_5_3" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="AUTOSAR-M14_5_3-a" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M14_6_1" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="AUTOSAR-M14_6_1-a" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_0_3" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="AUTOSAR-M15_0_3-a" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_1" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="AUTOSAR-M15_1_1-a" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_2" desc="NULL shall not be thrown explicitly" id="AUTOSAR-M15_1_2-a" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_1_3" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="AUTOSAR-M15_1_3-a" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M15_3_1" desc="Exceptions shall be raised only after start-up and before termination of the program" id="AUTOSAR-M15_3_1-a" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_3" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="AUTOSAR-M15_3_3-a" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="AUTOSAR-M15_3_4-a" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_4" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="AUTOSAR-M15_3_4-b" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="AUTOSAR-M15_3_6-a" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M15_3_7" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="AUTOSAR-M15_3_7-a" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="AUTOSAR-M16_0_1-a" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_2" desc="Macros shall not be #define'd or #undef'd within a block" id="AUTOSAR-M16_0_2-a" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_5" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="AUTOSAR-M16_0_5-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="AUTOSAR-M16_0_6" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="AUTOSAR-M16_0_6-a" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_7" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="AUTOSAR-M16_0_7-a" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_0_8" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="AUTOSAR-M16_0_8-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_1" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="AUTOSAR-M16_1_1-a" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_1_2" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="AUTOSAR-M16_1_2-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_2_3" desc="Use multiple include guards" id="AUTOSAR-M16_2_3-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_1" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="AUTOSAR-M16_3_1-a" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M16_3_2" desc="The # and ## preprocessor operators should not be used" id="AUTOSAR-M16_3_2-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_2" desc="The names of standard library macros and objects shall not be reused" id="AUTOSAR-M17_0_2-a" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_3" desc="The names of standard library functions shall not be overridden" id="AUTOSAR-M17_0_3-a" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M17_0_5" desc="The setjmp macro and the longjmp function shall not be used" id="AUTOSAR-M17_0_5-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-c" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_3" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="AUTOSAR-M18_0_3-d" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_4" desc="The time handling functions of library time.h shall not be used" id="AUTOSAR-M18_0_4-a" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_0_5" desc="The unbounded functions of library &lt;cstring> shall not be used" id="AUTOSAR-M18_0_5-a" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_2_1" desc="The macro offsetof, in library stddef.h, shall not be used" id="AUTOSAR-M18_2_1-a" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M18_7_1" desc="The standard header file &lt;signal.h> shall not be used" id="AUTOSAR-M18_7_1-b" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M19_3_1" desc="The error indicator 'errno' shall not be used" id="AUTOSAR-M19_3_1-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M27_0_1" desc="The input/output library stdio.h shall not be used" id="AUTOSAR-M27_0_1-a" origId="MISRA2004-20_9" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M2_10_1" desc="Different identifiers shall be typographically unambiguous" id="AUTOSAR-M2_10_1-a" origId="NAMING-47" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal constants (other than zero) shall not be used" id="AUTOSAR-M2_13_2-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_2" desc="Octal escape sequences shall not be used" id="AUTOSAR-M2_13_2-b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_3" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="AUTOSAR-M2_13_3-a" origId="CODSTA-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_13_4" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="AUTOSAR-M2_13_4-a" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M2_7_1" desc="The character sequence /* shall not be used within a C-style comment" id="AUTOSAR-M2_7_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_1_2" desc="Always declare functions at file scope" id="AUTOSAR-M3_1_2-a" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_1" desc="All declarations of an object or function shall have compatible types" id="AUTOSAR-M3_2_1-a" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_2" desc="The One Definition Rule shall not be violated" id="AUTOSAR-M3_2_2-a" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="AUTOSAR-M3_2_3-a" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_2_4" desc="An identifier with external linkage shall have exactly one external definition" id="AUTOSAR-M3_2_4-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_3_2" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="AUTOSAR-M3_3_2-a" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Declare variables as locally as possible" id="AUTOSAR-M3_4_1-a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_4_1" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="AUTOSAR-M3_4_1-b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_1" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="AUTOSAR-M3_9_1-a" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M3_9_3" desc="The underlying bit representations of floating-point values shall not be used" id="AUTOSAR-M3_9_3-a" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_10_1" desc="NULL shall not be used as an integer value" id="AUTOSAR-M4_10_1-a" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M4_10_2" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="AUTOSAR-M4_10_2-a" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_1" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="AUTOSAR-M4_5_1-a" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M4_5_3" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="AUTOSAR-M4_5_3-a" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_10" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="AUTOSAR-M5_0_10-a" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_11" desc="The plain char type shall be used only for the storage and use of character values" id="AUTOSAR-M5_0_11-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_12" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="AUTOSAR-M5_0_12-a" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_14" desc="The first operand of a conditional-operator shall have type bool" id="AUTOSAR-M5_0_14-a" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_15" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="AUTOSAR-M5_0_15-a" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="Avoid accessing arrays out of bounds" id="AUTOSAR-M5_0_16-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_16" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="AUTOSAR-M5_0_16-b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_17" desc="Do not subtract two pointers that do not address elements of the same array" id="AUTOSAR-M5_0_17-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_18" desc="Do not compare two unrelated pointers" id="AUTOSAR-M5_0_18-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="AUTOSAR-M5_0_2-a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="No parentheses are required for the operand of a unary operator" id="AUTOSAR-M5_0_2-c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Use parentheses unless all operators in the expression are the same" id="AUTOSAR-M5_0_2-e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_2" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="AUTOSAR-M5_0_2-f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_20" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="AUTOSAR-M5_0_20-a" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_21" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="AUTOSAR-M5_0_21-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-a" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-b" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_3" desc="Avoid implicit conversions of complex expressions" id="AUTOSAR-M5_0_3-c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M5_0_4" desc="Avoid implicit conversions between signed and unsigned integer types" id="AUTOSAR-M5_0_4-a" origId="MISRA2004-10_1_a" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="There shall be no implicit conversions from integral to floating type" id="AUTOSAR-M5_0_5-a" origId="MISRA2004-10_1_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_5" desc="Avoid implicit conversions from floating to integral type" id="AUTOSAR-M5_0_5-b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit integral conversions from a wider to a narrower type" id="AUTOSAR-M5_0_6-a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions from wider to narrower floating type" id="AUTOSAR-M5_0_6-b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_6" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="AUTOSAR-M5_0_6-c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of floating type should not be cast to an integer type" id="AUTOSAR-M5_0_7-a" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_7" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_7-b" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_8-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_8" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="AUTOSAR-M5_0_8-b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_0_9" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="AUTOSAR-M5_0_9-a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_14_1" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="AUTOSAR-M5_14_1-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_17_1" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="AUTOSAR-M5_17_1-a" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_18_1" desc="The comma operator shall not be used" id="AUTOSAR-M5_18_1-a" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="AUTOSAR-M5_19_1-a" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_19_1" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="AUTOSAR-M5_19_1-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_10" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="AUTOSAR-M5_2_10-a" origId="MISRA2004-12_13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading comma operator &quot;,&quot;" id="AUTOSAR-M5_2_11-a" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_11" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="AUTOSAR-M5_2_11-b" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_12" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="AUTOSAR-M5_2_12-a" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_2" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="AUTOSAR-M5_2_2-a" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_3" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="AUTOSAR-M5_2_3-a" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_6" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="AUTOSAR-M5_2_6-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="AUTOSAR-M5_2_8" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="AUTOSAR-M5_2_8-a" origId="CODSTA-65" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_2_9" desc="A cast should not convert a pointer type to an integral type" id="AUTOSAR-M5_2_9-a" origId="MISRA2004-11_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M5_3_1" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="AUTOSAR-M5_3_1-a" origId="CODSTA-CPP-67" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_2" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="AUTOSAR-M5_3_2-a" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_3" desc="The unary &amp; operator shall not be overloaded" id="AUTOSAR-M5_3_3-a" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="AUTOSAR-M5_3_4-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="AUTOSAR-M5_3_4-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_3_4" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="AUTOSAR-M5_3_4-c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M5_8_1" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="AUTOSAR-M5_8_1-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_1" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="AUTOSAR-M6_2_1-a" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_2" desc="Floating-point expressions shall not be tested for equality or inequality" id="AUTOSAR-M6_2_2-a" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_2_3" desc="A null statement shall occur on a line by itself or be followed by a comment" id="AUTOSAR-M6_2_3-a" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_3_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="AUTOSAR-M6_3_1-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_1" desc="'if' and 'else' should be followed by a compound statement" id="AUTOSAR-M6_4_1-a" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="AUTOSAR-M6_4_2-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_3-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_3-b" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_3-c" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="Every switch statement shall have at least one case clause" id="AUTOSAR-M6_4_3-d" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_3" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_3-e" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_4" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="AUTOSAR-M6_4_4-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_5" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="AUTOSAR-M6_4_5-a" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_6" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="AUTOSAR-M6_4_6-a" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_4_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="AUTOSAR-M6_4_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_2" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="AUTOSAR-M6_5_2-a" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_3" desc="Do not modify for loop counter within a body of the loop" id="AUTOSAR-M6_5_3-a" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_4" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="AUTOSAR-M6_5_4-a" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_5" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="AUTOSAR-M6_5_5-a" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_5_6" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="AUTOSAR-M6_5_6-a" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="AUTOSAR-M6_6_1-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_2" desc="The goto statement shall jump to a label declared later in the same function body" id="AUTOSAR-M6_6_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M6_6_3" desc="The continue statement shall only be used within a well formed for loop" id="AUTOSAR-M6_6_3-a" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-a" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="AUTOSAR-M7_1_2-b" origId="MISRA2004-16_7" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_1_2" desc="Declare reference parameters as const references whenever possible" id="AUTOSAR-M7_1_2-c" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="AUTOSAR-M7_3_1" desc="The global namespace shall only contain main() and namespace declarations" id="AUTOSAR-M7_3_1-a" origId="CODSTA-CPP-36" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_2" desc="The identifier main shall not be used for a function other than the global function main" id="AUTOSAR-M7_3_2-a" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_3" desc="There shall be no unnamed namespaces in header files" id="AUTOSAR-M7_3_3-a" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_4" desc="using-directives shall not be used" id="AUTOSAR-M7_3_4-a" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_3_6" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="AUTOSAR-M7_3_6-a" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_1" desc="All usage of assembler shall be documented" id="AUTOSAR-M7_4_1-a" origId="COMMENT-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_2" desc="Assembler instructions shall only be introduced using the asm declaration" id="AUTOSAR-M7_4_2-a" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_4_3" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="AUTOSAR-M7_4_3-a" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_1" desc="The address of an object with automatic storage shall not be returned from a function" id="AUTOSAR-M7_5_1-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M7_5_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="AUTOSAR-M7_5_2-a" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="AUTOSAR-M8_0_1" desc="Each variable should be declared in a separate declaration statement" id="AUTOSAR-M8_0_1-a" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_3_1" desc="Do not redefine an inherited virtual function with a different default parameter value" id="AUTOSAR-M8_3_1-a" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_2" desc="The identifiers used in the declaration and definition of a function shall be identical" id="AUTOSAR-M8_4_2-a" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_4_4" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="AUTOSAR-M8_4_4-a" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="AUTOSAR-M8_5_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="Arrays shall not be partially initialized" id="AUTOSAR-M8_5_2-b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M8_5_2" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="AUTOSAR-M8_5_2-c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_1" desc="Const member functions shall not return non-const pointers or references to class-data" id="AUTOSAR-M9_3_1-a" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_3_3" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="AUTOSAR-M9_3_3-a" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="AUTOSAR-M9_6_4" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="AUTOSAR-M9_6_4-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to library functions" id="BD-API-BADPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass negative values to functions expecting non-negative arguments" id="BD-API-NEGPARAM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not pass incorrect values to ctype.h library functions" id="BD-API-CTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Do not check for a non-negative value after passing as a non-negative argument" id="BD-API-REVNEGPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="BD-API-STRSIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-API" desc="Validate values passed to library functions" id="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not access iterator out of range" id="BD-CO-ITOUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="BD-CO-STRMOD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not pass empty container iterators to std algorithms as destinations" id="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not compare iterators from different containers" id="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-CO" desc="Do not modify container while iterating over it" id="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Always close transactions" id="BD-MISC-TRANS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-MISC" desc="Prevent calling unsafe functions (custom rule)" id="BD-MISC-DC" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always catch exceptions" id="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify string literals" id="BD-PB-MODSTR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid use before initialization" id="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-PB" desc="Avoid null pointer dereferencing" id="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid buffer overflow due to defining incorrect format limits" id="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow due to reading a not zero terminated string" id="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when reading from a buffer" id="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overflow when writing to a buffer" id="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid overwriting method parameters" id="BD-PB-POVR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not point to a wrapped object that has been freed" id="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid division by zero" id="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays out of bounds" id="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer pointing to an element of an array of objects shall not be passed to a smart pointer of single object type" id="BD-PB-ARRPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid incorrect shift operations" id="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use the correct byte ordering when transferring data between systems" id="BD-PB-BYTEORD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid conditions that always evaluate to the same value" id="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Consistently check the returned value of non-void functions" id="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always check the returned value of non-void function" id="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not check for null after dereferencing" id="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not modify the alignment of objects by calling realloc()" id="BD-PB-DNMPTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly use errno value" id="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define exit handlers" id="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Reset strings on fgets() or fgetws() failure" id="BD-PB-FGETS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Only use values for fsetpos() that are returned from fgetpos()" id="BD-PB-FSETPOS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid infinite recursion" id="BD-PB-INFREC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="BD-PB-INVENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="BD-PB-INVRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid calls to memory-setting functions that can be optimized out by the compiler" id="BD-PB-MEMOPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define new handlers" id="BD-PB-NEWHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid throwing exceptions from functions that are declared not to throw" id="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Declare non-returning functions with the attribute that specifies that they do not return" id="BD-PB-NORETDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Never return from functions that should not return" id="BD-PB-NORETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid accessing arrays and pointers out of bounds" id="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="An object shall not be assigned or copied to an overlapping object" id="BD-PB-OVERLAP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not treat arrays polymorphically" id="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not compare two unrelated pointers" id="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subtract two pointers that do not address elements of the same array" id="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="BD-PB-PTRVALUE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define signal handlers" id="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not return from a computational exception signal handler" id="BD-PB-SIGRETURN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not subsequently use the argument to std::forward" id="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not rely on the value of a moved-from object" id="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid switch with unreachable branches" id="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define terminate handlers" id="BD-PB-TERMHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Properly define unexpected handlers" id="BD-PB-UNEXPHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under construction" id="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use dynamic type of an object under destruction" id="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the size of the variable length array is in valid range" id="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="The same file shall not be opened for read and write access at the same time on different streams" id="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid writing to a stream which has been opened as read only" id="BD-PB-WRROS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid integer overflows" id="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure strings are zero terminated" id="BD-PB-NZTS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Ensure the output buffer is large enough when using path manipulation functions" id="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="2;" authUrg="0;" cat="BD-PB" desc="A parameter shall be passed by reference if it can't be NULL" id="BD-PB-REFPARAM" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Always throw the created std::exception object" id="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Suspicious setting of stream flags" id="BD-PB-STREAMFLAGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Restore stream format" id="BD-PB-STREAMFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Use macros for variable arguments correctly" id="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unused values" id="BD-PB-VOVR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Avoid unreachable methods" id="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Guarantee that container indices are within the valid range" id="BD-PB-VALRANGE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-PB" desc="Do not use recursion" id="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Properly deallocate dynamically allocated resources" id="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Ensure deallocation functions guarantee resource freeing" id="BD-RES-BADFREEF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not use resources that have been freed" id="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Allocate sufficient memory to hold an object of a given type" id="BD-RES-INSUFMEM" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not free resources using invalid pointers" id="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-RES" desc="Ensure resources are freed" id="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Avoid cyclic shared_ptr references" id="BD-RES-CSP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-RES" desc="Do not create variables on the stack above the defined limits" id="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid tainted data in array indexes" id="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Prevent buffer overflows from tainted data" id="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against integer overflow/underflow from tainted data" id="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer read overflow from tainted data" id="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid buffer write overflow from tainted data" id="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against command injection" id="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid printing tainted data on the output console" id="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against environment injection" id="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against file name injection" id="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Exclude unsanitized user input from format strings" id="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used in the controlling expression of a loop" id="BD-SECURITY-TDLOOP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Protect against SQL injection" id="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing unvalidated binary data to log methods" id="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Properly seed pseudorandom number generators" id="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Sensitive data should be cleared before being deallocated" id="BD-SECURITY-SENSFREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Avoid passing sensitive data to functions that write to log files" id="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-SECURITY" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-SECURITY" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid double locking" id="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions when using fork and file descriptors" id="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="BD-TRS" desc="Do not abandon unreleased locks" id="BD-TRS-LOCK" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use global variable with different locks set" id="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not acquire locks in different order" id="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while checking for the existence of a symbolic link" id="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not use blocking functions while holding a lock" id="BD-TRS-TSHL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="BD-TRS-ARG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Make const member functions thread-safe" id="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="6;" authUrg="0;" cat="BD-TRS" desc="Variable should be used in context of single critical section" id="BD-TRS-DIFCS" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Avoid race conditions while accessing files" id="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not join or detach a thread that was previously joined or detached" id="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Use locks to prevent race conditions when modifying bit fields" id="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not destroy another thread's mutex" id="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="BD-TRS" desc="Do not release a lock that has not been acquired" id="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="2;" authUrg="2;" cat="CDD" desc="Avoid function duplication" id="CDD-DUPM" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="6;" authUrg="6;" cat="CDD" desc="Avoid code duplication" id="CDD-DUPC" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="CDD" desc="Avoid duplication of #include directives" id="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="1;" authUrg="1;" cat="CDD" desc="Avoid string literal duplication" id="CDD-DUPS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CERT_C-API00" desc="The validity of parameters must be checked inside each function" id="CERT_C-API00-a" origId="CODSTA-86" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid overflow when writing to a buffer" id="CERT_C-API01-a" origId="BD-PB-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API01-b" origId="SECURITY-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-API02-a" origId="SECURITY-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-API02" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-API02-b" origId="SECURITY-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR01" desc="Do not call 'sizeof' on a pointer type" id="CERT_C-ARR01-a" origId="PB-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR02" desc="Explicitly specify array bounds in array declarations with initializers" id="CERT_C-ARR02-a" origId="CODSTA-200" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR30" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR30-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR32" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-ARR32-a" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_C-ARR36-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR36" desc="Do not compare two unrelated pointers" id="CERT_C-ARR36-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR37" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="CERT_C-ARR37-a" origId="PB-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when reading from a buffer" id="CERT_C-ARR38-a" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow when writing to a buffer" id="CERT_C-ARR38-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid buffer overflow due to defining incorrect format limits" id="CERT_C-ARR38-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR38" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-ARR38-d" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Avoid accessing arrays out of bounds" id="CERT_C-ARR39-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Pointer arithmetic should not be used" id="CERT_C-ARR39-b" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ARR39" desc="Do not add or subtract a scaled integer to a pointer" id="CERT_C-ARR39-c" origId="CODSTA-189" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON01" desc="Do not abandon unreleased locks" id="CERT_C-CON01-a" origId="BD-TRS-LOCK" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON02" desc="Do not use the volatile keyword" id="CERT_C-CON02-a" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON05" desc="Do not use blocking functions while holding a lock" id="CERT_C-CON05-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-CON30" desc="Ensure resources are freed" id="CERT_C-CON30-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not destroy another thread's mutex" id="CERT_C-CON31-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not use resources that have been freed" id="CERT_C-CON31-b" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON31" desc="Do not free resources using invalid pointers" id="CERT_C-CON31-c" origId="BD-RES-INVFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON32" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-CON32-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON33" desc="Avoid using thread-unsafe functions" id="CERT_C-CON33-a" origId="SECURITY-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON34" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-CON34-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON35" desc="Avoid double locking" id="CERT_C-CON35-a" origId="BD-TRS-DLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON36" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_C-CON36-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON37" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-CON37-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON38" desc="Use the 'cnd_signal()' function with a unique condition variable" id="CERT_C-CON38-a" origId="SECURITY-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON39" desc="Do not join or detach a thread that was previously joined or detached" id="CERT_C-CON39-a" origId="BD-TRS-JOINDETACH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON40" desc="Do not refer to an atomic variable twice in an expression" id="CERT_C-CON40-a" origId="CODSTA-195" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-CON41" desc="Wrap functions that can fail spuriously in a loop" id="CERT_C-CON41-a" origId="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-CON43" desc="Do not use global variable with different locks set" id="CERT_C-CON43-a" origId="BD-TRS-MLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-DCL00" desc="Declare parameters or local variable as const whenever possible" id="CERT_C-DCL00-a" origId="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="CERT_C-DCL01-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL01" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="CERT_C-DCL01-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL02" desc="Use visually distinct identifiers" id="CERT_C-DCL02-a" origId="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CERT_C-DCL04" desc="Each variable should be declared in a separate declaration statement" id="CERT_C-DCL04-a" origId="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL05" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL05-a" origId="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL06" desc="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" id="CERT_C-DCL06-a" origId="CODSTA-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL10" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL10-a" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-DCL11-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-DCL11-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL11" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-DCL11-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL12" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CERT_C-DCL12-a" origId="CODSTA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CERT_C-DCL13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="CERT_C-DCL13-a" origId="MISRA2004-16_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="CERT_C-DCL15" desc="Objects or functions with external linkage shall be declared in a header file" id="CERT_C-DCL15-a" origId="MISRA-023" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL16" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="CERT_C-DCL16-a" origId="PORT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal and hexadecimal escape sequences shall be terminated" id="CERT_C-DCL18-a" origId="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL18" desc="Octal constants (other than zero) shall not be used" id="CERT_C-DCL18-b" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL19" desc="Declare variables as locally as possible" id="CERT_C-DCL19-a" origId="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL20" desc="The number of arguments passed to a function shall match the number of parameters" id="CERT_C-DCL20-a" origId="MISRA2004-16_6" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-DCL22" desc="Avoid unused values" id="CERT_C-DCL22-a" origId="BD-PB-VOVR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_C-DCL30-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL30" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_C-DCL30-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL31" desc="All functions shall be declared before use" id="CERT_C-DCL31-a" origId="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL36" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="CERT_C-DCL36-a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL37" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_C-DCL37-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL38" desc="The final member of a structure should not be an array of size '0' or '1'" id="CERT_C-DCL38-a" origId="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL39" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_C-DCL39-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="All declarations of an object or function shall have compatible types" id="CERT_C-DCL40-a" origId="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL40" desc="If objects or functions are declared more than once their types shall be compatible" id="CERT_C-DCL40-b" origId="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-DCL41" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="CERT_C-DCL41-a" origId="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-ENV01-a" origId="SECURITY-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-ENV01-b" origId="SECURITY-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV01" desc="Avoid overflow when writing to a buffer" id="CERT_C-ENV01-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV02" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-ENV02-a" origId="SECURITY-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV30" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CERT_C-ENV30-a" origId="CODSTA-185_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV31" desc="Do not rely on an environment pointer following an operation that may invalidate it" id="CERT_C-ENV31-a" origId="BD-PB-INVENV" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV32" desc="Properly define exit handlers" id="CERT_C-ENV32-a" origId="BD-PB-EXITHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ENV33" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="CERT_C-ENV33-a" origId="SECURITY-48" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ENV34" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="CERT_C-ENV34-a" origId="BD-PB-INVRET" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR01" desc="The error indicator 'errno' shall not be used" id="CERT_C-ERR01-a" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR02" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR02-a" origId="CODSTA-110" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR04" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR04-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-a" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR05" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-ERR05-c" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR06" desc="Do not use assertions" id="CERT_C-ERR06-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR07-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR07" desc="The Standard Library input/output functions shall not be used" id="CERT_C-ERR07-b" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Properly use errno value" id="CERT_C-ERR30-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR30" desc="Provide error handling for file opening errors right next to the call to fopen" id="CERT_C-ERR30-b" origId="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR32" desc="Properly use errno value" id="CERT_C-ERR32-a" origId="BD-PB-ERRNO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-a" origId="CODSTA-122_a" sev="1" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-ERR33-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-ERR33" desc="Avoid null pointer dereferencing" id="CERT_C-ERR33-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-ERR33" desc="Always check the returned value of non-void function" id="CERT_C-ERR33-d" origId="BD-PB-CHECKRETGEN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-ERR34" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-ERR34-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP00" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CERT_C-EXP00-a" origId="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP02" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="CERT_C-EXP02-a" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP05" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP05-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Pointer arithmetic should not be used" id="CERT_C-EXP08-a" origId="MISRA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP08" desc="Avoid accessing arrays out of bounds" id="CERT_C-EXP08-b" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP10-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP10-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP10-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP10" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP10-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-a" origId="CODSTA-122_a" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP12" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-EXP12-b" origId="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP14" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-EXP14-a" origId="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP15" desc="Suspicious use of semicolon" id="CERT_C-EXP15-a" origId="CODSTA-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP16" desc="Function address should not be compared to zero" id="CERT_C-EXP16-a" origId="PB-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP19" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="CERT_C-EXP19-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP20" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CERT_C-EXP20-a" origId="CODSTA-60" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-EXP30-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-EXP30-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-EXP30-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP30" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-EXP30-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP32" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP32-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP33" desc="Avoid use before initialization" id="CERT_C-EXP33-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-EXP34" desc="Avoid null pointer dereferencing" id="CERT_C-EXP34-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP35" desc="Do not access an array in the result of a function call" id="CERT_C-EXP35-a" origId="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP36" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP36-a" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="CERT_C-EXP37-a" origId="MISRA2004-16_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Function types shall have named parameters" id="CERT_C-EXP37-b" origId="CODSTA-158" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Function types shall be in prototype form" id="CERT_C-EXP37-c" origId="CODSTA-159" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP37" desc="Functions shall always have visible prototype at the function call" id="CERT_C-EXP37-d" origId="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-EXP39" desc="There shall be no implicit conversions from integral to floating type" id="CERT_C-EXP39-a" origId="MISRA2004-10_1_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="CERT_C-EXP39-b" origId="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid accessing arrays and pointers out of bounds" id="CERT_C-EXP39-c" origId="BD-PB-OVERFARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="CERT_C-EXP39-d" origId="BD-SECURITY-OVERFFMT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer read overflow from tainted data" id="CERT_C-EXP39-e" origId="BD-SECURITY-OVERFRD" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-EXP39" desc="Avoid buffer write overflow from tainted data" id="CERT_C-EXP39-f" origId="BD-SECURITY-OVERFWR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP40" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_C-EXP40-a" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP42" desc="Don't memcpy or memcmp non-PODs" id="CERT_C-EXP42-a" origId="MRM-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP43" desc="The restrict type qualifier shall not be used" id="CERT_C-EXP43-a" origId="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_C-EXP44-a" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP44" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_C-EXP44-b" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in conditions without brackets" id="CERT_C-EXP45-b" origId="PB-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP45" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="CERT_C-EXP45-d" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP46" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="CERT_C-EXP46-b" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-EXP47" desc="Do not call va_arg with an argument of the incorrect type" id="CERT_C-EXP47-a" origId="PB-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Don't use chmod(), chown(), chgrp()" id="CERT_C-FIO01-a" origId="SECURITY-27" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO01" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO01-b" origId="SECURITY-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO21" desc="Usage of functions prone to race is not allowed" id="CERT_C-FIO21-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO22" desc="Ensure resources are freed" id="CERT_C-FIO22-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO24" desc="Avoid race conditions while accessing files" id="CERT_C-FIO24-a" origId="BD-TRS-FRC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="CERT_C-FIO30-a" origId="SECURITY-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="CERT_C-FIO30-b" origId="SECURITY-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO30" desc="Never use unfiltered data from an untrusted user as the format parameter" id="CERT_C-FIO30-c" origId="SECURITY-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO32" desc="Protect against file name injection" id="CERT_C-FIO32-a" origId="BD-SECURITY-TDFNAMES" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO34" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="CERT_C-FIO34-a" origId="BD-PB-EOFCOMP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO37" desc="Avoid accessing arrays out of bounds" id="CERT_C-FIO37-a" origId="BD-PB-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO38" desc="A pointer to a FILE object shall not be dereferenced" id="CERT_C-FIO38-a" origId="CODSTA-166_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO39" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_C-FIO39-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO40" desc="Reset strings on fgets() or fgetws() failure" id="CERT_C-FIO40-a" origId="BD-PB-FGETS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_C-FIO41-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_C-FIO41-b" origId="MISRA2004-12_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_C-FIO41-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_C-FIO41-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO41" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CERT_C-FIO41-e" origId="CODSTA-123" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-FIO42" desc="Ensure resources are freed" id="CERT_C-FIO42-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO44" desc="Only use values for fsetpos() that are returned from fgetpos()" id="CERT_C-FIO44-a" origId="BD-PB-FSETPOS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO45" desc="Avoid race conditions while accessing files" id="CERT_C-FIO45-a" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FIO46" desc="Do not use resources that have been freed" id="CERT_C-FIO46-a" origId="BD-RES-FREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-a" origId="PB-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-b" origId="PB-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="CERT_C-FIO47-c" origId="PB-47" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-d" origId="PB-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="CERT_C-FIO47-e" origId="PB-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FIO47" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="CERT_C-FIO47-f" origId="PB-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP00" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP00-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP02" desc="Floating-point expressions shall not be tested for equality or inequality" id="CERT_C-FLP02-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid division by zero" id="CERT_C-FLP03-a" origId="BD-PB-ZERO" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP03-b" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions from narrower to wider floating type" id="CERT_C-FLP03-c" origId="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP03" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP03-d" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-a" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP06" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP06-b" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP30" desc="Do not use floating point variables as loop counters" id="CERT_C-FLP30-a" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-FLP32" desc="Validate values passed to library functions" id="CERT_C-FLP32-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions from wider to narrower floating type" id="CERT_C-FLP34-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP34" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="CERT_C-FLP34-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-a" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP36" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CERT_C-FLP36-b" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-FLP37" desc="Do not use object representations to compare floating-point values" id="CERT_C-FLP37-c" origId="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CERT_C-INT02-a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT02" desc="Avoid mixing arithmetic of different precisions in the same expression" id="CERT_C-INT02-b" origId="MISRA-043_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Protect against integer overflow/underflow from tainted data" id="CERT_C-INT04-a" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer read overflow from tainted data" id="CERT_C-INT04-b" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT04" desc="Avoid buffer write overflow from tainted data" id="CERT_C-INT04-c" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-INT05" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-INT05-a" origId="SECURITY-13" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-INT07-a" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT07" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="CERT_C-INT07-b" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT08" desc="Avoid integer overflows" id="CERT_C-INT08-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT09" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="CERT_C-INT09-a" origId="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT10" desc="Avoid accessing arrays out of bounds" id="CERT_C-INT10-a" origId="BD-PB-ARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT12" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="CERT_C-INT12-a" origId="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT13" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT13-a" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT15" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="CERT_C-INT15-a" origId="PB-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT16" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CERT_C-INT16-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CERT_C-INT18-a" origId="PB-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CERT_C-INT18-b" origId="PB-65_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT18" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CERT_C-INT18-c" origId="MISRA-048_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Avoid integer overflows" id="CERT_C-INT30-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT30-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT30" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT30-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CERT_C-INT31-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CERT_C-INT31-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CERT_C-INT31-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CERT_C-INT31-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CERT_C-INT31-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CERT_C-INT31-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CERT_C-INT31-h" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CERT_C-INT31-i" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CERT_C-INT31-j" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CERT_C-INT31-k" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CERT_C-INT31-l" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CERT_C-INT31-m" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CERT_C-INT31-n" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT31" desc="Avoid integer overflows" id="CERT_C-INT31-o" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Avoid integer overflows" id="CERT_C-INT32-a" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CERT_C-INT32-b" origId="PB-66_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT32" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CERT_C-INT32-c" origId="PB-66_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT33" desc="Avoid division by zero" id="CERT_C-INT33-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-INT34" desc="Avoid incorrect shift operations" id="CERT_C-INT34-a" origId="BD-PB-BADSHIFT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT35" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="CERT_C-INT35-a" origId="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-INT36" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CERT_C-INT36-b" origId="CODSTA-127_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-a" origId="MRM-18" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-b" origId="MRM-19" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not allocate memory and expect that someone else will deallocate it later" id="CERT_C-MEM00-c" origId="MRM-20" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM00" desc="Do not use resources that have been freed" id="CERT_C-MEM00-d" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM00" desc="Ensure resources are freed" id="CERT_C-MEM00-e" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Do not use resources that have been freed" id="CERT_C-MEM01-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to an expression that points to deallocated memory" id="CERT_C-MEM01-b" origId="MRM-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to global or member variable that points to deallocated memory" id="CERT_C-MEM01-c" origId="MRM-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM01" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="CERT_C-MEM01-d" origId="MRM-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="Assignment operator should have operands of compatible types" id="CERT_C-MEM02-a" origId="PB-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM02" desc="Do not assign function return value to a variable of incompatible type" id="CERT_C-MEM02-b" origId="PB-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM03" desc="Sensitive data should be cleared before being deallocated" id="CERT_C-MEM03-a" origId="BD-SECURITY-SENSFREE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM04" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM04-a" origId="MISRA2004-20_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Do not use recursion" id="CERT_C-MEM05-a" origId="BD-PB-RECFUN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM05" desc="Ensure the size of the variable length array is in valid range" id="CERT_C-MEM05-b" origId="BD-PB-VLASIZE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM07" desc="The validity of values passed to library functions shall be checked" id="CERT_C-MEM07-a" origId="MISRA2004-20_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM12" desc="Ensure resources are freed" id="CERT_C-MEM12-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM30" desc="Do not use resources that have been freed" id="CERT_C-MEM30-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MEM31" desc="Ensure resources are freed" id="CERT_C-MEM31-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Allocate structures containing a flexible array member dynamically" id="CERT_C-MEM33-a" origId="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM33" desc="Do not copy instances of structures containing a flexible array member" id="CERT_C-MEM33-b" origId="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM34" desc="Do not free resources using invalid pointers" id="CERT_C-MEM34-a" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MEM35" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="CERT_C-MEM35-a" origId="MRM-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MEM36" desc="Do not modify the alignment of objects by calling realloc()" id="CERT_C-MEM36-a" origId="BD-PB-DNMPTR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="CERT_C-MSC01-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC01" desc="The final clause of a switch statement shall be the default clause" id="CERT_C-MSC01-b" origId="MISRA2004-15_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C-style comment" id="CERT_C-MSC04-a" origId="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence // shall not be used within a C-style comment" id="CERT_C-MSC04-b" origId="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="The character sequence /* shall not be used within a C++-style comment" id="CERT_C-MSC04-c" origId="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC04" desc="Line-splicing shall not be used in // comments" id="CERT_C-MSC04-d" origId="COMMENT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC07-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC07-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC07-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC07-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC07-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC07-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC07-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC07" desc="Avoid switch with unreachable branches" id="CERT_C-MSC07-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC09" desc="Only use characters defined in ISO C standard" id="CERT_C-MSC09-a" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC11" desc="Assert liberally to document internal assumptions and invariants" id="CERT_C-MSC11-a" origId="CODSTA-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;else&quot; block" id="CERT_C-MSC12-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="CERT_C-MSC12-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="CERT_C-MSC12-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in switch statement" id="CERT_C-MSC12-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code in 'for' loop" id="CERT_C-MSC12-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="CERT_C-MSC12-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="CERT_C-MSC12-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC12" desc="Avoid switch with unreachable branches" id="CERT_C-MSC12-h" origId="BD-PB-SWITCH" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC13" desc="Avoid unnecessary local variables" id="CERT_C-MSC13-a" origId="OPT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC14" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC14-a" origId="PB-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC15" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CERT_C-MSC15-a" origId="PB-73" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC17" desc="Missing break statement between cases in a switch statement" id="CERT_C-MSC17-a" origId="CODSTA-149" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid accessing arrays out of bounds" id="CERT_C-MSC19-a" origId="BD-PB-ARRAY" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-MSC19" desc="Avoid null pointer dereferencing" id="CERT_C-MSC19-b" origId="BD-PB-NP" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC22" desc="The setjmp macro and the longjmp function shall not be used" id="CERT_C-MSC22-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-MSC24" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_C-MSC24-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_C-MSC24-b" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-MSC24-c" origId="SECURITY-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC24" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="CERT_C-MSC24-d" origId="SECURITY-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC30" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_C-MSC30-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC32" desc="Properly seed pseudorandom number generators" id="CERT_C-MSC32-d" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC33" desc="Avoid functions which use time from standard C library" id="CERT_C-MSC33-a" origId="SECURITY-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC37" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_C-MSC37-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC38" desc="A function-like macro shall not be invoked without all of its arguments" id="CERT_C-MSC38-a" origId="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-MSC39" desc="Use macros for variable arguments correctly" id="CERT_C-MSC39-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-MSC40" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CERT_C-MSC40-a" origId="CODSTA-202" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="1;" cat="CERT_C-MSC41" desc="Do not hard code string literals" id="CERT_C-MSC41-a" origId="CODSTA-203" sev="1" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-POS30-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CERT_C-POS30-b" origId="CODSTA-144" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS30" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CERT_C-POS30-c" origId="CODSTA-145" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS33" desc="Avoid using the 'vfork()' function" id="CERT_C-POS33-a" origId="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Usage of system properties (environment variables) should be restricted" id="CERT_C-POS34-a" origId="SECURITY-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS34" desc="Do not call putenv() with a pointer to an automatic variable as the argument" id="CERT_C-POS34-b" origId="BD-PB-PUTENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS35" desc="Avoid race conditions while checking for the existence of a symbolic link" id="CERT_C-POS35-b" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS36" desc="Observe correct revocation order while relinquishing privileges" id="CERT_C-POS36-a" origId="SECURITY-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS37" desc="Ensure that privilege relinquishment is successful" id="CERT_C-POS37-a" origId="SECURITY-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS38" desc="Avoid race conditions when using fork and file descriptors" id="CERT_C-POS38-a" origId="BD-TRS-FORKFILE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS39" desc="Use the correct byte ordering when transferring data between systems" id="CERT_C-POS39-a" origId="BD-PB-BYTEORD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS44" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-POS44-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS47" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="CERT_C-POS47-a" origId="SECURITY-43" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not destroy another thread's mutex" id="CERT_C-POS48-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS48" desc="Do not release a lock that has not been acquired" id="CERT_C-POS48-b" origId="BD-TRS-REVLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS49" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_C-POS49-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS50" desc="Declare objects shared between POSIX threads with appropriate storage durations" id="CERT_C-POS50-a" origId="BD-TRS-ARG" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS51" desc="Do not acquire locks in different order" id="CERT_C-POS51-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-POS52" desc="Do not use blocking functions while holding a lock" id="CERT_C-POS52-a" origId="BD-TRS-TSHL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_C-POS53" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="CERT_C-POS53-a" origId="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-a" origId="CODSTA-122_a" sev="1" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-POS54" desc="The value returned by a function having non-void return type shall be used" id="CERT_C-POS54-b" origId="CODSTA-122_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-POS54" desc="Avoid null pointer dereferencing" id="CERT_C-POS54-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE00" desc="A function should be used in preference to a function-like macro" id="CERT_C-PRE00-a" origId="MISRA2004-19_7" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE01" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="CERT_C-PRE01-a" origId="MISRA2004-19_10" sev="1" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_C-PRE02" desc="Enclose in parentheses whole definition of a function-like macro" id="CERT_C-PRE02-a" origId="MISRA-096" sev="1" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE06" desc="Use multiple include guards" id="CERT_C-PRE06-a" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE07" desc="Trigraphs shall not be used" id="CERT_C-PRE07-a" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE30" desc="Avoid token concatenation that may produce universal character names" id="CERT_C-PRE30-a" origId="PREPROC-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain assignments, increment, or decrement operators" id="CERT_C-PRE31-b" origId="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Assertions should not contain function calls nor function-like macro calls" id="CERT_C-PRE31-c" origId="CODSTA-150_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE31" desc="Avoid side effects in arguments to unsafe macros" id="CERT_C-PRE31-d" origId="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-PRE32" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="CERT_C-PRE32-a" origId="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG00" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG00-a" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG01" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG01-a" origId="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-SIG02" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="CERT_C-SIG02-a" origId="MISRA2004-20_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG30" desc="Properly define signal handlers" id="CERT_C-SIG30-a" origId="BD-PB-SIGHAN" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG31" desc="Properly define signal handlers" id="CERT_C-SIG31-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG34" desc="Properly define signal handlers" id="CERT_C-SIG34-a" origId="BD-PB-SIGHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-SIG35" desc="Do not return from a computational exception signal handler" id="CERT_C-SIG35-a" origId="BD-PB-SIGRETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR00" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR00-a" origId="MISRA2004-6_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against command injection" id="CERT_C-STR02-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against file name injection" id="CERT_C-STR02-b" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR02" desc="Protect against SQL injection" id="CERT_C-STR02-c" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR03" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR03-a" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR04" desc="The plain char type shall be used only for the storage and use of character values" id="CERT_C-STR04-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR05" desc="A string literal shall not be modified" id="CERT_C-STR05-a" origId="PB-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_C-STR07" desc="Avoid using unsafe string functions that do not check bounds" id="CERT_C-STR07-a" origId="SECURITY-13" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR09" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CERT_C-STR09-a" origId="CODSTA-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR10" desc="Narrow and wide string literals shall not be concatenated" id="CERT_C-STR10-a" origId="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR11" desc="Do not specify the bound of a character array initialized with a string literal" id="CERT_C-STR11-a" origId="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="A string literal shall not be modified" id="CERT_C-STR30-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR30" desc="Do not modify string literals" id="CERT_C-STR30-b" origId="BD-PB-MODSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid accessing arrays out of bounds" id="CERT_C-STR31-a" origId="BD-PB-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid overflow when writing to a buffer" id="CERT_C-STR31-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Prevent buffer overflows from tainted data" id="CERT_C-STR31-c" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid buffer write overflow from tainted data" id="CERT_C-STR31-d" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR31" desc="Avoid using unsafe string functions which may cause buffer overflows" id="CERT_C-STR31-e" origId="SECURITY-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR32" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_C-STR32-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CERT_C-STR34-b" origId="CODSTA-187_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="An expressions of the 'signed char' type should not be used as an array index" id="CERT_C-STR34-c" origId="CODSTA-187_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR34" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CERT_C-STR34-d" origId="CODSTA-187_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_C-STR37" desc="Do not pass incorrect values to ctype.h library functions" id="CERT_C-STR37-a" origId="BD-API-CTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-STR38" desc="Do not confuse narrow and wide character strings and functions" id="CERT_C-STR38-a" origId="CODSTA-188" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_C-WIN00" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CERT_C-WIN00-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_C-WIN30" desc="Ensure resources are freed" id="CERT_C-WIN30-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON50" desc="Do not destroy another thread's mutex" id="CERT_CPP-CON50-a" origId="BD-TRS-DSTRLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON51" desc="Do not call lock() directly on a mutex" id="CERT_CPP-CON51-a" origId="CODSTA-MCPP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON52" desc="Use locks to prevent race conditions when modifying bit fields" id="CERT_CPP-CON52-a" origId="BD-TRS-BITLOCK" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON53" desc="Do not acquire locks in different order" id="CERT_CPP-CON53-a" origId="BD-TRS-ORDER" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON54" desc="Wrap functions that can spuriously wake up in a loop" id="CERT_CPP-CON54-a" origId="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CON55" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="CERT_CPP-CON55-a" origId="SECURITY-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CON56" desc="Avoid double locking" id="CERT_CPP-CON56-a" origId="BD-TRS-DLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR50" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-CTR50-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR51" desc="Do not modify container while iterating over it" id="CERT_CPP-CTR51-a" origId="BD-CO-ITMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR52" desc="Do not pass empty container iterators to std algorithms as destinations" id="CERT_CPP-CTR52-a" origId="BD-CO-EMPCON" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not use an iterator range that isn't really a range" id="CERT_CPP-CTR53-a" origId="STL-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR53" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR53-b" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare iterators from different containers" id="CERT_CPP-CTR54-a" origId="BD-CO-ITINVCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not compare two unrelated pointers" id="CERT_CPP-CTR54-b" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR54" desc="Do not subtract two pointers that do not address elements of the same array" id="CERT_CPP-CTR54-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR55" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="CERT_CPP-CTR55-a" origId="PB-74" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Don't treat arrays polymorphically" id="CERT_CPP-CTR56-a" origId="PB-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="CERT_CPP-CTR56-b" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR56" desc="Do not treat arrays polymorphically" id="CERT_CPP-CTR56-c" origId="BD-PB-POLARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR57" desc="For associative containers never use comparison function returning true for equal values" id="CERT_CPP-CTR57-a" origId="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-CTR58" desc="Make predicates const pure functions" id="CERT_CPP-CTR58-a" origId="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL50" desc="Functions shall not be defined with a variable number of arguments" id="CERT_CPP-DCL50-a" origId="MISRA2004-16_1" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define or #undef identifiers with names which start with underscore" id="CERT_CPP-DCL51-a" origId="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not redefine reserved words" id="CERT_CPP-DCL51-b" origId="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="Do not #define nor #undef identifier 'defined'" id="CERT_CPP-DCL51-c" origId="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused" id="CERT_CPP-DCL51-d" origId="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="CERT_CPP-DCL51-e" origId="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL51" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="CERT_CPP-DCL51-f" origId="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL52" desc="Never qualify a reference type with 'const' or 'volatile'" id="CERT_CPP-DCL52-a" origId="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Parameter names in function declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-a" origId="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="CERT_CPP-DCL53-b" origId="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL53" desc="Avoid function declarations that are syntactically ambiguous" id="CERT_CPP-DCL53-c" origId="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL54" desc="Always provide new and delete together" id="CERT_CPP-DCL54-a" origId="MRM-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL55" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="CERT_CPP-DCL55-a" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL56" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="CERT_CPP-DCL56-a" origId="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-DCL57-a" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL57" desc="Always catch exceptions" id="CERT_CPP-DCL57-b" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL58" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CERT_CPP-DCL58-a" origId="CODSTA-CPP-95" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL59" desc="There shall be no unnamed namespaces in header files" id="CERT_CPP-DCL59-a" origId="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="CERT_CPP-DCL60" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="CERT_CPP-DCL60-a" origId="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="CERT_CPP-ERR50-a" origId="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="CERT_CPP-ERR50-b" origId="EXCEPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Do not throw from within destructor" id="CERT_CPP-ERR50-c" origId="EXCEPT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="CERT_CPP-ERR50-d" origId="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="CERT_CPP-ERR50-e" origId="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR50-f" origId="EXCEPT-08" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR50-g" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR50-h" origId="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="CERT_CPP-ERR50-i" origId="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Always catch exceptions" id="CERT_CPP-ERR50-j" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Properly define exit handlers" id="CERT_CPP-ERR50-k" origId="BD-PB-EXITHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-l" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="Avoid throwing exceptions from functions that are declared not to throw" id="CERT_CPP-ERR50-m" origId="BD-PB-NOEXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR50" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="CERT_CPP-ERR50-n" origId="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Always catch exceptions" id="CERT_CPP-ERR51-a" origId="BD-PB-EXCEPT" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR51" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="CERT_CPP-ERR51-b" origId="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The setjmp macro and the longjmp function shall not be used" id="CERT_CPP-ERR52-a" origId="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR52" desc="The standard header file &lt;setjmp.h> shall not be used" id="CERT_CPP-ERR52-b" origId="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR53" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="CERT_CPP-ERR53-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR54" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="CERT_CPP-ERR54-a" origId="EXCEPT-17" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR55" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="CERT_CPP-ERR55-a" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Always catch exceptions" id="CERT_CPP-ERR56-a" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR56" desc="Do not leave 'catch' blocks empty" id="CERT_CPP-ERR56-b" origId="EXCEPT-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR57" desc="Ensure resources are freed" id="CERT_CPP-ERR57-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CERT_CPP-ERR58" desc="Exceptions shall be raised only after start-up and before termination of the program" id="CERT_CPP-ERR58-a" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR59" desc="Do not throw an exception across execution boundaries" id="CERT_CPP-ERR59-a" origId="PORT-30" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="Exception objects must be nothrow copy constructible" id="CERT_CPP-ERR60-a" origId="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR60" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="CERT_CPP-ERR60-b" origId="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="A class type exception shall always be caught by reference" id="CERT_CPP-ERR61-a" origId="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-ERR61" desc="Throw by value, catch by reference" id="CERT_CPP-ERR61-b" origId="EXCEPT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-ERR62" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="CERT_CPP-ERR62-a" origId="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="CERT_CPP-EXP50-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function arguments" id="CERT_CPP-EXP50-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="CERT_CPP-EXP50-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="CERT_CPP-EXP50-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="CERT_CPP-EXP50-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP50" desc="Don't write code that depends on the order of evaluation of function calls" id="CERT_CPP-EXP50-f" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP51" desc="Do not treat arrays polymorphically" id="CERT_CPP-EXP51-a" origId="BD-PB-POLARR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="CERT_CPP-EXP52-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="CERT_CPP-EXP52-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="CERT_CPP-EXP52-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CERT_CPP-EXP52-d" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP52" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CERT_CPP-EXP52-e" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP53" desc="Avoid use before initialization" id="CERT_CPP-EXP53-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="Do not use resources that have been freed" id="CERT_CPP-EXP54-a" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be returned from a function" id="CERT_CPP-EXP54-b" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP54" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="CERT_CPP-EXP54-c" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP55" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="CERT_CPP-EXP55-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CERT_CPP-EXP56" desc="Do not call a function with a mismatched language linkage" id="CERT_CPP-EXP56-a" origId="CODSTA-CPP-96" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Do not delete objects with incomplete class at the point of deletion" id="CERT_CPP-EXP57-a" origId="PB-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP57" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CERT_CPP-EXP57-b" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP58" desc="Use macros for variable arguments correctly" id="CERT_CPP-EXP58-a" origId="BD-PB-VARARGS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP59" desc="Use offsetof() on valid types and members" id="CERT_CPP-EXP59-a" origId="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP60" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="CERT_CPP-EXP60-a" origId="PORT-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never return lambdas that capture local objects by reference" id="CERT_CPP-EXP61-a" origId="CODSTA-MCPP-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="Never capture local objects from an outer lambda by reference" id="CERT_CPP-EXP61-b" origId="CODSTA-MCPP-17_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP61" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CERT_CPP-EXP61-c" origId="CODSTA-MCPP-17_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP62" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CERT_CPP-EXP62-a" origId="CODSTA-CPP-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-EXP63" desc="Do not rely on the value of a moved-from object" id="CERT_CPP-EXP63-a" origId="BD-PB-SUBSEQMOVE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-FIO50" desc="Do not alternately input and output from a stream without an intervening flush or positioning call" id="CERT_CPP-FIO50-a" origId="BD-PB-STREAMINOUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-FIO51" desc="Ensure resources are freed" id="CERT_CPP-FIO51-a" origId="BD-RES-LEAKS" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-INT50" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="CERT_CPP-INT50-a" origId="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM50" desc="Do not use resources that have been freed" id="CERT_CPP-MEM50-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="CERT_CPP-MEM51-a" origId="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="CERT_CPP-MEM51-b" origId="MRM-36" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="CERT_CPP-MEM51-c" origId="MRM-40_d" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM51" desc="Properly deallocate dynamically allocated resources" id="CERT_CPP-MEM51-d" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Check the return value of new" id="CERT_CPP-MEM52-a" origId="MRM-34" sev="1" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM52" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="CERT_CPP-MEM52-b" origId="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM53" desc="Do not invoke malloc/realloc for objects having constructors" id="CERT_CPP-MEM53-a" origId="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="CERT_CPP-MEM54-a" origId="MRM-55" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM54" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="CERT_CPP-MEM54-b" origId="MRM-55_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM55" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="CERT_CPP-MEM55-a" origId="MRM-53" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM56" desc="Do not store an already-owned pointer value in an unrelated smart pointer" id="CERT_CPP-MEM56-a" origId="BD-PB-PTRVALUE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MEM57" desc="Avoid using the default operator 'new' for over-aligned types" id="CERT_CPP-MEM57-a" origId="MRM-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC50" desc="Do not use the rand() function for generating pseudorandom numbers" id="CERT_CPP-MSC50-a" origId="SECURITY-02_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC51" desc="Properly seed pseudorandom number generators" id="CERT_CPP-MSC51-a" origId="BD-SECURITY-RAND" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC52" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="CERT_CPP-MSC52-a" origId="MISRA2004-16_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC53" desc="Never return from functions that should not return" id="CERT_CPP-MSC53-a" origId="BD-PB-NORETURN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-MSC54" desc="Properly define signal handlers" id="CERT_CPP-MSC54-a" origId="BD-PB-SIGHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from constructors" id="CERT_CPP-OOP50-a" origId="OOP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Avoid calling virtual functions from destructors" id="CERT_CPP-OOP50-b" origId="OOP-16_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under construction" id="CERT_CPP-OOP50-c" origId="BD-PB-VCTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP50" desc="Do not use dynamic type of an object under destruction" id="CERT_CPP-OOP50-d" origId="BD-PB-VDTOR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP51" desc="Avoid slicing function arguments / return value" id="CERT_CPP-OOP51-a" origId="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP52" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CERT_CPP-OOP52-a" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP53" desc="List members in an initialization list in the order in which they are declared" id="CERT_CPP-OOP53-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP54" desc="Check for assignment to self in operator=" id="CERT_CPP-OOP54-a" origId="OOP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP55" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CERT_CPP-OOP55-a" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define terminate handlers" id="CERT_CPP-OOP56-a" origId="BD-PB-TERMHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define unexpected handlers" id="CERT_CPP-OOP56-b" origId="BD-PB-UNEXPHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP56" desc="Properly define new handlers" id="CERT_CPP-OOP56-c" origId="BD-PB-NEWHAN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CERT_CPP-OOP57-a" origId="CODSTA-CPP-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP57" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CERT_CPP-OOP57-b" origId="CODSTA-CPP-94" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-OOP58" desc="Copy operations must not mutate the source object" id="CERT_CPP-OOP58-a" origId="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow due to reading a not zero terminated string" id="CERT_CPP-STR50-b" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid overflow when writing to a buffer" id="CERT_CPP-STR50-c" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Prevent buffer overflows from tainted data" id="CERT_CPP-STR50-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Avoid buffer write overflow from tainted data" id="CERT_CPP-STR50-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CERT_CPP-STR50" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="CERT_CPP-STR50-g" origId="SECURITY-51" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CERT_CPP-STR51" desc="Avoid null pointer dereferencing" id="CERT_CPP-STR51-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR52" desc="Use valid references, pointers, and iterators to reference elements of a basic_string" id="CERT_CPP-STR52-a" origId="BD-CO-STRMOD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CERT_CPP-STR53" desc="Guarantee that container indices are within the valid range" id="CERT_CPP-STR53-a" origId="BD-PB-VALRANGE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variable or parameter names and class member variable or parent class/struct member variable names shall differ by more than a single character" id="CODSTA-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid internal or external name conflict with a C++ reserved word" id="CODSTA-39" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Local variables should not use the same names as member variables" id="CODSTA-44" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Parameters should not use the same names as member variables" id="CODSTA-45" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use break in for loops" id="CODSTA-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA" desc="Global functions shall not declare parameters with array type" id="CODSTA-142" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is passed into a function as a parameter" id="CODSTA-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare the size of an array when the array is initialized" id="CODSTA-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="CODSTA-160" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced" id="CODSTA-166_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="CODSTA-166_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="CODSTA-182" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="CODSTA-185_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not specify the bound of a character array initialized with a string literal" id="CODSTA-197" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="EOS should be used to terminate a string rather than NULL" id="CODSTA-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline definition of a function with external linkage shall not contain definitions and uses of static objects" id="CODSTA-202" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Literal suffixes shall use uppercase rather than lowercase letters" id="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Enumeration types shall be used instead of integer types (and constants) as case labels" id="CODSTA-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Array elements shall be accessed by the array operator [ ]" id="CODSTA-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Do not define constants via #define" id="CODSTA-03" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointers to pointers should be avoided whenever possible" id="CODSTA-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using the '?:' operator" id="CODSTA-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has no parameters, use ( ) instead of ( void )" id="CODSTA-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast pointers to functions to pointers to primitive types" id="CODSTA-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Storage type modifiers shall be associated with the type, not the variable or the function" id="CODSTA-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="CODSTA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="CODSTA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A single operation with side-effect shall only be used in the proper context" id="CODSTA-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A call of function with side-effect shall only be used in the proper context" id="CODSTA-103" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="CODSTA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="CODSTA-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The standard header file &lt;tgmath.h> shall not be used" id="CODSTA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="CODSTA-108_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="The Standard Library input/output functions shall not be used" id="CODSTA-110" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The union keyword should not be used" id="CODSTA-111" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Variable-length array types shall not be used" id="CODSTA-112" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Flexible array members shall not be declared" id="CODSTA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembly language shall be encapsulated and isolated in C/C++ functions" id="CODSTA-114" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="CODSTA-116" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Octal and hexadecimal escape sequences shall be terminated" id="CODSTA-117" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A declaration shall be visible when an object or function with external linkage is defined" id="CODSTA-118" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="CODSTA-119" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid using shift operations instead of arithmetic operations" id="CODSTA-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An inline function shall be declared with the static storage class" id="CODSTA-120" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The restrict type qualifier shall not be used" id="CODSTA-121" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_a" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value returned by a function having non-void return type shall be used" id="CODSTA-122_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="CODSTA" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="CODSTA-131" sev="3" total="19" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C90" id="CODSTA-133_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A macro shall not be defined with the same name as a keyword in C99" id="CODSTA-133_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Type casting from any type to or from pointers shall not be used" id="CODSTA-135" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="CODSTA-136_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="CODSTA-136_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function call shall not be the operand of the sizeof operator" id="CODSTA-137" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The result of a built-in assignment operator should not be used" id="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Never convert consts to non-consts" id="CODSTA-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Initializer lists shall not contain persistent side effects" id="CODSTA-141_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="CODSTA-142_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The values returned by functions 'read' and 'readlink' shall be used" id="CODSTA-144" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use of possibly not null-terminated string with functions expecting null-terminated string" id="CODSTA-145" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A value returned from a stdio character-oriented I/O function should not be implicitly converted to a type smaller than 'int'" id="CODSTA-146" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pointer should not be compared with NULL using relational operators &lt;, >, >=, &lt;=" id="CODSTA-147" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use string literals as operands of equality or relational operators" id="CODSTA-148" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Missing break statement between cases in a switch statement" id="CODSTA-149" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain assignments, increment, or decrement operators" id="CODSTA-150" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid side effects in arguments to unsafe macros" id="CODSTA-150_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="CODSTA-152" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="CODSTA-154" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="CODSTA-155" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="CODSTA-156_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="CODSTA-156_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="CODSTA-157" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall have named parameters" id="CODSTA-158" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function types shall be in prototype form" id="CODSTA-159" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="CODSTA-161_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="CODSTA-161_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="CODSTA-161_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="CODSTA-161_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="CODSTA-161_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="CODSTA-161_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="CODSTA-162" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="CODSTA-163_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="CODSTA-163_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="CODSTA-164_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second and third operands of the ternary operator shall have the same essential type category" id="CODSTA-164_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast from or to essentially Boolean type" id="CODSTA-165_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="CODSTA-167_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="CODSTA-167_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The first clause of a 'for' loop shall be well-formed" id="CODSTA-169_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second clause of a 'for' loop shall be well-formed" id="CODSTA-169_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The third clause of a 'for' statement shall be well-formed" id="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use NULL identifier; use 0 instead" id="CODSTA-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="CODSTA-170_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="CODSTA-170_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="CODSTA-171_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="CODSTA-171_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="CODSTA-172_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="CODSTA-172_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="CODSTA-174_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="CODSTA-174_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="External identifiers shall be distinct" id="CODSTA-178" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="CODSTA-179_a_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="CODSTA-179_a_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="CODSTA-179_b_c90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="CODSTA-179_b_c99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Identifiers that define objects or functions with external linkage shall be unique" id="CODSTA-180" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="CODSTA-183" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="CODSTA-184" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="CODSTA-185_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="CODSTA-186" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before assignment to larger integer sizes" id="CODSTA-187_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An expressions of the 'signed char' type should not be used as an array index" id="CODSTA-187_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast characters to unsigned char before converting to larger integer sizes" id="CODSTA-187_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not confuse narrow and wide character strings and functions" id="CODSTA-188" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not add or subtract a scaled integer to a pointer" id="CODSTA-189" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use the ctype.h facilities for character test" id="CODSTA-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use object representations to compare floating-point values" id="CODSTA-190" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can spuriously wake up in a loop" id="CODSTA-191" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final member of a structure should not be an array of size '0' or '1'" id="CODSTA-192" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Allocate structures containing a flexible array member dynamically" id="CODSTA-193" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Wrap functions that can fail spuriously in a loop" id="CODSTA-194" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not refer to an atomic variable twice in an expression" id="CODSTA-195" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not access an array in the result of a function call" id="CODSTA-196" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The value of a complex expression of floating type should not be cast to an integer type" id="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use assertions" id="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Explicitly specify array bounds in array declarations with initializers" id="CODSTA-200" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not process structured text data natively" id="CODSTA-201" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Functions declared as 'noreturn' shall have the 'void' return type" id="CODSTA-204" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not cast an array to the pointer to a structure of a larger size than the size of the array" id="CODSTA-205" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Noreturn' function specifier should not be used" id="CODSTA-206" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdnoreturn.h> header file should not be used" id="CODSTA-207" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The &lt;stdalign.h> header file shall not be used" id="CODSTA-208" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="CODSTA-209" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Thread_local' storage class specifier should not be used" id="CODSTA-210" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="CODSTA-211" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'rsize_t' type should not be used" id="CODSTA-212" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="CODSTA-213" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="CODSTA-214" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="CODSTA-215" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The '_Generic' operator should not be used" id="CODSTA-216" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The 'errno_t' type should not be used" id="CODSTA-217" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="CODSTA-218" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="CODSTA-219" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Arguments of integer-constant macros should be decimal, octal, or hexadecimal constants with appropriate values" id="CODSTA-220" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not include any type qualifiers in the specification of a function type" id="CODSTA-221" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid implicit integral conversions from a wider to a narrower type" id="CODSTA-222" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="CODSTA" desc="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" id="CODSTA-223" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The conditional operator should not be used as a sub-expression" id="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="All 'if' statements should have an 'else' clause" id="CODSTA-23" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid magic numbers" id="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid functions that modify global variables" id="CODSTA-27" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="&quot;#define&quot; or enum constants should be used instead of hard coded values whenever possible" id="CODSTA-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid returning handles to function parameters" id="CODSTA-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Avoid explicit type conversions (casts)" id="CODSTA-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not write logical expressions of the type if(test) or if(!test)  when test is a pointer" id="CODSTA-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use operator ++ or -- in the conditional expression of if, while, or switch" id="CODSTA-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use a typedef to simplify program syntax when declaring function pointers" id="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Always provide a default branch for switch statements" id="CODSTA-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Pass built-in-types by value unless you are modifying them" id="CODSTA-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="Prefer const objects or enums to #defines for simple constants" id="CODSTA-37" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use a #define that prevents the compiler from checking types" id="CODSTA-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="'void' should be used when a function is passed or returns no values" id="CODSTA-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All structures should be typedef'd" id="CODSTA-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hexadecimal constants will be represented using all uppercase letters" id="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Every switch statement will have at least two cases and a potential default" id="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'case' and 'default' labels of 'switch' statement should have an explicit 'break' or a 'return' statement, or 'fall through' comment" id="CODSTA-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid comparing values with TRUE macro/enum constant using equality operators (&quot;==&quot;, &quot;!=&quot;)" id="CODSTA-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The final clause of a switch statement shall be the default-clause unless all enumeration values are tested" id="CODSTA-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="CODSTA-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="CODSTA-65" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="CODSTA-66" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="CODSTA-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="CODSTA-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than  =,  ==, != and the unary &amp; operator" id="CODSTA-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Expressions with type enum shall not be used as operands to built-in operators other than  [ ],  =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="CODSTA-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assembler instructions shall only be introduced using the asm declaration" id="CODSTA-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall not have enum type" id="CODSTA-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="CODSTA-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The identifier main shall not be used for a function other than the global function main" id="CODSTA-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The goto statement shall jump to a label declared later in the same function body" id="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="CODSTA-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The continue statement shall only be used within a well formed for loop" id="CODSTA-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a function has internal linkage then all re-declarations shall include the 'static' storage class specifier" id="CODSTA-81" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid infinite loops" id="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use empty infinite loops" id="CODSTA-82_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA" desc="All loops must have a fixed upper or lower bound" id="CODSTA-83" sev="3" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid exit points within infinite loops" id="CODSTA-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="CODSTA" desc="The validity of parameters must be checked inside each function" id="CODSTA-86" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use no more than one level of dereferencing" id="CODSTA-87" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Function pointers are not permitted" id="CODSTA-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="The declaration should not contain more than one level of pointer indirection" id="CODSTA-89" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Each operand of a logical '&amp;&amp;' or '||' shall be a postfix-expression" id="CODSTA-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function shall have at most one exit point" id="CODSTA-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library macros and objects shall not be reused" id="CODSTA-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="CODSTA-92_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="30;" authUrg="2;" cat="CODSTA" desc="Do not declare pointer or array type" id="CODSTA-94" sev="3" total="30" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="30;" authUrg="2;" cat="CODSTA" desc="Do not declare pointer type" id="CODSTA-95" sev="3" total="30" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="CODSTA-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Signed and unsigned values shall not be mixed in comparison operations" id="CODSTA-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="CODSTA-105" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The exception handling features of &lt;fenv.h> should not be used" id="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object and an integer type" id="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A conversion should not be performed from pointer to void into pointer to object" id="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function parameter should not be modified" id="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="CODSTA-134" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use enumerations in boolean condition" id="CODSTA-151" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The cast operation to essentially enumeration type is not allowed" id="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not use casts between essentially character types and essentially floating types" id="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused type declarations" id="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused type declarations" id="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A function should not contain unused local tag declarations" id="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused tag declarations" id="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="A source file should not contain unused macro definitions" id="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Avoid switch statements with only one case" id="CODSTA-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Suspicious use of semicolon" id="CODSTA-57" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Cast to void is not allowed" id="CODSTA-58" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Hardcoded array declarations and 'malloc' calls should not be used" id="CODSTA-59" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare member variables as bit-fields" id="CODSTA-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Do not declare local variables with the 'static' keyword" id="CODSTA-04" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assert liberally to document internal assumptions and invariants" id="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Assertions should not contain function calls nor function-like macro calls" id="CODSTA-150_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Prefer while statements over do statements" id="CODSTA-18" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CODSTA" desc="Do not hard code string literals" id="CODSTA-203" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="When using enum, the values of each member should be explicitly declared" id="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro FALSE should be defined as 0 (zero)" id="CODSTA-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'FALSE' should be explicitly initialized by 0 value" id="CODSTA-25" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="Define fields for union declarations" id="CODSTA-28" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The macro TRUE should be defined as 1" id="CODSTA-42" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The enumeration constant named 'TRUE' should be explicitly initialized by 1 value" id="CODSTA-43" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA" desc="Use positive logic rather than negative logic whenever practical" id="CODSTA-46" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA" desc="The names of standard library functions shall not be overridden" id="CODSTA-93" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Constructors allowing for conversion should be made explicit" id="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use user-defined conversion functions" id="CODSTA-CPP-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The first operand of a conditional-operator shall have type bool" id="CODSTA-CPP-65" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Declare at least one constructor to prevent the compiler from doing so" id="CODSTA-CPP-19" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Arrays shall not be used in interfaces" id="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Private and protected methods shall not declare parameters with array type" id="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Copy operations must not mutate the source object" id="CODSTA-CPP-98" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have assignment operator returns a reference to *this; make assignment operator's return type a non-const reference to it's class' type" id="CODSTA-CPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Bitwise operators, comparison operators, logical operators, comma operator should be const" id="CODSTA-CPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid returning handles to class data from member functions" id="CODSTA-CPP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Postfix increment and decrement should be implemented in terms of their prefix counterparts" id="CODSTA-CPP-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using reinterpret_cast" id="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define structs that contain member functions" id="CODSTA-CPP-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of a class that may contain padding bits with C standard library functions" id="CODSTA-CPP-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A relational operator shall return a boolean value" id="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Output parameters shall not be used" id="CODSTA-CPP-103" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use delegating constructors to reduce code duplication" id="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions" id="CODSTA-CPP-107" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Comparison operators shall be non-member functions with identical parameter types and noexcept" id="CODSTA-CPP-107_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer C++-style casts" id="CODSTA-CPP-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as base classes and classes that are used as member variables into separate include files" id="CODSTA-CPP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as function return type into separate include files" id="CODSTA-CPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put classes that are used as argument types in function prototypes into separate include files" id="CODSTA-CPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Put functions that are used in the body of inline member function into separate include file" id="CODSTA-CPP-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When two operators are opposites (such as == and !=), it is appropriate to define both" id="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'struct' keyword to declare a variable in C++" id="CODSTA-CPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If you'd like to support mixed-mode operations make operators a non-member functions" id="CODSTA-CPP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid making any assignment operator virtual. Do not return const T&amp; from assignment operator" id="CODSTA-CPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider making virtual functions nonpublic, and public functions nonvirtual" id="CODSTA-CPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep types and functions in separate namespaces unless they're specifically intended to work together" id="CODSTA-CPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Keep a type and its nonmember function interface in the same namespace" id="CODSTA-CPP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="When binary arithmetic operators are defined  ( + , - , * , / , ^ , % , | , &amp; ), assignment versions should be provided too" id="CODSTA-CPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer the canonical forms of arithmetic and assignment operators" id="CODSTA-CPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member operators than member ones to support mixed-mode arithmetic" id="CODSTA-CPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A function definition should not be placed in a class specification unless the function is intended to be inlined" id="CODSTA-CPP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall not be defined within the template class definition" id="CODSTA-CPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid using static_cast on pointers" id="CODSTA-CPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid dynamic_casts" id="CODSTA-CPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="CODSTA-CPP" desc="The global namespace shall only contain main() and namespace declarations" id="CODSTA-CPP-36" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define class/struct/union inside function implementation" id="CODSTA-CPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Conversion operator, operator->, operator(), operator[] should be const" id="CODSTA-CPP-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Don't write namespace usings in a header file or before an #include" id="CODSTA-CPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the 'enum' keyword to declare a variable in C++" id="CODSTA-CPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not declare member variables with the 'mutable' keyword" id="CODSTA-CPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Declare reference parameters as const references whenever possible" id="CODSTA-CPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Have the non-const version call the const version of member function instead of duplicating the const version definition" id="CODSTA-CPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the private section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in class: public before all others" id="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Order of scopes in classes: protected before private" id="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the protected section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="In the public section of a class items shall be declared in the following order: Constructors, Destructor, Member Functions, Member Operator Function, Enumerations and others" id="CODSTA-CPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use static keyword except inside functions and classes" id="CODSTA-CPP-50" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not define inline functions in source files" id="CODSTA-CPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Consider using the natural relationship between the assignment version of an operator and the stand-alone version" id="CODSTA-CPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-CPP" desc="Declare parameters or local variable as const whenever possible" id="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Member functions shall be declared const whenever possible" id="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Namespaces will not be nested more than two levels deep" id="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-CPP" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="CODSTA-CPP-58" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="The C library shall not be used" id="CODSTA-CPP-59" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="CODSTA-CPP-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Only those escape sequences that are defined in ISO/IEC 14882:2014 shall be used" id="CODSTA-CPP-60_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="NULL shall not be used as an integer value" id="CODSTA-CPP-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="CODSTA-CPP-63" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="CODSTA-CPP-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="CODSTA-CPP-66" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-CPP" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="CODSTA-CPP-67" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The unary &amp; operator shall not be overloaded" id="CODSTA-CPP-68" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="CODSTA-CPP-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="CODSTA-CPP-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="CODSTA-CPP-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="CODSTA-CPP-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="A loop-control-variable other than the loop-counter which is modified in statement shall have type bool" id="CODSTA-CPP-73" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="There shall be no unnamed namespaces in header files" id="CODSTA-CPP-74" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives shall not be used" id="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="CODSTA-CPP-76" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Const member functions shall not return non-const pointers or references to class-data" id="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="CODSTA-CPP-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid overloading comma operator &quot;,&quot;" id="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="CODSTA-CPP" desc="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" id="CODSTA-CPP-82" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If two opposite equality operators ('==', '!=') are defined in a class, one shall be defined in terms of the other" id="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="CODSTA-CPP-87_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The name of typedef should not be the same as the name of its basic type" id="CODSTA-CPP-88" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="CODSTA-CPP-90" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="CODSTA-CPP-92" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not initialize objects with a non-trivial class type using C standard library functions" id="CODSTA-CPP-93" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not compare objects of nonstandard-layout class type with C standard library functions" id="CODSTA-CPP-94" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not modify the standard namespaces 'std' and 'posix'" id="CODSTA-CPP-95" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="CODSTA-CPP" desc="Do not call a function with a mismatched language linkage" id="CODSTA-CPP-96" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Never qualify a reference type with 'const' or 'volatile'" id="CODSTA-CPP-97" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Use offsetof() on valid types and members" id="CODSTA-CPP-99" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer non-member non-friend functions to member functions" id="CODSTA-CPP-22" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not assign enumerations to bool" id="CODSTA-CPP-89" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-CPP" desc="Prefer iostream.h to stdio.h" id="CODSTA-CPP-01" sev="5" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="5;" authUrg="0;" cat="CODSTA-CPP" desc="Encapsulate global variables and constants, enumerated types, and typedefs in a class" id="CODSTA-CPP-18" sev="5" total="5" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Assignment operator must return const reference" id="CODSTA-CPP-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="CODSTA-CPP" desc="Whenever a global function  is  referenced, use the :: operator" id="CODSTA-CPP-23" sev="5" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Do not use the keyword 'explicit' for a constructor" id="CODSTA-CPP-31" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-CPP" desc="Limiting the number of objects of a class" id="CODSTA-CPP-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer lambdas over std::bind, std::bind1st and std::bind2nd" id="CODSTA-MCPP-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names in variable declarations" id="CODSTA-MCPP-08_a" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="2;" cat="CODSTA-MCPP" desc="Prefer 'auto' to explicit type names for function return types" id="CODSTA-MCPP-08_b" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="All std::hash specializations for user-defined types shall have a noexcept function call operator" id="CODSTA-MCPP-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-conversion cast operators should be made explicit" id="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer alias declarations to typedefs" id="CODSTA-MCPP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer Scoped Enums to Unscoped Enums" id="CODSTA-MCPP-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Each overriding virtual function shall be declared with the override or final specifier" id="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier to prevent copying of class" id="CODSTA-MCPP-06_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare copy constructor and copy assignment operators with the 'delete' specifier instead of using a base class with private methods to prevent copying of class" id="CODSTA-MCPP-06_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'binder1st' and 'binder2nd' identifiers should not be used" id="CODSTA-MCPP-07_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare functions 'noexcept' if they will not emit exceptions" id="CODSTA-MCPP-09" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer const iterators to iterators" id="CODSTA-MCPP-10_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use cbegin(), crbegin, cend(), crend() functions" id="CODSTA-MCPP-10_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::move() on rvalue references and std::forward() on forwarding references" id="CODSTA-MCPP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'std::forward' function shall be used to forward universal references" id="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid Overloading on Forwarding References" id="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid default capture modes" id="CODSTA-MCPP-15_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use the 'this' pointer explicitly in lambdas with a default by-reference capture" id="CODSTA-MCPP-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'std::make_shared' to the direct use of new" id="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer to use std::unique_ptr instead of std::auto_ptr" id="CODSTA-MCPP-16_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="'std::make_unique' shall be used to construct objects owned by 'std::unique_ptr'" id="CODSTA-MCPP-16_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never return lambdas that capture local objects by reference" id="CODSTA-MCPP-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Never capture local objects from an outer lambda by reference" id="CODSTA-MCPP-17_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The lambda that captures local objects by reference should not be assigned to the variable with a greater lifetime" id="CODSTA-MCPP-17_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary default capture modes in lambda expressions" id="CODSTA-MCPP-18_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid unnecessary lambda captures" id="CODSTA-MCPP-18_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Declare assignment operators with the ref-qualifier &amp;" id="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use explicit ref-qualifiers on auto declarations in range-based 'for' loops" id="CODSTA-MCPP-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="If a public destructor of a class is non-virtual, then the class should be declared final" id="CODSTA-MCPP-23" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Only one of virtual, override or final should be specified in a member function declaration" id="CODSTA-MCPP-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Digit sequences separators ' shall only be used consistently" id="CODSTA-MCPP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A lambda shall not be an operand to typeid" id="CODSTA-MCPP-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use smart pointers when passing a pointer to an object in a thread" id="CODSTA-MCPP-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Consider using 'std::unique_ptr' instead of 'std::shared_ptr' for local objects" id="CODSTA-MCPP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Define both sized and unsized versions of operator delete" id="CODSTA-MCPP-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CODSTA-MCPP" desc="Static and thread-local objects shall be constant-initialized" id="CODSTA-MCPP-32" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User defined literals operators shall only perform conversion of passed parameters" id="CODSTA-MCPP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A smart pointer shall only be used as a parameter type if it expresses lifetime semantics" id="CODSTA-MCPP-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A parameter should only be declared as a non-const lvalue reference to 'std::shared_ptr' or 'std::unique_ptr' if the function replaces the managed object" id="CODSTA-MCPP-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not declare the type of a parameter as an rvalue reference to 'std::shared_ptr' or 'std::unique_ptr'" id="CODSTA-MCPP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Derived classes that do not need further explicit initialization and require all the constructors from the base class shall use inheriting constructors" id="CODSTA-MCPP-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="2;" cat="CODSTA-MCPP" desc="Braced-initialization {}, without equals sign, shall be used for variable initialization" id="CODSTA-MCPP-38" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A variable of type auto shall not be initialized using '{}' or '={}' braced-initialization" id="CODSTA-MCPP-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not overuse 'auto' specifier" id="CODSTA-MCPP-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'random_shuffle' identifier should not be used" id="CODSTA-MCPP-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="The 'set_unexpected' identifier should not be used" id="CODSTA-MCPP-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Lambda expressions should not be defined inside another lambda expression" id="CODSTA-MCPP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Return type of a non-void return type lambda expression should be explicitly specified" id="CODSTA-MCPP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Include a parameter list in every lambda expression" id="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Avoid overloading constructors with std::initializer_list" id="CODSTA-MCPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Multiple output values from a function should be returned as a struct or tuple" id="CODSTA-MCPP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use const container calls when the result is immediately converted to a const iterator" id="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not introduce virtual functions in a final class" id="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not use std::move on objects declared with the const or const &amp; type" id="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not create an rvalue reference of std::array" id="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="CODSTA-MCPP-04" sev="4" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare const variables whenever possible" id="CODSTA-MCPP-11_a_cpp11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="CODSTA-MCPP" desc="Use constexpr to declare functions whenever possible" id="CODSTA-MCPP-11_b_cpp11" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointer members over raw pointer members" id="CODSTA-MCPP-16_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw pointers for arrays or STL containers" id="CODSTA-MCPP-16_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Prefer smart pointers over raw local pointers" id="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CODSTA-MCPP" desc="Do not call lock() directly on a mutex" id="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Line-splicing shall not be used in // comments" id="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Prefer C++ style comment" id="COMMENT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Provide copyright information" id="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="COMMENT" desc="Every source file will be documented with an introductory comment that provides information on the file" id="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="1;" cat="COMMENT" desc="Document functions in comments that precede function definitions" id="COMMENT-04" sev="3" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Document functions in comments that precede function declarations" id="COMMENT-04_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="COMMENT" desc="Each variable declaration should be commented" id="COMMENT-05" sev="3" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each typedef should be commented" id="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each enumeration value should be commented" id="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="Each structure member variable should be commented" id="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="All usage of assembler shall be documented" id="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="COMMENT" desc="Use of floating-point arithmetic shall be documented" id="COMMENT-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence // shall not be used within a C-style comment" id="COMMENT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="COMMENT" desc="The character sequence /* shall not be used within a C++-style comment" id="COMMENT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="12;" authUrg="1;" cat="COMMENT" desc="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" id="COMMENT-14" sev="3" total="12" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="3;" cat="COMMENT" desc="Function parameters and return type should be documented in a comment that precedes the function declaration" id="COMMENT-14_b" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-119-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when reading from a buffer" id="CWE-119-d" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid overflow when writing to a buffer" id="CWE-119-e" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid tainted data in array indexes" id="CWE-119-f" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Prevent buffer overflows from tainted data" id="CWE-119-g" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer read overflow from tainted data" id="CWE-119-h" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid buffer write overflow from tainted data" id="CWE-119-i" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays out of bounds" id="CWE-119-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-119-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-119" desc="Suspicious use of 'strcpy' without checking size of source buffer" id="CWE-119-j" origId="CODSTA-143" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-119" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-119-k" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid overflow when reading from a buffer" id="CWE-125-c" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid buffer read overflow from tainted data" id="CWE-125-d" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays out of bounds" id="CWE-125-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-125" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-125-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid integer overflows" id="CWE-190-a" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="CWE-190-b" origId="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="CWE-190-c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="CWE-190-d" origId="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="CWE-190-e" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="CWE-190-f" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-190" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="CWE-190-g" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid tainted data in array indexes" id="CWE-20-a" origId="BD-SECURITY-ARRAY" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against integer overflow/underflow from tainted data" id="CWE-20-b" origId="BD-SECURITY-INTOVERF" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against command injection" id="CWE-20-d" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid printing tainted data on the output console" id="CWE-20-e" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against environment injection" id="CWE-20-f" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Exclude unsanitized user input from format strings" id="CWE-20-g" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against SQL injection" id="CWE-20-h" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Protect against file name injection" id="CWE-20-i" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-20" desc="Avoid passing unvalidated binary data to log methods" id="CWE-20-c" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="CWE-20" desc="Untrusted data is used as a loop boundary" id="CWE-20-j" origId="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-200" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="CWE-200-a" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-22" desc="Protect against file name injection" id="CWE-22-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Observe correct revocation order while relinquishing privileges" id="CWE-269-a" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-269" desc="Ensure that privilege relinquishment is successful" id="CWE-269-b" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-287" desc="Do not use weak encryption functions" id="CWE-287-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-326" desc="Do not use weak encryption functions" id="CWE-326-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions when using fork and file descriptors" id="CWE-362-d" origId="BD-TRS-FORKFILE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Do not use global variable with different locks set" id="CWE-362-e" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-362" desc="Usage of functions prone to race is not allowed" id="CWE-362-a" origId="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Avoid race conditions while accessing files" id="CWE-362-b" origId="BD-TRS-FRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-362" desc="Use locks to prevent race conditions when modifying bit fields" id="CWE-362-c" origId="BD-TRS-BITLOCK" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-400" desc="Do not create variables on the stack above the defined limits" id="CWE-400-a" origId="BD-RES-STACKLIM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-415" desc="Do not use resources that have been freed" id="CWE-415-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not use resources that have been freed" id="CWE-416-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-416" desc="Do not point to a wrapped object that has been freed" id="CWE-416-b" origId="BD-PB-WRAPESC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-416" desc="Freed memory shouldn't be accessed under any circumstances" id="CWE-416-c" origId="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-426" desc="Use care to ensure that LoadLibrary() will load the correct library" id="CWE-426-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-476" desc="Avoid null pointer dereferencing" id="CWE-476-a" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-476" desc="Do not check for null after dereferencing" id="CWE-476-b" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-532" desc="Avoid passing sensitive data to functions that write to log files" id="CWE-532-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-611" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="CWE-611-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-617" desc="Do not use assertions" id="CWE-617-a" origId="CODSTA-199" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="CWE-704-a" origId="CODSTA-124_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between non compatible pointer to a function types" id="CWE-704-b" origId="CODSTA-124_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="CWE-704-c" origId="CODSTA-125" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="CWE-704-d" origId="CODSTA-126" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="CWE-704-g" origId="CODSTA-129_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="An implicit conversion shall not be performed between pointer to void and an arithmetic type" id="CWE-704-h" origId="CODSTA-129_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="CWE-704-i" origId="CODSTA-130" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="CWE-704-j" origId="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="CWE-704-k" origId="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="CWE-704-l" origId="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed between a pointer to object type and an integer type other than 'uintptr_t' or 'intptr_t'" id="CWE-704-e" origId="CODSTA-127_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-704" desc="A conversion should not be performed from pointer to void into pointer to object" id="CWE-704-f" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="CWE-732-b" origId="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-732" desc="Call 'umask' before calling 'mkstemp'" id="CWE-732-a" origId="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-770" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="CWE-770-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="CWE-772" desc="Ensure resources are freed" id="CWE-772-a" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-772" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="CWE-772-b" origId="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-78" desc="Protect against command injection" id="CWE-78-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer overflow due to defining incorrect format limits" id="CWE-787-c" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid overflow when writing to a buffer" id="CWE-787-d" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Prevent buffer overflows from tainted data" id="CWE-787-e" origId="BD-SECURITY-BUFWRITE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid buffer write overflow from tainted data" id="CWE-787-f" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays out of bounds" id="CWE-787-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Avoid accessing arrays and pointers out of bounds" id="CWE-787-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-787" desc="Ensure the output buffer is large enough when using path manipulation functions" id="CWE-787-g" origId="BD-PB-PATHBUF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="2;" cat="CWE-798" desc="Do not hard code string literals" id="CWE-798-a" origId="CODSTA-203" sev="5" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-835" desc="Avoid infinite loops" id="CWE-835-a" origId="CODSTA-82" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="CWE-863" desc="Do not use 'cuserid' function" id="CWE-863-a" origId="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="CWE-89" desc="Protect against SQL injection" id="CWE-89-a" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="EXCEPT-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Throw by value, catch by reference" id="EXCEPT-02" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not throw from within destructor" id="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="EXCEPT-11" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All exceptions should be rethrown or logged with standard logger" id="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="EXCEPT" desc="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" id="EXCEPT-05" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="EXCEPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="Exceptions shall be raised only after start-up and before termination of the program" id="EXCEPT-08" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="EXCEPT" desc="An exception object should not have pointer type" id="EXCEPT-09" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="EXCEPT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="NULL shall not be thrown explicitly" id="EXCEPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="EXCEPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="EXCEPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="A class type exception shall always be caught by reference" id="EXCEPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="EXCEPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Exception objects must be nothrow copy constructible" id="EXCEPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="An explicitly declared copy constructor for a class that inherits from 'std::exception' should have a non-throwing exception specification" id="EXCEPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Checked exceptions that could be thrown from a function shall be specified in the comment directly before the function declaration" id="EXCEPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not use throw exception specifications" id="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Where multiple handlers are provided in a single 'try-catch' statement or 'function-try-block', any ellipsis (catch-all) handler shall occur last" id="EXCEPT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Do not leave 'catch' blocks empty" id="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="EXCEPT" desc="Avoid using catch-all exception handlers" id="EXCEPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Place an opening brace '{' on its own line" id="FORMAT-02" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place a closing brace '}' on its own line" id="FORMAT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="FORMAT" desc="Physical lines should be less than eighty characters" id="FORMAT-04" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The length of a macro should not exceed 10 lines" id="FORMAT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Only one statement shall be allowed per line" id="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding assignment operators" id="FORMAT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following assignment operators" id="FORMAT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding bitwise operators" id="FORMAT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following bitwise operators" id="FORMAT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following bitwise operator '&amp;'" id="FORMAT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" id="FORMAT-12" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a maximum of 1 ASCII space character following the opening parenthesis in conditional statements" id="FORMAT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding ternary conditional operator" id="FORMAT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following ternary conditional operator" id="FORMAT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following relational and equality operators" id="FORMAT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space following '.' or '->' operator" id="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white space preceding '.' or '->' operator" id="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all commas" id="FORMAT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character following all semicolons" id="FORMAT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;!&quot; or &quot;~&quot; and its operand" id="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a increment/decrement operator (++/--) and its operand" id="FORMAT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no white spaces between the 'return' statement or the 'sizeof' operator and the following opening parenthesis" id="FORMAT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no spaces after the opening '(' and before closing ')' parenthesis that enclose the operand of the 'return' statement or the 'sizeof' operator" id="FORMAT-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="FORMAT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="Parenthesis shall be used with the &quot;return&quot; statement" id="FORMAT-25_b" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be a single ASCII space character preceding and following logical operators" id="FORMAT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Line should be indented by a multiple of four spaces" id="FORMAT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="FORMAT" desc="In a function definition, the return type of the function should be written on a separate line directly above the function name" id="FORMAT-28" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="FORMAT" desc="Multiple variable declarations shall not be allowed on the same line" id="FORMAT-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Place left parenthesis directly after function name" id="FORMAT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Separate logical tests in conditional expressions" id="FORMAT-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="FORMAT" desc="Each variable should be declared in a separate declaration statement" id="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces &quot;{}&quot; which enclose a block should be placed in the same column" id="FORMAT-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions, the leading parenthesis and the first argument are to be written on the same line as the function name" id="FORMAT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sibling statement lines should be indented to the same level" id="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="First line in control statement body should be indented more than control statement keyword" id="FORMAT-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="FORMAT-43" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="FORMAT-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between a unary operator &quot;&amp;&quot;, &quot;*&quot;, &quot;+&quot;, &quot;-&quot; and its operand" id="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="FORMAT" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="FORMAT-47_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="CV-qualifiers shall be placed on the right hand side of the type that is a typedef or a using name" id="FORMAT-47_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Parameter names in function declarations should not be enclosed in parentheses" id="FORMAT-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Local variable names in variable declarations should not be enclosed in parentheses" id="FORMAT-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="FORMAT" desc="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" id="FORMAT-32" sev="4" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="Sort #include directives in alphabetical order" id="FORMAT-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="FORMAT" desc="Tabs that do not use ASCII spaces shall not be used" id="FORMAT-01" sev="5" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="White spaces after the opening square bracket '[' and before its closing square bracket ']' shall be used in consistent way" id="FORMAT-40" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="FORMAT" desc="There shall be no space between '[' opening square bracket and preceding token" id="FORMAT-41" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All declarations of an object or function shall have compatible types" id="GLOBAL-COMPATDECLS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Do not use more than one mutex for concurrent waiting operations on a condition variable" id="GLOBAL-CONDMUTEXVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="GLOBAL-EXCSPECDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The One Definition Rule shall not be violated" id="GLOBAL-ONEDEFRULE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="An identifier with external linkage shall have exactly one external definition" id="GLOBAL-ONEEXTERNDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain non-volatile POD variables having only one use" id="GLOBAL-ONEUSEVAR" sev="3" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member object with static storage duration shall not be reused within a namespace" id="GLOBAL-REUSEDQUALGLOBVAR" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="The identifier name of a non-member static function shall not be reused within a namespace" id="GLOBAL-REUSEDQUALSTATFUN" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one" id="GLOBAL-TEMPLNOINST" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="GLOBAL-UNIQUETYPEDEF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="GLOBAL" desc="Every defined function with external linkage shall be used at least once" id="GLOBAL-UNUSEDFUNC" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A project shall not contain unused type declarations" id="GLOBAL-UNUSEDTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="GLOBAL-UNUSEDVIRTPARAM" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="GLOBAL-VIRTBASECLASS" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="GLOBAL" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_1_1" desc="For multiple inheritance use virtual common base class" id="HICPP-10_1_1-a" origId="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_2_1" desc="Each overriding virtual function shall be declared with the override or final specifier" id="HICPP-10_2_1-a" origId="CODSTA-MCPP-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-10_3_1" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="HICPP-10_3_1-a" origId="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid &quot;public&quot; data members" id="HICPP-11_1_1-a" origId="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_1_1" desc="Avoid 'protected' data members" id="HICPP-11_1_1-b" origId="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-11_2_1" desc="Avoid using the friend mechanism" id="HICPP-11_2_1-a" origId="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="Constructors allowing for conversion should be made explicit" id="HICPP-12_1_1-a" origId="CODSTA-CPP-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_1_1" desc="User-conversion cast operators should be made explicit" id="HICPP-12_1_1-b" origId="CODSTA-MCPP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_2_1" desc="Make destructors virtual in base classes" id="HICPP-12_2_1-a" origId="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete if you write operator new" id="HICPP-12_3_1-a" origId="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_3_1" desc="Write operator delete[] if you write operator new[]" id="HICPP-12_3_1-b" origId="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under construction" id="HICPP-12_4_1-b" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-12_4_1" desc="Do not use dynamic type of an object under destruction" id="HICPP-12_4_1-c" origId="BD-PB-VDTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_2" desc="All member variables should be initialized in constructor" id="HICPP-12_4_2-a" origId="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_3" desc="Do not specify both an NSDMI and a member initializer in a constructor for the same non-static member" id="HICPP-12_4_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_4" desc="List members in an initialization list in the order in which they are declared" id="HICPP-12_4_4-a" origId="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_4_5" desc="Use delegating constructors to reduce code duplication" id="HICPP-12_4_5-a" origId="CODSTA-CPP-106" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-12_5_1" desc="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" id="HICPP-12_5_1-a" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_2" desc="Define special members as =default when the behavior is equivalent to the compiler's behavior" id="HICPP-12_5_2-a" origId="CODSTA-CPP-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_3" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="HICPP-12_5_3-a" origId="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_4" desc="All user-provided move constructors and move assignment operators shall not exit with an exception" id="HICPP-12_5_4-a" origId="EXCEPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_6" desc="User-defined copy and move assignment operators should use user-defined no-throw swap function" id="HICPP-12_5_6-a" origId="CODSTA-MCPP-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_7" desc="Declare assignment operators with the ref-qualifier &amp;" id="HICPP-12_5_7-a" origId="CODSTA-MCPP-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-12_5_8" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="HICPP-12_5_8-a" origId="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_1" desc="Write a using declaration to redeclare overloaded functions" id="HICPP-13_1_1-a" origId="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_1_2" desc="Avoid Overloading on Forwarding References" id="HICPP-13_1_2-a" origId="CODSTA-MCPP-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading logical operators AND, OR (&amp;&amp;, ||)" id="HICPP-13_2_1-a" origId="CODSTA-CPP-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_1" desc="Avoid overloading comma operator &quot;,&quot;" id="HICPP-13_2_1-b" origId="CODSTA-CPP-80" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A relational operator shall return a boolean value" id="HICPP-13_2_2-a" origId="CODSTA-CPP-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_2" desc="A binary arithmetic operator and a bitwise operator shall return a 'prvalue'" id="HICPP-13_2_2-b" origId="CODSTA-CPP-102" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_3" desc="Declare binary arithmetic and bitwise operators as non-members" id="HICPP-13_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_4" desc="When overloading the subscript operator (operator[]), implement both const and non-const versions" id="HICPP-13_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-13_2_5" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="HICPP-13_2_5-a" origId="CODSTA-CPP-91" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_1_1" desc="Do not use functions with variable numbers of arguments" id="HICPP-14_1_1-a" origId="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_1" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="HICPP-14_2_1-a" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_2" desc="Overloaded function templates shall not be explicitly specialized" id="HICPP-14_2_2-a" origId="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-14_2_3" desc="Declare 'extern' an explicitly instantiated template" id="HICPP-14_2_3-a" origId="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_1_1" desc="Only use instances of std::exception for exceptions" id="HICPP-15_1_1-a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_1_1" desc="Always throw the created std::exception object" id="HICPP-15_1_1-b" origId="BD-PB-STDEXC" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_2_1" desc="Do not throw from within destructor" id="HICPP-15_2_1-a" origId="EXCEPT-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-15_3_1" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference nonstatic members from this class or its bases" id="HICPP-15_3_1-a" origId="EXCEPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Always catch exceptions" id="HICPP-15_3_2-a" origId="BD-PB-EXCEPT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-15_3_2" desc="Avoid throwing exceptions from functions that are declared not to throw" id="HICPP-15_3_2-c" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-15_3_2" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="HICPP-15_3_2-b" origId="EXCEPT-06" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="HICPP-16_1_1" desc="Avoid using macro definitions" id="HICPP-16_1_1-a" origId="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-b" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="HICPP-16_1_1-c" origId="PREPROC-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="Use multiple include guards" id="HICPP-16_1_1-d" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-e" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-16_1_1" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="HICPP-16_1_1-f" origId="PREPROC-10_c" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#error directive shall not be used" id="HICPP-16_1_1-g" origId="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="The #pragma directive shall not be used" id="HICPP-16_1_1-h" origId="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_1" desc="#undef shall not be used" id="HICPP-16_1_1-i" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="Do not allow absolute or relative path names in #include statements" id="HICPP-16_1_2-a" origId="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_2" desc="The \ character should not occur in a header file name" id="HICPP-16_1_2-b" origId="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_3" desc="Match the filename in a #include directive to the one on the filesystem" id="HICPP-16_1_3-a" origId="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-16_1_4" desc="Use &lt;> brackets for system and standard library headers. Use quotes for all other headers" id="HICPP-16_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" authTot="0;" authUrg="0;" cat="HICPP-16_1_5" desc="Avoid duplication of #include directives" id="HICPP-16_1_5-a" origId="CDD-DUPI" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_1_1" desc="Avoid using vector&lt;bool>" id="HICPP-17_1_1-a" origId="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_2_1" desc="The error indicator 'errno' shall not be used" id="HICPP-17_2_1-b" origId="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-17_2_1" desc="Wrap use of the C Standard Library" id="HICPP-17_2_1-a" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_1" desc="Do not use std::move on objects declared with the const or const &amp; type" id="HICPP-17_3_1-a" origId="CODSTA-MCPP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_2" desc="The 'std::forward' function shall be used to forward universal references" id="HICPP-17_3_2-a" origId="CODSTA-MCPP-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-17_3_3" desc="Do not subsequently use the argument to std::forward" id="HICPP-17_3_3-a" origId="BD-PB-SUBSEQFRWD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_4" desc="Do not create smart pointers of array type" id="HICPP-17_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_3_5" desc="Do not create an rvalue reference of std::array" id="HICPP-17_3_5-a" origId="CODSTA-MCPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_1" desc="Use const container calls when the result is immediately converted to a const iterator" id="HICPP-17_4_1-a" origId="CODSTA-MCPP-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_4_2" desc="Prefer 'std::make_shared' to the direct use of new" id="HICPP-17_4_2-a" origId="CODSTA-MCPP-16_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-17_5_1" desc="Follow remove-like algorithms by erase to remove elements from a container" id="HICPP-17_5_1-a" origId="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-18_1_1" desc="Do not use platform-specific multi-threading facilities" id="HICPP-18_1_1-a" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_1" desc="Use high_integrity::thread in place of std::thread" id="HICPP-18_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Do not use global variable with different locks set" id="HICPP-18_2_2-a" origId="BD-TRS-MLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_2_2" desc="Make const member functions thread-safe" id="HICPP-18_2_2-b" origId="BD-TRS-CMF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_3" desc="Do not share volatile data between threads" id="HICPP-18_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_2_4" desc="Use std::call_once rather than the Double-Checked Locking pattern" id="HICPP-18_2_4-a" origId="CODSTA-MCPP-55" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_1" desc="Avoid double locking" id="HICPP-18_3_1-a" origId="BD-TRS-DLOCK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-18_3_2" desc="Do not acquire locks in different order" id="HICPP-18_3_2-a" origId="BD-TRS-ORDER" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_3" desc="Do not use std::recursive_mutex" id="HICPP-18_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_4" desc="Only use std::unique lock when std::lock guard cannot be used" id="HICPP-18_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_5" desc="Do not access the members of std::mutex directly" id="HICPP-18_3_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_3_6" desc="Do not use relaxed atomics" id="HICPP-18_3_6-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-18_4_1" desc="Do not use std::condition_variable_any on a std::mutex" id="HICPP-18_4_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid conditions that always evaluate to the same value" id="HICPP-1_2_1-i" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid switch with unreachable branches" id="HICPP-1_2_1-j" origId="BD-PB-SWITCH" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="HICPP-1_2_1-a" origId="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="HICPP-1_2_1-b" origId="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="HICPP-1_2_1-c" origId="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in switch statement" id="HICPP-1_2_1-d" origId="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code in 'for' loop" id="HICPP-1_2_1-e" origId="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="HICPP-1_2_1-f" origId="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="HICPP-1_2_1-g" origId="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-1_2_1" desc="Avoid unreachable methods" id="HICPP-1_2_1-h" origId="BD-PB-UCMETH" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="HICPP-1_2_2-a" origId="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_1" desc="Do not use the increment operator (++) on an operand of type 'bool'" id="HICPP-1_3_1-a" origId="CODSTA-MCPP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_2" desc="The 'register' storage class specifier shall not be used" id="HICPP-1_3_2-a" origId="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-1_3_3" desc="The C library shall not be used" id="HICPP-1_3_3-a" origId="CODSTA-CPP-59" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_4" desc="Do not use deprecated STL library features" id="HICPP-1_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-1_3_5" desc="Do not use throw exception specifications" id="HICPP-1_3_5-a" origId="EXCEPT-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="HICPP-2_1_1" desc="Tabs that do not use ASCII spaces shall not be used" id="HICPP-2_1_1-a" origId="FORMAT-01" sev="5" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Do not use the following digraphs: &lt;%, %>, &lt;:, :>, %:, %:%:" id="HICPP-2_2_1-a" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_2_1" desc="Trigraphs shall not be used" id="HICPP-2_2_1-b" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_1" desc="Prefer C++ style comment" id="HICPP-2_3_1-a" origId="COMMENT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_3_2" desc="Do not use comments to remove sections of code" id="HICPP-2_3_2-a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-2_4_1" desc="Different identifiers shall be typographically unambiguous" id="HICPP-2_4_1-a" origId="NAMING-47" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_1" desc="String literals with different encoding prefixes shall not be concatenated" id="HICPP-2_5_1-a" origId="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-2_5_2" desc="Octal constants (other than zero) shall not be used" id="HICPP-2_5_2-a" origId="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="HICPP-2_5_3" desc="Prefer 'nullptr' over 'NULL' or '0'(zero)" id="HICPP-2_5_3-a" origId="CODSTA-MCPP-04" sev="4" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="HICPP-3_1_1-a" origId="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="HICPP-3_1_1-b" origId="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a local scope should not hide identifiers declared in a class scope" id="HICPP-3_1_1-c" origId="CODSTA-CPP-83" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in a class scope should not hide identifiers declared in a global or namespace scope" id="HICPP-3_1_1-d" origId="CODSTA-CPP-84" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_1_1" desc="Identifiers declared in an inner class scope should not hide identifiers declared in outer class scope" id="HICPP-3_1_1-e" origId="CODSTA-CPP-85" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_2_1" desc="Always declare functions at file scope" id="HICPP-3_2_1-a" origId="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="HICPP-3_3_1" desc="Do not use variables with static storage duration" id="HICPP-3_3_1-a" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_1" desc="The address of an object with automatic storage shall not be returned from a function" id="HICPP-3_4_1-a" origId="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_2" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="HICPP-3_4_2-a" origId="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Prefer smart pointers over raw local pointers" id="HICPP-3_4_3-a" origId="CODSTA-MCPP-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Do not call lock() directly on a mutex" id="HICPP-3_4_3-b" origId="CODSTA-MCPP-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_4_3" desc="Use RAII to prevent resource leaks" id="HICPP-3_4_3-c" origId="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not subtract two pointers that do not address elements of the same array" id="HICPP-3_5_1-c" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Do not compare two unrelated pointers" id="HICPP-3_5_1-d" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-3_5_1" desc="Unions shall not be used" id="HICPP-3_5_1-a" origId="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-3_5_1" desc="typedefs should be used in place of the basic types" id="HICPP-3_5_1-b" origId="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="HICPP-4_1_1-a" origId="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_1_1" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="HICPP-4_1_1-b" origId="PB-41_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-4_2_1" desc="Apply the U suffix to literals used in a context that requires an unsigned integral expression" id="HICPP-4_2_1-a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid incorrect shift operations" id="HICPP-4_2_2-f" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="HICPP-4_2_2-a" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid explicit type conversions (casts)" id="HICPP-4_2_2-b" origId="CODSTA-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="HICPP-4_2_2-c" origId="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Avoid integer overflows" id="HICPP-4_2_2-e" origId="BD-PB-INTOVERF" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_2_2" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="HICPP-4_2_2-d" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions from wider to narrower floating type" id="HICPP-4_3_1-a" origId="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_3_1" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="HICPP-4_3_1-b" origId="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-4_4_1" desc="Avoid implicit conversions from floating to integral type" id="HICPP-4_4_1-a" origId="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-5_1_1" desc="Avoid magic numbers" id="HICPP-5_1_1-a" origId="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="HICPP-5_1_2-b" origId="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="HICPP-5_1_2-a" origId="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="HICPP-5_1_2-c" origId="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="HICPP-5_1_2-d" origId="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="HICPP-5_1_2-e" origId="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Do not use more than one volatile between two adjacent sequence points" id="HICPP-5_1_2-f" origId="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="Don't write code that depends on the order of evaluation of function calls" id="HICPP-5_1_2-g" origId="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="HICPP-5_1_2-h" origId="MISRA2004-12_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The comma operator shall not be used" id="HICPP-5_1_2-i" origId="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_2" desc="The result of a built-in assignment operator should not be used" id="HICPP-5_1_2-j" origId="CODSTA-138" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="Use parentheses unless all operators in the expression are the same" id="HICPP-5_1_3-a" origId="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_3" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="HICPP-5_1_3-b" origId="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_4" desc="Do not capture variables implicitly in a lambda" id="HICPP-5_1_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_5" desc="Include a parameter list in every lambda expression" id="HICPP-5_1_5-a" origId="CODSTA-MCPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="HICPP-5_1_6-a" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="HICPP-5_1_6-b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="HICPP-5_1_6-c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="HICPP-5_1_6-d" origId="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain any expression that has side effects" id="HICPP-5_1_6-e" origId="CODSTA-CPP-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_1_6" desc="The operand of the 'typeid' operator shall not contain a function call that causes side effects" id="HICPP-5_1_6-f" origId="CODSTA-CPP-104_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid null pointer dereferencing" id="HICPP-5_2_1-c" origId="BD-PB-NP" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays out of bounds" id="HICPP-5_2_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_1" desc="Avoid accessing arrays and pointers out of bounds" id="HICPP-5_2_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Functions shall not call themselves, either directly or indirectly" id="HICPP-5_2_2-a" origId="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_2_2" desc="Do not use recursion" id="HICPP-5_2_2-b" origId="BD-PB-RECFUN" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_1" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="HICPP-5_3_1-a" origId="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_2" desc="Do not use calloc, malloc, realloc and free functions" id="HICPP-5_3_2-a" origId="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Properly deallocate dynamically allocated resources" id="HICPP-5_3_3-c" origId="BD-RES-BADDEALLOC" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="HICPP-5_3_3-a" origId="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_3_3" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="HICPP-5_3_3-b" origId="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-5_4_1" desc="Prefer C++-style casts" id="HICPP-5_4_1-a" origId="CODSTA-CPP-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="Avoid using reinterpret_cast" id="HICPP-5_4_1-b" origId="CODSTA-CPP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_1" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="HICPP-5_4_1-c" origId="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_2" desc="Do not cast an expression to an enumeration type" id="HICPP-5_4_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_4_3" desc="Down casting (casting from base to derived class) shall not be allowed" id="HICPP-5_4_3-a" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-5_5_1" desc="Avoid division by zero" id="HICPP-5_5_1-a" origId="BD-PB-ZERO" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_6_1" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="HICPP-5_6_1-a" origId="CODSTA-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_1" desc="Floating-point expressions shall not be tested for equality or inequality" id="HICPP-5_7_1-a" origId="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_7_2" desc="A pointer to member virtual function shall only be tested for equality with null-pointer-constant" id="HICPP-5_7_2-a" origId="CODSTA-MCPP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-5_8_1" desc="The conditional operator should not be used as a sub-expression" id="HICPP-5_8_1-a" origId="CODSTA-224" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="HICPP-6_1_1-a" origId="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_1" desc="'if' and 'else' should be followed by a compound statement" id="HICPP-6_1_1-b" origId="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="HICPP-6_1_2-a" origId="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_2" desc="The final clause of a switch statement shall be the default clause" id="HICPP-6_1_2-b" origId="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_3" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="HICPP-6_1_3-a" origId="CODSTA-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="Every switch statement will have at least two cases and a potential default" id="HICPP-6_1_4-a" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_1_4" desc="A switch expression shall not represent a value that is effectively Boolean" id="HICPP-6_1_4-b" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_1" desc="A for-loop that loops through all elements of the container and does not use its loop-counter shall not be used" id="HICPP-6_2_1-a" origId="CODSTA-MCPP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="HICPP-6_2_2-a" origId="CODSTA-168" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_3" desc="Do not modify for loop counter within a body of the loop" id="HICPP-6_2_3-a" origId="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_2_4" desc="The third clause of a 'for' statement shall be well-formed" id="HICPP-6_2_4-a" origId="CODSTA-169_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="HICPP-6_3_1-a" origId="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="The goto statement shall jump to a label declared later in the same function body" id="HICPP-6_3_1-b" origId="CODSTA-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_1" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="HICPP-6_3_1-c" origId="CODSTA-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_3_2" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="HICPP-6_3_2-a" origId="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Declare variables as locally as possible" id="HICPP-6_4_1-a" origId="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-6_4_1" desc="Postpone variable definitions as long as possible" id="HICPP-6_4_1-b" origId="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-7_1_1" desc="Multiple variable declarations shall not be allowed on the same line" id="HICPP-7_1_1-a" origId="FORMAT-29" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="HICPP-7_1_1" desc="Each variable should be declared in a separate declaration statement" id="HICPP-7_1_1-b" origId="FORMAT-33" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_10" desc="Use static_assert for assertions involving compile time constants" id="HICPP-7_1_10-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="HICPP-7_1_2" desc="Declare parameters or local variable as const whenever possible" id="HICPP-7_1_2-a" origId="CODSTA-CPP-53" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_3" desc="Do not place type specifiers before non-type specifiers in a declaration" id="HICPP-7_1_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_4" desc="Place CV-qualifiers on the right hand side of the type they apply to" id="HICPP-7_1_4-a" origId="FORMAT-47_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_5" desc="Do not inline large functions" id="HICPP-7_1_5-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="The plain char type shall be used only for the storage and use of character values" id="HICPP-7_1_6-a" origId="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_6" desc="Use class types or typedefs to abstract scalar quantities and standard integer types" id="HICPP-7_1_6-c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_7" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="HICPP-7_1_7-a" origId="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="HICPP-7_1_8" desc="Use auto id = expr when declaring a variable that is the same type as the initializer function call" id="HICPP-7_1_8-a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_1_9" desc="Do not explicitly specify the return type of a lambda" id="HICPP-7_1_9-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_1" desc="Use an explicit enumeration base and ensure that it is large enough to store all enumerators" id="HICPP-7_2_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_2_2" desc="Initialize all, only the first, or none of the enumerators in an enumeration" id="HICPP-7_2_2-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_3_1" desc="using-directives shall not be used" id="HICPP-7_3_1-a" origId="CODSTA-CPP-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="HICPP-7_4_1" desc="Do not use static keyword except inside functions and classes" id="HICPP-7_4_1-a" origId="CODSTA-CPP-50" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="An inline function that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-a" origId="GLOBAL-ONEDEFINLINE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A function template that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-b" origId="GLOBAL-ONEDEFTEMPL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_2" desc="A type that is used in multiple translation units shall be defined in one and only one file" id="HICPP-7_4_2-c" origId="GLOBAL-ONEDEFTYPE" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="HICPP-7_4_3" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="HICPP-7_4_3-a" origId="GLOBAL-ONEFILEDECL" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-7_5_1" desc="Do not use the asm declaration" id="HICPP-7_5_1-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="HICPP-8_1_1" desc="The declaration should not contain more than one level of pointer indirection" id="HICPP-8_1_1-a" origId="CODSTA-89" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_1" desc="The identifiers used in the declaration and definition of a function shall be identical" id="HICPP-8_2_1-a" origId="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_2" desc="Avoid functions with more than 5 parameters" id="HICPP-8_2_2-a" origId="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_3" desc="Pass small objects with a trivial copy constructor by value" id="HICPP-8_2_3-b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_2_4" desc="Do not pass std::unique_ptr by const reference" id="HICPP-8_2_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_1" desc="Follow the Cyclomatic Complexity limit of 10" id="HICPP-8_3_1-a" origId="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_3" desc="Do not use default arguments" id="HICPP-8_3_3-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_3_4" desc="Define rvalue reference functions that have a const parameter as =delete" id="HICPP-8_3_4-a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Avoid use before initialization" id="HICPP-8_4_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="Do not use resources that have been freed" id="HICPP-8_4_1-b" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_1" desc="All automatic variables shall have been assigned a value before being used" id="HICPP-8_4_1-c" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-8_4_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="HICPP-8_4_2-a" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_1" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="HICPP-9_1_1-a" origId="CODSTA-CPP-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_2" desc="Do not redefine an inherited virtual function with a different default parameter value" id="HICPP-9_1_2-a" origId="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_3" desc="Const member functions shall not return non-const pointers or references to class-data" id="HICPP-9_1_3-a" origId="CODSTA-CPP-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_4" desc="Public member functions shall not return non-const handles to private/protected class-data" id="HICPP-9_1_4-a" origId="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_1_5" desc="Do not introduce virtual functions in a final class" id="HICPP-9_1_5-a" origId="CODSTA-MCPP-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="HICPP-9_2_1" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="HICPP-9_2_1-a" origId="CODSTA-96" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize a reference to an object whose address can be changed" id="INIT-05" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="All member variables should be initialized in constructor" id="INIT-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Initialize static class members" id="INIT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables in base class constructors" id="INIT-13_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use uninitialized nonstatic member variables of nonvirtual base classes in virtual base class constructors" id="INIT-13_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="10;" authUrg="0;" cat="INIT" desc="Initialize all pointer variables" id="INIT-04" sev="2" total="10" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="An assignment operator shall assign all data members" id="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Objects with external linkage should not be initialized in a header file" id="INIT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not initialize unsigned integer variables with signed constants" id="INIT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="INIT" desc="Initialize all variables" id="INIT-03" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Make class members' initialization explicit by providing user-defined constructor" id="INIT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructor must be provided to ensure the proper initialization of dynamically allocated class objects" id="INIT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="List members in an initialization list in the order in which they are declared" id="INIT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Avoid initialization order problems across translation units by replacing non-local static objects with local static objects" id="INIT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not assume that members are initialized in any special order in constructors" id="INIT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Do not use possibly uninitialized nonstatic member variables of base classes in base class constructors" id="INIT-13_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="The initializer for an aggregate or union shall be enclosed in braces" id="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="User-defined constructors that initialize data members with the same constant values across all constructors should initialize using NSDMI instead" id="INIT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Consider adding constructor to initialize 'struct' member variables" id="INIT-15" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="INIT" desc="Prefer initialization to assignment in constructors" id="INIT-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All functions shall have a cyclomatic complexity number of 20 or less" id="JSF-003" origId="METRICS-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Follow the Essential Complexity limit of 1" id="JSF-003_b" origId="METRICS-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Capital 'L' shall be used instead of lowercase 'l' to indicate long" id="JSF-014" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Ensure that array indices are within the bounds of the array" id="JSF-015" origId="MISRA-004_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The error indicator 'errno' shall not be used" id="JSF-017" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The macro 'offsetof', in library &lt;stddef.h>, shall not be used" id="JSF-018" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="'setlocale' function shall not be used" id="JSF-019" origId="MISRA-121_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="&lt;locale.h> shall not be used" id="JSF-019_b" origId="MISRA-121_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The 'setjmp' macro and the 'longjmp' function shall not be used" id="JSF-020" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;setjmp.h> shall not be used" id="JSF-020_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The standard header file &lt;signal.h> shall not be used" id="JSF-021" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="JSF-021_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="The input/output library &lt;stdio.h> shall not be used" id="JSF-022" origId="PREPROC-18" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" id="JSF-023" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="JSF-024" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="JSF-024_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="JSF-024_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="JSF-024_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The time handling functions of library &lt;time.h> shall not be used" id="JSF-025" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="JSF-026" origId="PREPROC-11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #if preprocessor directive should not be used" id="JSF-026_b" origId="PREPROC-11_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#error directive shall not be used" id="JSF-026_c" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #pragma directive shall not be used" id="JSF-026_d" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#undef shall not be used" id="JSF-026_e" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to create inline macros" id="JSF-029" origId="MISRA2004-19_7" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive shall not be used to define constant values" id="JSF-030" origId="CODSTA-03" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="JSF-033" origId="PREPROC-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="JSF-046_a" origId="PORT-34_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="JSF-046_b" origId="PORT-34_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="JSF-046_c" origId="PORT-34_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers for constant and enumerator values shall be lowercase" id="JSF-052" origId="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot; " id="JSF-053.1" origId="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of a 'while', 'do...while', 'switch' or 'for' statement shall always be enclosed in braces" id="JSF-059_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The statements forming the body of an 'if', 'else if' or 'else' statement shall always be enclosed in braces" id="JSF-059_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare both private copy constructor and copy assignment operator at the same time" id="JSF-068" origId="MRM-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Freed memory shall not be accessed under any circumstances" id="JSF-070.1" origId="MRM-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Destructor shall not be called manually" id="JSF-070.1_b" origId="MRM-31_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public and protected methods shall not be invoked by class constructor" id="JSF-071" origId="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071.1" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from its destructor" id="JSF-071.1_b" origId="OOP-16_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All member variables shall be initialized in constructor" id="JSF-071_b" origId="INIT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class's virtual functions shall not be invoked from any of its constructors" id="JSF-071_c" origId="OOP-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables shall not be used in base class constructors" id="JSF-071_d" origId="INIT-13_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Uninitialized nonstatic member variables of nonvirtual base classes shall not be used in virtual base class constructors" id="JSF-071_e" origId="INIT-13_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Possibly uninitialized nonstatic member variables of base classes shall not be used in base class constructors" id="JSF-071_f" origId="INIT-13_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Members of the initialization list shall be listed in the order in which they are declared in the class" id="JSF-075" origId="INIT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="JSF-076" origId="MRM-49" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A copy constructor shall copy all data members and bases" id="JSF-077" origId="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="JSF-077.1" origId="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All base classes with a virtual function shall define a virtual destructor" id="JSF-078" origId="OOP-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="JSF-079" origId="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Call delete on pointer members in destructors" id="JSF-079_b" origId="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The assignment operator shall handle self-assignment correctly" id="JSF-081" origId="OOP-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall return a reference to *this" id="JSF-082" origId="CODSTA-CPP-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data members" id="JSF-083_a" origId="INIT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment operator shall assign all data bases" id="JSF-083_b" origId="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="JSF-088" origId="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="JSF-088.1" origId="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Multiple inheritance shall not use any public implementations" id="JSF-088_b" origId="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="JSF-089" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited nonvirtual function shall not be redefined in a derived class" id="JSF-094" origId="OOP-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Member functions declared in derived class shall not hide functions declared in base classes" id="JSF-094_b" origId="OOP-53" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An inherited default parameter shall never be redefined" id="JSF-095" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be treated polymorphically" id="JSF-096" origId="PB-57" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in interfaces" id="JSF-097" origId="CODSTA-CPP-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Neither operand of an equality operator (== or !=) shall be a pointer to a virtual member function" id="JSF-097.1" origId="CODSTA-CPP-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in private or protected methods" id="JSF-097_b" origId="CODSTA-CPP-55_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Arrays shall not be used in global functions" id="JSF-097_c" origId="CODSTA-142" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arrays shall not be passed to functions as array/pointer parameters" id="JSF-097_d" origId="PB-41_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions which are called with array argument shall not be declared with pointer parameter" id="JSF-097_e" origId="CODSTA-142_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall always be declared at file scope" id="JSF-107" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with variable numbers of arguments shall not be used" id="JSF-108" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or reference to a non-static local object" id="JSF-111" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="JSF-111_a" origId="PB-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All exit points of value-returning functions shall be through return statements" id="JSF-114" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions shall not call themselves, either directly or indirectly" id="JSF-119" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only valid C++ style comments (//) shall be used" id="JSF-126" origId="COMMENT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Code that is not used (commented out) shall be deleted" id="JSF-127" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="JSF-135_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner local scope shall not hide identifiers declared in an outer local scope" id="JSF-135_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a local scope shall not hide identifiers declared in a class scope" id="JSF-135_c" origId="CODSTA-CPP-83" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in a class scope shall not hide identifiers declared in a global or namespace scope" id="JSF-135_d" origId="CODSTA-CPP-84" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers declared in an inner class scope shall not hide identifiers declared in outer class scope" id="JSF-135_e" origId="CODSTA-CPP-85" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="JSF-138_a" origId="MISRA-024" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="JSF-138_b" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The register storage class specifier shall not be used" id="JSF-140" origId="MISRA-028" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All automatic variables shall have been assigned a value before being used" id="JSF-142_a" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="All variables shall be initialized before use" id="JSF-142_b" origId="INIT-03" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="JSF-144" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In an enumerator list, the '=' construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="JSF-145" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The underlying bit representations of floating point numbers shall not be used in any way by the programmer" id="JSF-147" origId="MISRA-016" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Enumeration types shall be used instead of integer types (and constants) to select from a limited series of choices" id="JSF-148" origId="CODSTA-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Octal constants (other than zero) shall not be used" id="JSF-149" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A string literal shall not be modified" id="JSF-151.1" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="JSF" desc="Multiple variable declarations shall not be allowed on the same line" id="JSF-152" origId="FORMAT-29" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unions shall not be used" id="JSF-153" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Bit-fields shall have explicitly unsigned integral or enumeration types only" id="JSF-154" origId="CODSTA-96" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All the members of a structure (or class) shall be named" id="JSF-156" origId="MISRA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a &amp;&amp; or || operator shall not contain side effects" id="JSF-157" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The operands of a logical &amp;&amp; or || shall be parenthesized if the operands contain binary operators" id="JSF-158" origId="CODSTA-104" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operators ||, &amp;&amp; shall not be overloaded" id="JSF-159" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Operator unary &amp; shall not be overloaded" id="JSF-159_b" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An assignment expression shall be used only as the expression in an expression statement" id="JSF-160" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in comparison operations" id="JSF-162_a" origId="CODSTA-99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in second and third operand of conditional operator" id="JSF-162_b" origId="CODSTA-101" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Signed and unsigned values shall not be mixed in arithmetic operations" id="JSF-162_c" origId="CODSTA-100" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Unsigned arithmetic shall not be used" id="JSF-163" origId="PB-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left-hand operand" id="JSF-164" origId="BD-PB-BADSHIFT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="JSF-164.1" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The unary minus operator shall not be applied to an unsigned expression" id="JSF-165" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't assign the dividend of two integers to a floating-point type" id="JSF-167_a" origId="PB-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The comma operator shall not be used" id="JSF-168_b" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="More than 2 levels of pointer indirection shall not be used" id="JSF-170" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="JSF" desc="Relational operators shall not be applied to pointer types except where they point to the same array" id="JSF-171" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="JSF-173" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_a" origId="MISRA-107_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The null pointer shall not be de-referenced" id="JSF-174_b" origId="MISRA-107_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="NULL identifier shall not be used; use plain 0 instead" id="JSF-175" origId="CODSTA-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Down casting (casting from base to derived class) shall not be allowed" id="JSF-178" origId="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A pointer to a virtual base class shall not be converted to a pointer to a derived class" id="JSF-179" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="JSF-180_a" origId="MISRA-043" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from floating to integral type" id="JSF-180_b" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from wider to narrower floating type" id="JSF-180_c" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid conversions of constant values to a narrower type" id="JSF-180_d" origId="PORT-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid implicit conversions from signed to unsigned type" id="JSF-180_e" origId="PB-56" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="JSF-180_f" origId="MISRA-043_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="JSF-180_g" origId="MISRA-043_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Type casting from any type to or from pointers shall not be used" id="JSF-182" origId="CODSTA-135" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point numbers shall not implicitly be converted to integers" id="JSF-184_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="JSF-185" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'else' block" id="JSF-186_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="JSF-186_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'if', 'else', 'while' and 'for' block" id="JSF-186_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'switch' statement" id="JSF-186_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code in 'for' loop" id="JSF-186_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="JSF-186_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while', 'for' or 'do...while' loop" id="JSF-186_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every defined function with internal linkage shall be used" id="JSF-186_h" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All non-null statements shall potentially have a side-effect" id="JSF-187" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The goto statement shall not be used" id="JSF-189" origId="MISRA2004-14_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The continue statement shall not be used" id="JSF-190" origId="MISRA2004-14_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The break statement shall not be used (except to terminate the cases of a switch statement)" id="JSF-191" origId="MISRA-058" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="JSF-191_a" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every non-empty case clause in a switch statement shall be terminated with a break statement" id="JSF-193" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All switch statements that do not intend to test for every enumeration value shall contain a final default clause" id="JSF-194" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be used as loop counters" id="JSF-197" origId="MISRA-065" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop" id="JSF-201" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Floating point variables shall not be tested for exact equality or inequality" id="JSF-202" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Evaluation of expressions shall not lead to overflow/underflow" id="JSF-203" origId="PB-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="JSF-204.1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function arguments" id="JSF-204.1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="JSF-204.1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="JSF-204.1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="JSF-204.1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Do not use more than one volatile in one expression" id="JSF-204.1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write code that depends on the order of evaluation of function calls" id="JSF-204.1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A single operation with side-effect shall only be used in the proper context" id="JSF-204_a" origId="CODSTA-102" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A call of function with side-effect shall only be used in the proper context" id="JSF-204_b" origId="CODSTA-103" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The second or third operand of a ternary operator '?:' shall not contain side effects" id="JSF-204_d" origId="CODSTA-105" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The volatile keyword shall not be used" id="JSF-205" origId="MISRA-046_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Dynamic heap memory allocation shall not be used" id="JSF-206" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="C++ exceptions shall not be used" id="JSF-208" origId="EXCEPT-05" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209" origId="MISRA2004-6_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="JSF" desc="Typedefs that indicate size and signedness shall be used in place of the basic types" id="JSF-209_b" origId="MISRA2004-6_3_b" sev="2" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="JSF-210.1" origId="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Algorithms shall not assume particular memory alignment" id="JSF-211" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Use parenthesis to clarify expression order if operators with precedence lower than arithmetic are used" id="JSF-213_e" origId="CODSTA-97" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Assuming that non-local static objects, in separate translation units, are initialized in a special order shall not be done" id="JSF-214" origId="INIT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="JSF-001" origId="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only those characters specified in the C++ basic source character set will be used" id="JSF-009" origId="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Values of character types will be restricted to a defined and documented subset of ISO 10646-1" id="JSF-010" origId="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trigraphs will not be used" id="JSF-011" origId="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The following digraphs will not be used &lt;%, %>, &lt;:, :>, %:, %:%:" id="JSF-012" origId="CODSTA-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Wide string literals (for example L&quot;abc&quot;) will not be used" id="JSF-013" origId="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="#ifndef, #define and #endif will be used to prevent multiple inclusions of the same header file" id="JSF-027" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="JSF-028" origId="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="JSF-028_b" origId="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="JSF" desc="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" id="JSF-031" origId="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="JSF-032" origId="PREPROC-08" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A header file will contain a mechanism that prevents multiple inclusions of itself" id="JSF-035" origId="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files (*.h) will not contain non-const variable definitions or function definitions" id="JSF-039_a" origId="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="JSF" desc="Source lines will be kept to a length of 120 characters or less" id="JSF-041" origId="METRICS-26" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each expression-statement will be on a separate line" id="JSF-042" origId="FORMAT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All indentations will be consistent" id="JSF-044" origId="FORMAT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Identifiers will not begin with the underscore character &quot;_&quot;" id="JSF-047" origId="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="JSF-048" origId="NAMING-45" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="JSF-050" origId="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="JSF" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="JSF-051" origId="NAMING-44" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Header files will always have a file name extension of &quot;.h&quot;" id="JSF-053" origId="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Implementation files will always have a file name extension of &quot;.cpp&quot;" id="JSF-054" origId="NAMING-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The public section of a class will be declared before the protected section and before the private section" id="JSF-057_a" origId="CODSTA-CPP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The protected section of a class will be declared before the private section" id="JSF-057_b" origId="CODSTA-CPP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When declaring functions with more than 2 parameters, the leading parenthesis and the first argument are to be written on the same line as the function name, each additional argument will be written on a separate line" id="JSF-058" origId="FORMAT-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-060_a" origId="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" id="JSF-060_b" origId="FORMAT-43" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will not have an empty line after &quot;{&quot; nor before &quot;}&quot;" id="JSF-060_c" origId="FORMAT-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="JSF" desc="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" id="JSF-061" origId="FORMAT-42" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" id="JSF-062" origId="FORMAT-32" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space following '.' or '->' operator" id="JSF-063_a" origId="FORMAT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no white space preceding '.' or '->' operator" id="JSF-063_b" origId="FORMAT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '!' or '~' and its operand" id="JSF-063_c" origId="FORMAT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a increment/decrement operator (++/--) and its operand" id="JSF-063_d" origId="FORMAT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There will be no space between a unary operator '&amp;', '*', '+', '-' and its operand" id="JSF-063_e" origId="FORMAT-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="There should be no space between an increment/decrement operator (++/--) and its operand in macro definition" id="JSF-063_f" origId="FORMAT-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A member function that does not affect the state of an object will be declared const" id="JSF-069" origId="CODSTA-CPP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Initialization of nonstatic class members will be performed through the member initialization list rather than through assignment in the body of a constructor" id="JSF-074" origId="INIT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When two operators are opposites (such as == and !=), both will be defined" id="JSF-085" origId="CODSTA-CPP-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="When one of opposite operators (== and !=) is defined, the other should be defined too and one will be defined in terms of the other" id="JSF-085_a" origId="CODSTA-CPP-86" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Namespaces will not be nested more than two levels deep" id="JSF-099" origId="CODSTA-CPP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All partial and explicit specializations for a template should be declared in the same file as the declaration of their primary template" id="JSF-104" origId="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions with more than 7 arguments will not be used" id="JSF-110" origId="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Functions will have a single exit point" id="JSF-113" origId="MISRA2004-14_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="JSF" desc="If a function returns error information, then that error information will be tested" id="JSF-115" origId="MISRA2004-16_10" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="21;" authUrg="0;" cat="JSF" desc="Each variable declaration will be commented" id="JSF-132_a" origId="COMMENT-05" sev="3" total="21" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each typedef will be commented" id="JSF-132_b" origId="COMMENT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each enumeration value will be commented" id="JSF-132_c" origId="COMMENT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Each structure member variable will be commented" id="JSF-132_d" origId="COMMENT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will be documented with an introductory comment that provides information on the file" id="JSF-133_a" origId="COMMENT-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="JSF" desc="Every source file will contain copyright information" id="JSF-133_b" origId="COMMENT-02" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in more than one file" id="JSF-139" origId="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="External objects will not be declared in implementation files" id="JSF-139_b" origId="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A class, structure, or enumeration will not be declared in the definition of its type" id="JSF-141" origId="CODSTA-CPP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Variables will not be introduced until they can be initialized with meaningful values" id="JSF-143" origId="OPT-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid unused local variables" id="JSF-143_a" origId="OPT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hexadecimal constants will be represented using all uppercase letters" id="JSF-150" origId="CODSTA-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Numeric values in code will not be used; symbolic values will be used instead" id="JSF-151" origId="CODSTA-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166" origId="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_b" origId="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The sizeof operator will not be used on expressions that contain side effects" id="JSF-166_c" origId="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The implementation of integer division shall be documented" id="JSF-167" origId="MISRA-041" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A typedef will be used to simplify program syntax when declaring function pointers" id="JSF-176" origId="CODSTA-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Redundant explicit casts will not be used" id="JSF-181_a" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid explicit cast from derived to a base class" id="JSF-181_b" origId="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Labels will not be used, except in switch statements" id="JSF-188" origId="MISRA-055" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="All 'if...else if' constructs will contain either a final else clause or a comment indicating why a final else clause is not necessary" id="JSF-192" origId="CODSTA-98" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A switch expression will not represent a Boolean value" id="JSF-195" origId="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Every switch statement will have at least two cases and a potential default" id="JSF-196" origId="CODSTA-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The initialization expression in a for loop will perform no actions other than to initialize the value of a single for loop parameter" id="JSF-198" origId="CODSTA-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The increment expression in a for loop will perform no action other than to change a single loop parameter to the next value for the loop" id="JSF-199" origId="CODSTA-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Null initialize or increment expressions in for loops will not be used; a while loop will be used instead" id="JSF-200" origId="CODSTA-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="JSF" desc="Unencapsulated global data will be avoided" id="JSF-207" origId="CODSTA-CPP-82" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A file should directly include only headers containing declarations and definitions needed to a compilation" id="JSF-037" origId="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="153;" authUrg="0;" cat="JSF" desc="Tabs should be avoided" id="JSF-043" origId="FORMAT-01" sev="4" total="153" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Public data should only be used in structs, not in classes" id="JSF-067_a" origId="OOP-18" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Protected data should only be used in structs, not in classes" id="JSF-067_b" origId="OOP-19" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using the friend mechanism" id="JSF-070" origId="OOP-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Hierarchies should be based on abstract classes" id="JSF-087" origId="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="JSF" desc="Every nonlocal name, except main(), should be placed in some namespace" id="JSF-098" origId="CODSTA-CPP-36" sev="4" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Don't write namespace usings in a header file or before an #include" id="JSF-100" origId="CODSTA-CPP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="In a class template with a dependent base, any name that may be found in that dependent base should be referred to using a qualifier" id="JSF-105" origId="TEMPL-12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="A function definition should not be placed in a class specification" id="JSF-109" origId="CODSTA-CPP-32" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Dereferenced local pointer initialized by new in function scope should not be returned" id="JSF-112" origId="MRM-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="JSF" desc="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="JSF-115_a" origId="CODSTA-CPP-58" sev="4" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Built-in-types should be passed by value unless you are modifying them" id="JSF-116" origId="CODSTA-36" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Arguments should be passed by reference" id="JSF-117" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="An object should be passed as const reference if the function should not change the value of the object" id="JSF-117.1" origId="CODSTA-CPP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid slicing function arguments / return value" id="JSF-117_a" origId="PB-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="JSF-117_b" origId="PB-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="JSF" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="JSF-118" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="JSF-118_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="JSF-121" origId="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial accessor and mutator functions should be inlined" id="JSF-122" origId="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Classes which have only getters/setters (accessors/mutators) are not allowed" id="JSF-123" origId="CODSTA-CPP-81" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Trivial forwarding functions should be inlined" id="JSF-124" origId="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pass and return by reference when possible" id="JSF-125_a" origId="OPT-14" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="1;" cat="JSF" desc="Document functions in comments that precede function definitions" id="JSF-134" origId="COMMENT-04" sev="4" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Document functions in comments that precede function declarations" id="JSF-134_b" origId="COMMENT-04_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Objects should be defined at block scope if they are only accessed from within a single function" id="JSF-136_a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Declarations of local variables should be at the smallest feasible scope" id="JSF-136_b" origId="OPT-01" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="JSF" desc="All declarations at file scope should be static where possible" id="JSF-137" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointers to pointers should be avoided" id="JSF-169" origId="CODSTA-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="User-defined conversion functions should be avoided" id="JSF-177" origId="CODSTA-CPP-05" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Constructors allowing for conversion should be made explicit" id="JSF-177_b" origId="CODSTA-CPP-04" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="JSF" desc="Every possible measure should be taken to avoid type casting" id="JSF-183" origId="CODSTA-31" sev="4" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using static_cast on pointers" id="JSF-183_a" origId="CODSTA-CPP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Avoid using reinterpret_cast" id="JSF-183_b" origId="CODSTA-CPP-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Pointer arithmetic will not be used" id="JSF-215" origId="MISRA-101" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="JSF" desc="Consider using op= instead of stand-alone op" id="JSF-125_b" origId="OPT-19" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of blocks of code in a function" id="METRICS-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of function calls within function" id="METRICS-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Class inheritance level" id="METRICS-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of data member(s) per class should not exceed 15" id="METRICS-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of methods per class" id="METRICS-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of parameter(s) per method should not exceed 10" id="METRICS-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private data member(s) per class" id="METRICS-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of private methods per class" id="METRICS-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected data member(s) per class" id="METRICS-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of protected methods per class" id="METRICS-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public data member(s) per class" id="METRICS-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Number of public methods per class" id="METRICS-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with more than 5 parameters" id="METRICS-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Macros should not use more than 5 parameters" id="METRICS-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 10" id="METRICS-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="1;" cat="METRICS" desc="The percentage of comment lines versus the total number of module lines should be between 20 and 60" id="METRICS-19" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (declarations and statements)" id="METRICS-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid too long functions (blocks)" id="METRICS-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 75 lines of code" id="METRICS-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Nested block depth should not be higher than 5" id="METRICS-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Any one function (or method) will contain no more than 200 logical source lines of code (L-SLOCs)" id="METRICS-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="METRICS" desc="Source lines will be kept to a length of 120 characters or less" id="METRICS-26" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Functions with more than 7 parameters will not be used" id="METRICS-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Cyclomatic Complexity limit of 20" id="METRICS-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="No function should be longer than 60 lines of code" id="METRICS-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="METRICS" desc="The assertion density of the code should average to a minimum of two assertions per function" id="METRICS-31" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="All functions with more than 20 lines should contain at least 2 assertions" id="METRICS-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A global function should not be called from more than 5 different functions" id="METRICS-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="A function should not call more than 7 different functions" id="METRICS-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of statements within function should be in range 1 - 50" id="METRICS-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The value of VOCF metric for a function should not be higher than 4" id="METRICS-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Statements within function should not be nested deeper than 4 levels" id="METRICS-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="The number of blocks of comments before and inside function to the number of statements in function should be > 0.2" id="METRICS-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Report the value of Halstead's delivered bugs (B) for a function" id="METRICS-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid functions with over 50 lines" id="METRICS-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid switch statements with many cases" id="METRICS-02" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid structs, unions, or classes with more than 20 fields" id="METRICS-17" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Avoid source files that are longer than 500 lines" id="METRICS-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="METRICS" desc="Report Cyclomatic Complexity" id="METRICS-29" sev="5" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="11;" authUrg="0;" cat="METRICS" desc="Report Essential Complexity" id="METRICS-33" sev="5" total="11" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 4" id="METRICS-34" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 10" id="METRICS-35" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="METRICS" desc="Follow the Essential Complexity limit of 1" id="METRICS-42" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Only use characters defined in ISO C standard" id="MISRA-005" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Values of character types shall be restricted to a defined and documented subset of ISO 10646-1" id="MISRA-006" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use wide string literals" id="MISRA-008" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA" desc="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" id="MISRA-013" sev="3" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Explicitly declare 'char' type as signed or unsigned" id="MISRA-014" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The underlying bit representations of floating point numbers shall not be used" id="MISRA-016" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All functions shall be declared before use" id="MISRA-020" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Identifiers shall not simultaneously have both internal and external linkage in the same translation unit" id="MISRA-024" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External object should not be declared in more than one file" id="MISRA-027" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="External objects should not be declared in implementation files" id="MISRA-027_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The use of a tag shall agree with its declaration" id="MISRA-029" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All automatic variables shall have been assigned a value before being used" id="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA-038" origId="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The comma operator shall not be used, except in the control expression of a for loop" id="MISRA-042" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from wider to narrower integral type which may result in a loss of information shall not be used" id="MISRA-043" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid mixing arithmetic of different precisions in the same expression" id="MISRA-043_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral to floating type which may result in a loss of information shall not be used" id="MISRA-043_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Implicit conversions from integral constant to floating type which may result in a loss of information shall not be used" id="MISRA-043_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Redundant explicit cast to the same type is not allowed" id="MISRA-044" origId="OPT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the volatile keyword" id="MISRA-046_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Assignment statements should not be nested within other assignment statements" id="MISRA-046_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is cast to a wider integer type" id="MISRA-048_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Don't cast the dividend of two integers to a floating-point type" id="MISRA-048_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="MISRA-048_c" origId="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid unintentionally discarding the remainder of integer division" id="MISRA-048_d" origId="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="A null statement shall only occur on a line by itself" id="MISRA-054" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use the break statement" id="MISRA-058" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use floating point variables as loop counters" id="MISRA-065" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use functions with variable numbers of arguments" id="MISRA-069" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA-071_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Functions shall always have visible prototype at the function call" id="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide none or all identifiers for function arguments" id="MISRA-073" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provide expression for return statement of non-void functions" id="MISRA-083" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Avoid expressions in return statements of void functions" id="MISRA-084" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA" desc="Enclose in parentheses whole definition of a function-like macro" id="MISRA-096" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use only non-ambiguous forms of defined pre-processor operator" id="MISRA-100" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Pointer arithmetic should not be used" id="MISRA-101" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use non-constant pointers to functions" id="MISRA-104" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type" id="MISRA-105" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The NULL pointer shall not be dereferenced" id="MISRA-107_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All members of structure or union should be fully specified" id="MISRA-108" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Unions shall not be used to access the sub-parts of larger data structure" id="MISRA-110" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="All the members of a structure (or class/union) shall be named" id="MISRA-113" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Standard library function names shall not be reused" id="MISRA-115" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use 'setlocale' function" id="MISRA-121_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not include &lt;locale.h> header" id="MISRA-121_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="MISRA" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_a" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Provisions should be made for appropriate run-time checking" id="MISRA-004_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_a" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Use type suffix for numeric constants" id="MISRA-018_d" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="MISRA" desc="Declare objects at function scope" id="MISRA-022" sev="5" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="The 'register' storage class specifier shall not be used" id="MISRA-028" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Document integer division" id="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="MISRA-051" origId="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA" desc="Do not use labels" id="MISRA-055" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2004-12_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions between signed and unsigned integer types" id="MISRA2004-10_1_a" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="There shall be no implicit conversions from integral to floating type" id="MISRA2004-10_1_b" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower types" id="MISRA2004-10_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function return expressions" id="MISRA2004-10_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of function arguments" id="MISRA2004-10_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of complex expressions" id="MISRA2004-10_1_i" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from floating to integral type" id="MISRA2004-10_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from wider to narrower floating type" id="MISRA2004-10_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions from narrower to wider floating type" id="MISRA2004-10_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid implicit conversions of floating point numbers from wider to narrower floating type" id="MISRA2004-10_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of integer type shall only be cast to a type  of the same signedness that is no wider than the underlying type of the expression" id="MISRA2004-10_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to a wider floating type" id="MISRA2004-10_4" origId="CODSTA-198" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of a complex expression of floating type should not be cast to an integer type" id="MISRA2004-10_4_b" origId="CODSTA-198_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand of underlying type unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2004-10_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to a function and any type other than an integral type" id="MISRA2004-11_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Conversions shall not be performed between a pointer to object and any type other than an integral type, another pointer to object type or a pointer to void" id="MISRA2004-11_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert a pointer type to an integral type" id="MISRA2004-11_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not convert an integral type to a pointer type" id="MISRA2004-11_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast should not be performed between a pointer to object type and a different pointer to object type" id="MISRA2004-11_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRA2004-11_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The comma operator shall not be used" id="MISRA2004-12_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2004-12_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2004-12_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parenthesis for the right-hand operand of an assignment operator when it contains an assignment expression" id="MISRA2004-12_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2004-12_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2004-12_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2004-12_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2004-12_2_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2004-12_2_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRA2004-12_2_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2004-12_2_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRA2004-12_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRA2004-12_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The function call that causes the side effect shall not be the operand of the sizeof operator" id="MISRA2004-12_3_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2004-12_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2004-12_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" id="MISRA2004-12_6_a" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Expressions that are effectively Boolean should not be used as operands to operators other than (&amp;&amp;, ||, !, =, ==, !=, ?:)" id="MISRA2004-12_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bitwise operators shall not be applied to operands whose underlying type is signed" id="MISRA2004-12_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRA2004-12_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2004-12_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assignment operators shall not be used in expressions that yield a Boolean value" id="MISRA2004-13_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRA2004-13_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Floating-point expressions shall not be tested for equality or inequality" id="MISRA2004-13_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The controlling expression of a for statement shall not contain any objects of floating type" id="MISRA2004-13_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The three expressions of a for statement shall be concerned only with loop control" id="MISRA2004-13_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not modify for loop counter within a body of the loop" id="MISRA2004-13_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aa" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ab" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ac" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ad" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ae" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_af" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ag" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ah" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ai" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_aj" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_ak" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_j" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_k" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_l" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_m" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_n" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_s" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_t" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_u" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_v" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_w" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_x" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_y" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Boolean operations whose results are invariant shall not be permitted" id="MISRA2004-13_7_z" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRA2004-14_10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRA2004-14_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2004-14_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRA2004-14_1_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in switch statement" id="MISRA2004-14_1_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code in 'for' loop" id="MISRA2004-14_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2004-14_1_f" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRA2004-14_1_g" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2004-14_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A null statement shall occur on a line by itself or be followed by a comment" id="MISRA2004-14_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The goto statement shall not be used" id="MISRA2004-14_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The continue statement shall not be used" id="MISRA2004-14_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="For any iteration statement there shall be at most one break statement used for loop termination" id="MISRA2004-14_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function shall have a single point of exit at the end of the function" id="MISRA2004-14_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRA2004-14_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="'if' and 'else' should be followed by a compound statement" id="MISRA2004-14_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A break statement should be placed only at the end of switch clause" id="MISRA2004-15_0_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2004-15_0_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2004-15_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2004-15_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2004-15_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The final clause of a switch statement shall be the default clause" id="MISRA2004-15_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRA2004-15_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Every switch statement shall have at least one case clause" id="MISRA2004-15_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not be defined with a variable number of arguments" id="MISRA2004-16_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2004" desc="If a function returns error information, then that error information shall be tested" id="MISRA2004-16_10" sev="3" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2004-16_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2004-16_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2004-16_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions with no parameters shall be declared with parameter type void" id="MISRA2004-16_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The number of arguments passed to a function shall match the number of parameters" id="MISRA2004-16_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2004" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2004-16_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2004-16_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function identifier shall only be used with either a preceding '&amp;', or with a parenthesised parameter list, which may be empty" id="MISRA2004-16_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not apply arithmetic to pointers that don't address an array or array element" id="MISRA2004-17_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Pointer subtraction shall only be applied to pointers that address elements of the same array" id="MISRA2004-17_2" origId="CODSTA-13_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc=">, >=, &lt;, &lt;= shall not be applied to pointer types except where they point to the same array" id="MISRA2004-17_3" origId="CODSTA-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="Array indexing shall be the only allowed form of pointer arithmetic" id="MISRA2004-17_4" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRA2004-17_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2004-17_6_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2004-17_6_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All structure and union types shall be complete at the end of a translation unit" id="MISRA2004-18_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="An object shall not be assigned to an overlapping object" id="MISRA2004-18_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unions shall not be used" id="MISRA2004-18_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRA2004-19_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRA2004-19_10" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2004-19_11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be at most one occurrence of the # or ## preprocessor operators in a single macro definition" id="MISRA2004-19_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The # and ## preprocessor operators should not be used" id="MISRA2004-19_13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2004-19_14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Precautions shall be taken in order to prevent the contents of a header file being included twice" id="MISRA2004-19_15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRA2004-19_16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2004-19_17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Non-standard characters should not occur in header file names in #include directives" id="MISRA2004-19_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2004-19_3" origId="MISRA-089" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Avoid keywords and basic types in macros" id="MISRA2004-19_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Macros shall not be #define'd or #undef'd within a block" id="MISRA2004-19_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="#undef shall not be used" id="MISRA2004-19_6" origId="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2004" desc="A function should be used in preference to a function-like macro" id="MISRA2004-19_7" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A function-like macro shall not be invoked without all of its arguments" id="MISRA2004-19_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2004-19_9" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRA2004-20_10" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11" origId="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_b" origId="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_c" origId="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRA2004-20_11_d" origId="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The time handling functions of library time.h shall not be used" id="MISRA2004-20_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2004-20_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not redefine reserved words" id="MISRA2004-20_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRA2004-20_1_c" origId="CODSTA-92_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2004-20_1_e" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRA2004-20_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRA2004-20_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRA2004-20_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The validity of values passed to library functions shall be checked" id="MISRA2004-20_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2004" desc="Dynamic heap memory allocation shall not be used" id="MISRA2004-20_4" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The error indicator 'errno' shall not be used" id="MISRA2004-20_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The macro offsetof, in library stddef.h, shall not be used" id="MISRA2004-20_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2004-20_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2004-20_7_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2004-20_8" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRA2004-20_8_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2004" desc="The input/output library stdio.h shall not be used" id="MISRA2004-20_9" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Assembly language shall be encapsulated and isolated" id="MISRA2004-2_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Source code shall only use /* ... */ style comments" id="MISRA2004-2_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2004-2_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All uses of the #pragma directive shall be documented and explained" id="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not mix bit-fields and other data within the same structure" id="MISRA2004-3_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Only those escape sequences that are defined in the ISO C standard shall be used" id="MISRA2004-4_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Trigraphs shall not be used" id="MISRA2004-4_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C external identifiers should differ in the first 31 characters" id="MISRA2004-5_1_a" origId="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="MISRA2004-5_1_b" origId="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="MISRA2004-5_1_c" origId="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRA2004-5_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRA2004-5_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names" id="MISRA2004-5_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Do not reuse typedef names as a typedef name" id="MISRA2004-5_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2004-5_4_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A tag name shall not be reused to define a different tag" id="MISRA2004-5_4_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The name of typedef should not be the same as the name of type that is typedef'd" id="MISRA2004-5_4_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The plain char type shall be used only for the storage and use of character values" id="MISRA2004-6_1" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="signed and unsigned char type shall be used only for the storage and use of numeric values" id="MISRA2004-6_2" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="typedefs to basic types should contain some digits in their name" id="MISRA2004-6_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2004" desc="typedefs should be used in place of the basic types" id="MISRA2004-6_3_b" sev="3" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRA2004-6_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5" origId="CODSTA-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Unnamed bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2004-6_5_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal constants (other than zero) shall not be used" id="MISRA2004-7_1_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Octal escape sequences shall not be used" id="MISRA2004-7_1_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRA2004-8_11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRA2004-8_12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall have prototype declarations and the prototype shall be visible at both the function definition and call" id="MISRA2004-8_1_a" origId="MISRA-071_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Functions shall always have visible prototype at the function call" id="MISRA2004-8_1_b" origId="MISRA-071_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2004-8_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Use identical types in declaration and definition" id="MISRA2004-8_3_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2004-8_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="There shall be no definitions of objects or functions in a header file" id="MISRA2004-8_5" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Always declare functions at file scope" id="MISRA2004-8_6" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRA2004-8_7" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="All automatic variables shall have been assigned a value before being used" id="MISRA2004-9_1" origId="MISRA-030" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2004-9_2" origId="INIT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Arrays shall not be partially initialized" id="MISRA2004-9_2_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="The non-zero initialization of structures requires an explicit initializer for each element" id="MISRA2004-9_2_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="In an enumerator list, the &quot;=&quot; construct shall not be used to explicitly initialise members other than the first, unless all items are explicitly initialised" id="MISRA2004-9_3" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No object or function identifier with static storage duration should be reused" id="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier in one name space should have the same spelling as an identifier in another name space, with the exception of structure and union member names" id="MISRA2004-5_6" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No identifier name should be reused" id="MISRA2004-5_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="MISRA2004" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2004-8_10" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRA2004-10_6" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_b" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="No parentheses are required for the operand of a unary operator" id="MISRA2004-12_1_c" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2004" desc="Limited dependence should be placed on C's operator precedence rules in expressions" id="MISRA2004-12_1_f" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every defined function with internal linkage shall be used" id="MISRA2008-0_1_10" origId="OPT-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="4;" authUrg="0;" cat="MISRA2008" desc="Every defined function with external linkage shall be used" id="MISRA2008-0_1_10_b" origId="GLOBAL-UNUSEDFUNC" sev="2" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in nonvirtual functions" id="MISRA2008-0_1_11" origId="OPT-31" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unused parameters (named or unnamed) in the set of parameters for a virtual function and all the functions that override it" id="MISRA2008-0_1_12" origId="GLOBAL-UNUSEDVIRTPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'else' block" id="MISRA2008-0_1_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2008-0_1_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'if/else/while/for' block" id="MISRA2008-0_1_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in switch statement" id="MISRA2008-0_1_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code in 'for' loop" id="MISRA2008-0_1_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement outside 'for/while/catch' block" id="MISRA2008-0_1_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unreachable code after 'if' or 'switch' statement inside 'while/for/catch' block" id="MISRA2008-0_1_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_a" origId="MISRA2004-13_7_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_aa" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_b" origId="MISRA2004-13_7_aa" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_c" origId="MISRA2004-13_7_ab" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_d" origId="MISRA2004-13_7_ac" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_e" origId="MISRA2004-13_7_ad" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_f" origId="MISRA2004-13_7_ae" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_g" origId="MISRA2004-13_7_af" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_h" origId="MISRA2004-13_7_ag" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_i" origId="MISRA2004-13_7_ah" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_j" origId="MISRA2004-13_7_ai" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_k" origId="MISRA2004-13_7_aj" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_l" origId="MISRA2004-13_7_ak" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_m" origId="MISRA2004-13_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_n" origId="MISRA2004-13_7_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_o" origId="MISRA2004-13_7_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_p" origId="MISRA2004-13_7_j" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_q" origId="MISRA2004-13_7_k" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_r" origId="MISRA2004-13_7_l" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_rz" origId="MISRA2004-13_7_z" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_s" origId="MISRA2004-13_7_m" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_sz" origId="MISRA2004-13_7_v" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_t" origId="MISRA2004-13_7_n" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_u" origId="MISRA2004-13_7_s" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_v" origId="MISRA2004-13_7_t" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_w" origId="MISRA2004-13_7_u" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_x" origId="MISRA2004-13_7_w" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_y" origId="MISRA2004-13_7_x" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain infeasible paths" id="MISRA2008-0_1_2_z" origId="MISRA2004-13_7_y" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_a" origId="OPT-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused variables" id="MISRA2008-0_1_3_b" origId="OPT-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Eliminate unused private member variables" id="MISRA2008-0_1_3_c" origId="OPT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="9;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain non-volatile POD variables having only one use" id="MISRA2008-0_1_4" origId="GLOBAL-ONEUSEVAR" sev="2" total="9" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A project shall not contain unused type declarations" id="MISRA2008-0_1_5" origId="GLOBAL-UNUSEDTYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid unused values" id="MISRA2008-0_1_6" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2008" desc="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" id="MISRA2008-0_1_7" origId="CODSTA-CPP-58" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8" origId="OPT-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="All functions with void return type shall have external side effect(s)" id="MISRA2008-0_1_8_b" origId="OPT-32_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2008-0_1_9" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_a" origId="MISRA2004-18_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object shall not be assigned to an overlapping object" id="MISRA2008-0_2_1_b" origId="PB-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2008" desc="If a function generates error information, then that error information shall be tested" id="MISRA2008-0_3_2" origId="MISRA2004-16_10" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A base class shall only be declared virtual if it is used in a diamond hierarchy" id="MISRA2008-10_1_2" origId="GLOBAL-VIRTBASECLASS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An accessible base class shall not be both virtual and non-virtual in the same hierarchy" id="MISRA2008-10_1_3" origId="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="MISRA2008-10_3_1" origId="OOP-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each overriding virtual function shall be declared with the virtual keyword" id="MISRA2008-10_3_2" origId="OOP-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="MISRA2008-10_3_3" origId="OOP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Member data in non-POD class types shall be private" id="MISRA2008-11_0_1" origId="OOP-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use dynamic type of an object under construction" id="MISRA2008-12_1_1" origId="BD-PB-VCTOR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="MISRA2008-12_1_3" origId="OOP-45" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall only initialize its base classes and the nonstatic members of the class of which it is a member" id="MISRA2008-12_8_1" origId="OOP-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="MISRA2008-12_8_2" origId="OOP-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not declare non-member generic functions in associated namespaces" id="MISRA2008-14_5_1" origId="TEMPL-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="MISRA2008-14_5_2" origId="TEMPL-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="MISRA2008-14_5_3" origId="TEMPL-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="MISRA2008-14_6_1" origId="TEMPL-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The function shall resolve to a function declared previously in the translation unit" id="MISRA2008-14_6_2" origId="TEMPL-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All class templates, function templates, class template member functions and class template static members shall be instantiated at least one." id="MISRA2008-14_7_1" origId="GLOBAL-TEMPLNOINST" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="MISRA2008-14_7_3" origId="TEMPL-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Overloaded function templates shall not be explicitly specialized" id="MISRA2008-14_8_1" origId="TEMPL-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Control shall not be transferred into a try or catch block using a goto or a switch statement" id="MISRA2008-15_0_3" origId="EXCEPT-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The assignment-expression of a throw statement shall not itself cause an exception to be thrown" id="MISRA2008-15_1_1" origId="EXCEPT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be thrown explicitly" id="MISRA2008-15_1_2" origId="EXCEPT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound statement of a catch handler" id="MISRA2008-15_1_3" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_3_1" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Handlers of a function-try-block implementation of a class constructor or destructor shall not reference non-static members from this class or its bases" id="MISRA2008-15_3_3" origId="EXCEPT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_a" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_3_4_b" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class type exception shall always be caught by reference" id="MISRA2008-15_3_5" origId="EXCEPT-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="MISRA2008-15_3_6" origId="EXCEPT-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block, any ellipsis (catch-all) handler shall occur last" id="MISRA2008-15_3_7" origId="EXCEPT-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function is declared with an exception-specification, then all declarations of the same function (in other translation units) shall be declared with the same set of type-ids" id="MISRA2008-15_4_1" origId="GLOBAL-EXCSPECDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class destructor shall not exit with an exception" id="MISRA2008-15_5_1" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_2" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_2_b" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="MISRA2008-15_5_3" origId="PB-44" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Never allow an exception to be thrown from a destructor, deallocation, and swap" id="MISRA2008-15_5_3_b" origId="EXCEPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not throw from within destructor" id="MISRA2008-15_5_3_c" origId="EXCEPT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_5_3_d" origId="EXCEPT-06" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An empty throw (throw;) shall only be used in the compound-statement of a catch handler" id="MISRA2008-15_5_3_e" origId="EXCEPT-07" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Exceptions shall be raised only after start-up and before termination of the program" id="MISRA2008-15_5_3_f" origId="EXCEPT-08" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each exception explicitly thrown in the code shall have a handler of a compatible type in all call paths that could lead to that point" id="MISRA2008-15_5_3_g" origId="EXCEPT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Where a function's declaration includes an exception-specification, the function shall only be capable of throwing exceptions of the indicated type(s)" id="MISRA2008-15_5_3_h" origId="EXCEPT-14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Function called in global or namespace scope shall not throw unhandled exceptions" id="MISRA2008-15_5_3_i" origId="EXCEPT-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Always catch exceptions" id="MISRA2008-15_5_3_j" origId="BD-PB-EXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Properly define exit handlers" id="MISRA2008-15_5_3_k" origId="BD-PB-EXITHAN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid throwing exceptions from functions that are declared not to throw" id="MISRA2008-15_5_3_l" origId="BD-PB-NOEXCEPT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#include directives in a file shall only be preceded by other preprocessor directives or comments" id="MISRA2008-16_0_1" origId="MISRA2004-19_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Macros shall only be #define'd or #undef'd in the global namespace" id="MISRA2008-16_0_2" origId="MISRA2004-19_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_0_3" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="Function-like macros shall not be defined" id="MISRA2008-16_0_4" origId="MISRA2004-19_7" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRA2008-16_0_5" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" id="MISRA2008-16_0_6" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRA2008-16_0_7_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the # token appears as the first token on a line, then it shall be immediately followed by a preprocessing token" id="MISRA2008-16_0_8" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The defined preprocessor operator shall only be used in one of the two standard forms" id="MISRA2008-16_1_1" origId="MISRA2004-19_14" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRA2008-16_1_2" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="Avoid using macro definitions" id="MISRA2008-16_2_1_a" origId="PREPROC-01" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_b" origId="PREPROC-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="MISRA2008-16_2_1_c" origId="PREPROC-11" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_d" origId="PREPROC-10_b" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="MISRA2008-16_2_1_e" origId="PREPROC-10_c" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#error directive shall not be used" id="MISRA2008-16_2_1_f" origId="PREPROC-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #pragma directive shall not be used" id="MISRA2008-16_2_1_g" origId="PREPROC-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="#undef shall not be used" id="MISRA2008-16_2_1_h" origId="PREPROC-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="MISRA2008" desc="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" id="MISRA2008-16_2_2" origId="PREPROC-12" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Include guards shall be provided" id="MISRA2008-16_2_3" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRA2008-16_2_4" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2008-16_2_6" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be at most one occurrence of the # or ## operators in a single macro definition" id="MISRA2008-16_3_1" origId="MISRA2004-19_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_b" origId="MISRA2004-20_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_c" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_d" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Reserved identifiers, macros and functions in the standard library shall not be defined, redefined or undefined" id="MISRA2008-17_0_1_e" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library macros and objects shall not be reused" id="MISRA2008-17_0_2" origId="CODSTA-92" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The names of standard library functions shall not be overridden" id="MISRA2008-17_0_3" origId="CODSTA-93" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The setjmp macro and the longjmp function shall not be used" id="MISRA2008-17_0_5" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2008-17_0_5_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The C library shall not be used" id="MISRA2008-18_0_1" origId="CODSTA-CPP-59" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" id="MISRA2008-18_0_2" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'getenv' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_c" origId="SECURITY-52" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2008-18_0_3_d" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The time handling functions of library &lt;ctime> shall not be used" id="MISRA2008-18_0_4" origId="MISRA2004-20_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unbounded functions of library &lt;cstring> shall not be used" id="MISRA2008-18_0_5" origId="PB-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The macro offsetof shall not be used" id="MISRA2008-18_2_1" origId="MISRA2004-20_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Dynamic heap memory allocation shall not be used" id="MISRA2008-18_4_1" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The standard header file &lt;csignal> shall not be used" id="MISRA2008-18_7_1" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The signal handling facilities of &lt;csignal> shall not be used" id="MISRA2008-18_7_1_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The error indicator errno shall not be used" id="MISRA2008-19_3_1" origId="MISRA2004-20_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="The stream input/output library &lt;cstdio> shall not be used" id="MISRA2008-27_0_1" origId="MISRA2004-20_9" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="Different identifiers shall be typographically unambiguous" id="MISRA2008-2_10_1" origId="NAMING-47" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2008-2_10_2_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A typedef name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_3" origId="GLOBAL-UNIQUETYPEDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A class, union or enum name (including qualification, if any) shall be a unique identifier" id="MISRA2008-2_10_4" origId="GLOBAL-UNIQUETYPE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_a" origId="CODSTA-CPP-87_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_b" origId="CODSTA-CPP-87_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If an identifier refers to a type, it shall not also refer to an object or a function in the same scope" id="MISRA2008-2_10_6_c" origId="CODSTA-CPP-87_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The name of typedef should not be the same as the name of its basic type" id="MISRA2008-2_10_6_d" origId="CODSTA-CPP-88" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Only those escape sequences that are defined in ISO/IEC 14882:2003 shall be used" id="MISRA2008-2_13_1" origId="CODSTA-CPP-60" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal constants (other than zero) shall not be used" id="MISRA2008-2_13_2_a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Octal escape sequences (other than &quot;\0&quot;) shall not be used" id="MISRA2008-2_13_2_b" origId="MISRA2004-7_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A &quot;U&quot; suffix shall be applied to all octal or hexadecimal integer literals of unsigned type" id="MISRA2008-2_13_3" origId="CODSTA-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Literal suffixes shall be upper case" id="MISRA2008-2_13_4" origId="CODSTA-51" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Narrow and wide string literals shall not be concatenated" id="MISRA2008-2_13_5" origId="PB-38" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Trigraphs shall not be used" id="MISRA2008-2_3_1" origId="MISRA2004-4_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2008-2_7_1" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code shall not be &quot;commented out&quot; using C-style comments" id="MISRA2008-2_7_2" origId="MISRA2004-2_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="It shall be possible to include any header file in multiple translation units without violating the One Definition Rule" id="MISRA2008-3_1_1" origId="PFO-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be declared at block scope" id="MISRA2008-3_1_2" origId="MISRA2004-8_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="When an array is declared, its size shall either be stated explicitly or defined implicitly by initialization" id="MISRA2008-3_1_3" origId="MISRA2004-8_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All declarations of an object or function shall have compatible types" id="MISRA2008-3_2_1" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The One Definition Rule shall not be violated" id="MISRA2008-3_2_2" origId="GLOBAL-ONEDEFRULE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A type, object or function that is used in multiple translation units shall be declared in one and only one file" id="MISRA2008-3_2_3" origId="GLOBAL-ONEFILEDECL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2008-3_2_4" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="MISRA2008" desc="Objects or functions with external linkage shall be declared in a header file" id="MISRA2008-3_3_1" origId="MISRA-023" sev="2" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a function has internal linkage then all re-declarations shall include the static storage class specifier" id="MISRA2008-3_3_2" origId="CODSTA-81" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_a" origId="OPT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier declared to be an object or type shall be defined in a block that minimizes its visibility" id="MISRA2008-3_4_1_b" origId="MISRA2004-8_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The types used for an object, a function return type, or a function parameter shall be token-for-token identical in all declarations and re-declarations" id="MISRA2008-3_9_1" origId="CODSTA-67" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The underlying bit representations of floating-point values shall not be used" id="MISRA2008-3_9_3" origId="MISRA2004-12_12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="NULL shall not be used as an integer value" id="MISRA2008-4_10_1" origId="CODSTA-CPP-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRA2008-4_10_2" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type bool shall not be used as operands to built-in operators other than the assignment operator =, the logical operators &amp;&amp;, ||, !, the equality operators == and !=, the unary &amp; operator, and the conditional operator" id="MISRA2008-4_5_1" origId="MISRA2004-12_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type enum shall not be used as operands to built-in operators other than [ ], =, ==, !=, &lt;, &lt;=, >, >=, and the unary &amp; operator" id="MISRA2008-4_5_2" origId="CODSTA-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Expressions with type (plain) char and wchar_t shall not be used as operands to built-in operators other than the assignment operator =, the equality operators == and !=, and the unary &amp; operator" id="MISRA2008-4_5_3" origId="CODSTA-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If the bitwise operators ~ and &lt;&lt; are applied to an operand with an underlying type of unsigned char or unsigned short, the result shall be immediately cast to the underlying type of the operand" id="MISRA2008-5_0_10" origId="MISRA2004-10_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The plain char type shall only be used for the storage and use of character values" id="MISRA2008-5_0_11" origId="MISRA2004-6_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="signed char and unsigned char type shall only be used for the storage and use of numeric values" id="MISRA2008-5_0_12" origId="MISRA2004-6_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of an if-statement and the condition of an iteration-statement shall have type bool" id="MISRA2008-5_0_13" origId="CODSTA-CPP-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The first operand of a conditional-operator shall have type bool" id="MISRA2008-5_0_14" origId="CODSTA-CPP-65" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Array indexing shall be the only form of pointer arithmetic" id="MISRA2008-5_0_15" origId="MISRA2004-17_4" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-5_0_16_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2008-5_0_16_b" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2008-5_0_17" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2008-5_0_18" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The declaration of objects shall contain no more than two levels of pointer indirection" id="MISRA2008-5_0_19" origId="MISRA2004-17_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2008-5_0_1_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Non-constant operands to a binary bitwise operator shall have the same underlying type" id="MISRA2008-5_0_20" origId="CODSTA-66" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bitwise operators shall only be applied to operands of unsigned underlying type" id="MISRA2008-5_0_21" origId="CODSTA-63" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_a" origId="MISRA2004-10_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_b" origId="MISRA2004-10_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cvalue expression shall not be implicitly converted to a different underlying type" id="MISRA2008-5_0_3_c" origId="MISRA2004-10_1_i" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="An implicit integral conversion shall not change the signedness of the underlying type" id="MISRA2008-5_0_4_a" origId="MISRA2004-10_1_a" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_a" origId="MISRA2004-10_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There shall be no implicit floating-integral conversions" id="MISRA2008-5_0_5_b" origId="MISRA2004-10_1_b" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_a" origId="CODSTA-222" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_b" origId="MISRA2004-10_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An implicit integral or floating-point conversion shall not reduce the size of the underlying type" id="MISRA2008-5_0_6_c" origId="MISRA2004-10_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_a" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no explicit floating-integral conversions of a cvalue expression" id="MISRA2008-5_0_7_b" origId="CODSTA-198_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue expression" id="MISRA2008-5_0_8_b" origId="CODSTA-198" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An explicit integral conversion shall not change the signedness of the underlying type of a cvalue expression" id="MISRA2008-5_0_9" origId="MISRA2004-10_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRA2008-5_14_1" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The overloaded binary operator should be implemented in terms of its corresponding compound assignment operator" id="MISRA2008-5_17_1" origId="CODSTA-CPP-91" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma operator shall not be used" id="MISRA2008-5_18_1" origId="MISRA2004-12_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Each operand of a logical &amp;&amp; or || shall be a postfix-expression" id="MISRA2008-5_2_1" origId="CODSTA-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The &amp;&amp; operator and the || operator shall not be overloaded" id="MISRA2008-5_2_11" origId="CODSTA-CPP-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The comma &quot;,&quot; operator shall not be overloaded" id="MISRA2008-5_2_11_b" origId="CODSTA-CPP-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="MISRA2008-5_2_12" origId="PB-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="MISRA2008-5_2_2" origId="OOP-50" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" id="MISRA2008-5_2_4" origId="CODSTA-CPP-66" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not remove any const or volatile qualification from the type of a pointer or reference" id="MISRA2008-5_2_5" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast shall not convert a pointer to a function to any other pointer type, including a pointer to function type" id="MISRA2008-5_2_6" origId="CODSTA-62" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An object with pointer type shall not be converted to an unrelated pointer type, either directly or indirectly" id="MISRA2008-5_2_7" origId="MISRA2004-11_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2008" desc="An object with integer type or pointer to void type shall not be converted to an object with pointer type" id="MISRA2008-5_2_8" origId="CODSTA-65" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" id="MISRA2008-5_3_1" origId="CODSTA-CPP-67" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary minus operator shall not be applied to an expression whose underlying type is unsigned" id="MISRA2008-5_3_2" origId="MISRA2004-12_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The unary &amp; operator shall not be overloaded" id="MISRA2008-5_3_3" origId="CODSTA-CPP-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Evaluation of the operand to the sizeof operator shall not contain side effects" id="MISRA2008-5_3_4_c" origId="MISRA2004-12_3_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left hand operand" id="MISRA2008-5_8_1" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assignment operators shall not be used in sub-expressions" id="MISRA2008-6_2_1" origId="MISRA2004-13_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Floating-point expressions shall not be directly or indirectly tested for equality or inequality" id="MISRA2008-6_2_2" origId="MISRA2004-13_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character" id="MISRA2008-6_2_3" origId="MISRA2004-14_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The statement forming the body of a switch, while, do while or for statement shall be a compound statement" id="MISRA2008-6_3_1" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An if ( condition ) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement" id="MISRA2008-6_4_1" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All if ... else if constructs shall be terminated with an else clause" id="MISRA2008-6_4_2" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_b" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_c" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_d" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch statement shall be a well-formed switch statement" id="MISRA2008-6_4_3_e" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A switch-label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2008-6_4_4" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An unconditional throw or break statement shall terminate every non-empty switch-clause" id="MISRA2008-6_4_5" origId="CODSTA-64" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The final clause of a switch statement shall be the default-clause" id="MISRA2008-6_4_6" origId="CODSTA-61" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The condition of a switch statement shall not have bool type" id="MISRA2008-6_4_7" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Every switch statement shall have at least one case-clause" id="MISRA2008-6_4_8" origId="MISRA2004-15_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A for loop shall contain a single loop-counter which shall not have floating type" id="MISRA2008-6_5_1" origId="CODSTA-CPP-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If loop-counter is not modified by -- or ++, then, within condition, the loop-counter shall only be used as an operand to &lt;=, &lt;, > or >=" id="MISRA2008-6_5_2" origId="CODSTA-CPP-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall not be modified within condition or statement" id="MISRA2008-6_5_3" origId="MISRA2004-13_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The loop-counter shall be modified by one of: --, ++, -=n, or +=n; where n remains constant for the duration of the loop" id="MISRA2008-6_5_4" origId="CODSTA-CPP-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter shall not be modified within condition or expression" id="MISRA2008-6_5_5" origId="CODSTA-CPP-72" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A loop-control-variable other than the loop-counter which is modified in statement within a body of the loop shall have type bool" id="MISRA2008-6_5_6" origId="CODSTA-CPP-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRA2008-6_6_1" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRA2008-6_6_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The continue statement shall only be used within a well-formed for loop" id="MISRA2008-6_6_3" origId="CODSTA-80" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRA2008-6_6_4" origId="CODSTA-79" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall have a single point of exit at the end of the function" id="MISRA2008-6_6_5" origId="MISRA2004-14_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2008" desc="A variable which is not modified shall be const qualified" id="MISRA2008-7_1_1" origId="CODSTA-CPP-53" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2008" desc="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" id="MISRA2008-7_1_2_a" origId="MISRA2004-16_7" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A reference parameter in a function shall be declared as reference to const if the corresponding object is not modified" id="MISRA2008-7_1_2_b" origId="CODSTA-CPP-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2008-7_1_2_c" origId="MISRA2004-16_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="MISRA2008-7_2_1" origId="PB-70" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="MISRA2008" desc="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" id="MISRA2008-7_3_1" origId="CODSTA-CPP-36" sev="2" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier main shall not be used for a function other than the global function main" id="MISRA2008-7_3_2" origId="CODSTA-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="There shall be no unnamed namespaces in header files" id="MISRA2008-7_3_3" origId="CODSTA-CPP-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives shall not be used" id="MISRA2008-7_3_4" origId="CODSTA-CPP-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Multiple declarations for an identifier in the same namespace shall not straddle a using-declaration for that identifier" id="MISRA2008-7_3_5" origId="CODSTA-CPP-76" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="using-directives and using-declarations (excluding class scope or function scope using-declarations) shall not be used in header files" id="MISRA2008-7_3_6" origId="CODSTA-CPP-90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembler instructions shall only be introduced using the asm declaration" id="MISRA2008-7_4_2" origId="CODSTA-73" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Assembly language shall be encapsulated and isolated" id="MISRA2008-7_4_3" origId="CODSTA-114" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to an automatic variable (including parameters), defined within the function" id="MISRA2008-7_5_1" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2008-7_5_2_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="MISRA2008-7_5_3" origId="PB-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="MISRA2008" desc="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" id="MISRA2008-8_0_1" origId="FORMAT-33" sev="2" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Parameters in an overriding virtual function shall either use the same default arguments as the function they override, or else shall not specify any default arguments" id="MISRA2008-8_3_1" origId="OOP-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions shall not be defined using the ellipsis notation" id="MISRA2008-8_4_1" origId="MISRA-069" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration" id="MISRA2008-8_4_2" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2008-8_4_3" origId="MISRA2004-16_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A function identifier shall either be used to call the function or it shall be preceded by '&amp;'" id="MISRA2008-8_4_4" origId="MISRA2004-16_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All variables shall have a defined value before they are used" id="MISRA2008-8_5_1" origId="MISRA-030" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Braces shall be used to indicate and match the structure in the non-zero initialization of arrays and structures" id="MISRA2008-8_5_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Arrays shall not be partially initialized" id="MISRA2008-8_5_2_b" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Structures shall not be partially initialized" id="MISRA2008-8_5_2_c" origId="MISRA2004-9_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="In an enumerator list, the = construct shall not be used to explicitly initialize members other than the first, unless all items are explicitly initialized" id="MISRA2008-8_5_3" origId="MISRA2004-9_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="const member functions shall not return non-const pointers or references to class-data" id="MISRA2008-9_3_1" origId="CODSTA-CPP-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Protected member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_a" origId="OOP-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Public member functions shall not return non-const handles to class-data" id="MISRA2008-9_3_2_b" origId="OOP-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="If a member function can be made static then it shall be made static, otherwise if it can be made const then it shall be made const" id="MISRA2008-9_3_3" origId="CODSTA-CPP-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Unions shall not be used" id="MISRA2008-9_5_1" origId="MISRA2004-18_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall be either bool type or an explicitly unsigned or signed integral type" id="MISRA2008-9_6_2" origId="CODSTA-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Bit-fields shall not have enum type" id="MISRA2008-9_6_3" origId="CODSTA-74" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRA2008-9_6_4" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Classes should not be derived from virtual bases" id="MISRA2008-10_1_1" origId="OOP-47" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All accessible entity names within a multiple inheritance hierarchy should be unique" id="MISRA2008-10_2_1" origId="CODSTA-CPP-92" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="MISRA2008-12_1_2" origId="PB-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="MISRA2008-14_8_2" origId="TEMPL-08" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="An exception object should not have pointer type" id="MISRA2008-15_0_2" origId="EXCEPT-09" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="There should be at least one exception handler to catch all otherwise unhandled exceptions" id="MISRA2008-15_3_2" origId="EXCEPT-06" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The \ character should not occur in a header file name" id="MISRA2008-16_2_5" origId="NAMING-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The # and ## operators should not be used" id="MISRA2008-16_3_2" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The identifier name of a non-member object or function with static storage duration should not be reused" id="MISRA2008-2_10_5_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Digraphs should not be used" id="MISRA2008-2_5_1" origId="CODSTA-48" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Sections of code should not be &quot;commented out&quot; using C++ comments" id="MISRA2008-2_7_3" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="18;" authUrg="0;" cat="MISRA2008" desc="typedefs that indicate size and signedness should be used in place of the basic numerical types" id="MISRA2008-3_9_2" origId="MISRA-013" sev="4" total="18" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_a" origId="MISRA2004-12_1_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_b" origId="MISRA2004-12_1_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_c" origId="MISRA2004-12_1_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_d" origId="MISRA2004-12_1_d" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_e" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Limited dependence should be placed on C++ operator precedence rules in expressions" id="MISRA2008-5_0_2_f" origId="MISRA2004-12_1_f" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2008-5_19_1_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2008-5_19_1_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="The increment (++) and decrement (--) operators should not be mixed with other operators in an expression" id="MISRA2008-5_2_10" origId="MISRA2004-12_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="MISRA2008-5_2_3" origId="OOP-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="A cast should not convert a pointer type to an integral type" id="MISRA2008-5_2_9" origId="MISRA2004-11_3_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Functions should not call themselves, either directly or indirectly" id="MISRA2008-7_5_4" origId="MISRA2004-16_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid accessing arrays out of bounds" id="MISRA2008-0_3_1_a" origId="BD-PB-ARRAY" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Avoid null pointer dereferencing" id="MISRA2008-0_3_1_b" origId="BD-PB-NP" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid division by zero" id="MISRA2008-0_3_1_c" origId="BD-PB-ZERO" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2008-0_3_1_d" origId="BD-PB-OVERFFMT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2008-0_3_1_e" origId="BD-PB-OVERFNZT" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not check for null after dereferencing" id="MISRA2008-0_3_1_f" origId="BD-PB-DEREF" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when reading from a buffer" id="MISRA2008-0_3_1_g" origId="BD-PB-OVERFRD" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Avoid overflow when writing to a buffer" id="MISRA2008-0_3_1_h" origId="BD-PB-OVERFWR" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2008-0_3_1_i" origId="BD-PB-PTRSUB" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2008" desc="Do not compare two unrelated pointers" id="MISRA2008-0_3_1_j" origId="BD-PB-PTRCMP" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MISRA2008" desc="Use of floating-point arithmetic shall be documented" id="MISRA2008-0_4_2" origId="COMMENT-10" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All uses of the #pragma directive shall be documented" id="MISRA2008-16_6_1" origId="MISRA2004-3_4" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2008" desc="All usage of assembler shall be documented" id="MISRA2008-7_4_1" origId="COMMENT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Precautions shall be taken in order to prevent the contents of a header file being included more than once" id="MISRA2012-DIR-4_10" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Validate values passed to library functions" id="MISRA2012-DIR-4_11" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-DIR" desc="Dynamic memory allocation shall not be used" id="MISRA2012-DIR-4_12" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid tainted data in array indexes" id="MISRA2012-DIR-4_14_a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against integer overflow/underflow from tainted data" id="MISRA2012-DIR-4_14_b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer read overflow from tainted data" id="MISRA2012-DIR-4_14_c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer write overflow from tainted data" id="MISRA2012-DIR-4_14_d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against command injection" id="MISRA2012-DIR-4_14_e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against file name injection" id="MISRA2012-DIR-4_14_f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against SQL injection" id="MISRA2012-DIR-4_14_g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Prevent buffer overflows from tainted data" id="MISRA2012-DIR-4_14_h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRA2012-DIR-4_14_i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Protect against environment injection" id="MISRA2012-DIR-4_14_j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid printing tainted data on the output console" id="MISRA2012-DIR-4_14_k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Exclude unsanitized user input from format strings" id="MISRA2012-DIR-4_14_l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid accessing arrays out of bounds" id="MISRA2012-DIR-4_1_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid null pointer dereferencing" id="MISRA2012-DIR-4_1_b" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid division by zero" id="MISRA2012-DIR-4_1_c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRA2012-DIR-4_1_d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-DIR-4_1_e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not check for null after dereferencing" id="MISRA2012-DIR-4_1_f" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when reading from a buffer" id="MISRA2012-DIR-4_1_g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid overflow when writing to a buffer" id="MISRA2012-DIR-4_1_h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRA2012-DIR-4_1_i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not compare two unrelated pointers" id="MISRA2012-DIR-4_1_j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid integer overflows" id="MISRA2012-DIR-4_1_k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Assembly language shall be encapsulated and isolated" id="MISRA2012-DIR-4_3" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Consistently check the returned value of non-void functions" id="MISRA2012-DIR-4_7_a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Always check the returned value of non-void function" id="MISRA2012-DIR-4_7_b" origId="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-DIR-4_13_a" origId="BD-RES-LEAKS" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not use resources that have been freed" id="MISRA2012-DIR-4_13_b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not free resources using invalid pointers" id="MISRA2012-DIR-4_13_c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not abandon unreleased locks" id="MISRA2012-DIR-4_13_d" origId="BD-TRS-LOCK" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Avoid double locking" id="MISRA2012-DIR-4_13_e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Do not release a lock that has not been acquired" id="MISRA2012-DIR-4_13_f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="All usage of assembly language should be documented" id="MISRA2012-DIR-4_2" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Sections of code should not be &quot;commented out&quot;" id="MISRA2012-DIR-4_4" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRA2012-DIR-4_5" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs to basic types should contain some digits in their name" id="MISRA2012-DIR-4_6_a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRA2012-DIR" desc="typedefs should be used in place of the basic types" id="MISRA2012-DIR-4_6_b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRA2012-DIR-4_6_c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-DIR" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRA2012-DIR-4_8" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-DIR" desc="A function should be used in preference to a function-like macro where they are interchangeable" id="MISRA2012-DIR-4_9" origId="MISRA2004-19_7" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRA2012-RULE-12_5" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not be declared implicitly" id="MISRA2012-RULE-17_3" origId="MISRA-071_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRA2012-RULE-17_4_b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRA2012-RULE-17_6" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object shall not be assigned or copied to an overlapping object" id="MISRA2012-RULE-19_1_c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any value passed to a function in &lt;ctype.h> shall be representable as an 'unsigned char' or be the value 'EOF'" id="MISRA2012-RULE-21_13" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow due to reading a not zero terminated string" id="MISRA2012-RULE-21_17_a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-21_17_b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'size_t' argument passed to any function in &lt;string.h> shall have an appropriate value" id="MISRA2012-RULE-21_18" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRA2012-RULE-21_19_a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRA2012-RULE-21_19_b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRA2012-RULE-21_20" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-22_2_a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not free resources using invalid pointers" id="MISRA2012-RULE-22_2_b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid writing to a stream which has been opened as read only" id="MISRA2012-RULE-22_4" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced" id="MISRA2012-RULE-22_5_a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRA2012-RULE-22_5_b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a pointer to a FILE shall not be used after the associated stream has been closed" id="MISRA2012-RULE-22_6" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-9_1" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRA2012-RULE-10_1_a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRA2012-RULE-10_1_c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRA2012-RULE-10_1_d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRA2012-RULE-10_1_e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially signed or enum type should not be used as right hand side operand to the bitwise shifting operator" id="MISRA2012-RULE-10_1_f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRA2012-RULE-10_1_g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRA2012-RULE-10_2" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRA2012-RULE-10_3_a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRA2012-RULE-10_3_b" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRA2012-RULE-10_4_a" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRA2012-RULE-10_4_b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRA2012-RULE-10_6" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRA2012-RULE-10_7_b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRA2012-RULE-10_8" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to a function and any other type" id="MISRA2012-RULE-11_1_b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRA2012-RULE-11_2" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRA2012-RULE-11_3" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRA2012-RULE-11_6" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRA2012-RULE-11_7" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A cast shall not remove any const or volatile qualification from the type pointed to by a pointer" id="MISRA2012-RULE-11_8" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_a" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro NULL shall be the only permitted form of integer null pointer constant" id="MISRA2012-RULE-11_9_b" origId="CODSTA-131" sev="2" total="19" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a shift operator shall lie in the range zero to one less than the width in bits of the essential type of the left hand operand" id="MISRA2012-RULE-12_2" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Initializer lists shall not contain persistent side effects" id="MISRA2012-RULE-13_1_a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-13_2_a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-13_2_b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-13_2_c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-13_2_d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-13_2_e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-13_2_f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-13_2_g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The right hand operand of a logical &amp;&amp; or || operator shall not contain persistent side effects" id="MISRA2012-RULE-13_5" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operand of the sizeof operator shall not contain any expression which has potential side effects" id="MISRA2012-RULE-13_6_c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRA2012-RULE-14_1_a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRA2012-RULE-14_1_b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRA2012-RULE-14_2_a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The first clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The second clause of a 'for' loop shall be well-formed" id="MISRA2012-RULE-14_2_c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The third clause of a 'for' statement shall be well-formed" id="MISRA2012-RULE-14_2_d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Controlling expressions shall not be invariant" id="MISRA2012-RULE-14_3_zc" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type" id="MISRA2012-RULE-14_4" origId="MISRA2004-13_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement shall jump to a label declared later in the same function" id="MISRA2012-RULE-15_2" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Any label referenced by a goto statement shall be declared in the same block, or in any block enclosing the goto statement" id="MISRA2012-RULE-15_3" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The body of an iteration-statement or a selection-statement shall be a compound-statement" id="MISRA2012-RULE-15_6_b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All 'if ... else if' constructs shall be terminated with an 'else' statement" id="MISRA2012-RULE-15_7" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRA2012-RULE-16_1_a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_1_b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRA2012-RULE-16_1_c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRA2012-RULE-16_1_d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Always provide a default branch for switch statements" id="MISRA2012-RULE-16_1_e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_1_f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_1_g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_1_h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRA2012-RULE-16_2" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An unconditional break statement shall terminate every switch-clause" id="MISRA2012-RULE-16_3_b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every 'switch' statement shall have a 'default' label" id="MISRA2012-RULE-16_4_a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRA2012-RULE-16_4_b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A default label shall appear as either the first or the last switch label of a switch statement" id="MISRA2012-RULE-16_5" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Every switch statement shall have at least two switch-clauses" id="MISRA2012-RULE-16_6" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A switch-expression shall not have essentially Boolean type" id="MISRA2012-RULE-16_7_b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The features of &lt;stdarg.h> shall not be used" id="MISRA2012-RULE-17_1_b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions shall not call themselves, either directly or indirectly" id="MISRA2012-RULE-17_2" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRA2012-RULE-17_5" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_a" origId="CODSTA-122_a" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value returned by a function having non-void return type shall be used" id="MISRA2012-RULE-17_7_b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays out of bounds" id="MISRA2012-RULE-18_1_a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid accessing arrays and pointers out of bounds" id="MISRA2012-RULE-18_1_b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRA2012-RULE-18_1_c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Subtraction between pointers shall only be applied to pointers that address elements of the same array" id="MISRA2012-RULE-18_2" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc=">, >=, &lt;, &lt;= shall not be applied to objects of pointer type, except where they point to the same array" id="MISRA2012-RULE-18_3" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRA2012-RULE-18_6_a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRA2012-RULE-18_6_b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Flexible array members shall not be declared" id="MISRA2012-RULE-18_7" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Variable-length array types shall not be used" id="MISRA2012-RULE-18_8" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_a_c90" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_a_c99" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRA2012-RULE-1_1_b_c90" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRA2012-RULE-1_1_b_c99" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid division by zero" id="MISRA2012-RULE-1_3_a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid use before initialization" id="MISRA2012-RULE-1_3_b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use resources that have been freed" id="MISRA2012-RULE-1_3_c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when reading from a buffer" id="MISRA2012-RULE-1_3_d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid overflow when writing to a buffer" id="MISRA2012-RULE-1_3_e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRA2012-RULE-1_3_f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRA2012-RULE-1_3_g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRA2012-RULE-1_3_h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRA2012-RULE-1_3_i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRA2012-RULE-1_3_j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use more than one volatile in one expression" id="MISRA2012-RULE-1_3_k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRA2012-RULE-1_3_l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function shall not return a pointer or reference to a non-static local object" id="MISRA2012-RULE-1_3_m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The address of an object with automatic storage shall not be assigned to an object which persists after the object has ceased to exist" id="MISRA2012-RULE-1_3_n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRA2012-RULE-1_3_o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Generic' operator should not be used" id="MISRA2012-RULE-1_4_a" origId="CODSTA-216" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Noreturn' function specifier should not be used" id="MISRA2012-RULE-1_4_b" origId="CODSTA-206" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The &lt;stdnoreturn.h> header file should not be used" id="MISRA2012-RULE-1_4_c" origId="CODSTA-207" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRA2012-RULE-1_4_d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRA2012-RULE-1_4_e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Thread_local' storage class specifier should not be used" id="MISRA2012-RULE-1_4_f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRA2012-RULE-1_4_g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="MISRA2012-RULE-1_4_h" origId="CODSTA-213" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The &lt;stdalign.h> header file shall not be used" id="MISRA2012-RULE-1_4_i" origId="CODSTA-208" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRA2012-RULE-1_4_j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'rsize_t' type should not be used" id="MISRA2012-RULE-1_4_k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The 'errno_t' type should not be used" id="MISRA2012-RULE-1_4_l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRA2012-RULE-1_4_m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRA2012-RULE-1_4_n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter immediately following a # operator shall not immediately be followed by a ## operator" id="MISRA2012-RULE-20_11" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRA2012-RULE-20_12" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A line whose first token is # shall be a valid preprocessing directive" id="MISRA2012-RULE-20_13" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if, #ifdef or #ifndef directive to which they are related" id="MISRA2012-RULE-20_14" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The ', &amp; or \ characters and the /* or // character sequences shall not occur in a header file name" id="MISRA2012-RULE-20_2_b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRA2012-RULE-20_3" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A macro shall not be defined with the same name as a keyword" id="MISRA2012-RULE-20_4_b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Tokens that look like a preprocessing directive shall not occur within a macro argument" id="MISRA2012-RULE-20_6" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRA2012-RULE" desc="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" id="MISRA2012-RULE-20_7" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRA2012-RULE-20_8" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All identifiers used in the controlling expression of #if or #elif preprocessing directives shall be #define'd before evaluation" id="MISRA2012-RULE-20_9_b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library time and date functions shall not be used" id="MISRA2012-RULE-21_10" origId="SECURITY-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRA2012-RULE-21_11" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="MISRA2012-RULE-21_11_b" origId="CODSTA-108_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library function 'memcmp' shall not be used to compare null-terminated strings" id="MISRA2012-RULE-21_14" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRA2012-RULE-21_15" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRA2012-RULE-21_16" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRA2012-RULE-21_1_a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C90 code)" id="MISRA2012-RULE-21_1_b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#define and #undef shall not be used on a reserved identifier or reserved macro name (for C99 code)" id="MISRA2012-RULE-21_1_c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not #define nor #undef identifier 'defined'" id="MISRA2012-RULE-21_1_d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'system' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_21" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with name which starts with underscore shall not be declared" id="MISRA2012-RULE-21_2_a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C90 code)" id="MISRA2012-RULE-21_2_b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A reserved identifier or macro name shall not be declared (for C99 code)" id="MISRA2012-RULE-21_2_c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_3" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRA2012-RULE-21_4_b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The standard header file &lt;signal.h> shall not be used" id="MISRA2012-RULE-21_5_b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The Standard Library input/output functions shall not be used" id="MISRA2012-RULE-21_6" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRA2012-RULE" desc="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_7" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'abort' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library function 'exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions 'quick_exit' and '_Exit' of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_8_c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRA2012-RULE-21_9" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRA2012-RULE" desc="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" id="MISRA2012-RULE-22_1" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall only be tested when the last function to be called was an errno-setting-function" id="MISRA2012-RULE-22_10" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The same file shall not be opened for read and write access at the same time on different stream" id="MISRA2012-RULE-22_3" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The macro 'EOF' should be compared with the unmodified return value from the Standard Library function" id="MISRA2012-RULE-22_7" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be set to zero prior to a call to an errno-setting-function" id="MISRA2012-RULE-22_8" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The value of 'errno' shall be tested against zero after calling an errno-setting-function" id="MISRA2012-RULE-22_9" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'else' block" id="MISRA2012-RULE-2_1_a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRA2012-RULE-2_1_b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'if', 'else', 'while', 'for' block" id="MISRA2012-RULE-2_1_c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'switch' statement" id="MISRA2012-RULE-2_1_d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code in 'for' loop" id="MISRA2012-RULE-2_1_e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRA2012-RULE-2_1_f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There shall be no unreachable code after 'if' or 'switch' statement inside 'while'/'for'/'do...while' loop" id="MISRA2012-RULE-2_1_g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRA2012-RULE-2_2_a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Avoid unused values" id="MISRA2012-RULE-2_2_b" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence // shall not be used within a C-style comment" id="MISRA2012-RULE-3_1_b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRA2012-RULE-3_1_c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Line-splicing shall not be used in // comments" id="MISRA2012-RULE-3_2" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRA2012-RULE-4_1" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="External identifiers shall be distinct" id="MISRA2012-RULE-5_1" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_a_c90" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_a_c99" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRA2012-RULE-5_2_b_c90" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRA2012-RULE-5_2_b_c99" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier declared in an inner scope shall not hide an identifier declared in an outer scope" id="MISRA2012-RULE-5_3_b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRA2012-RULE-5_4_a_c90" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRA2012-RULE-5_4_a_c99" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRA2012-RULE-5_4_b_c90" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRA2012-RULE-5_4_b_c99" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c90)" id="MISRA2012-RULE-5_5_c90" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be distinct from macro names (c99)" id="MISRA2012-RULE-5_5_c99" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A typedef name shall be a unique identifier" id="MISRA2012-RULE-5_6_b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused for other purpose within the program" id="MISRA2012-RULE-5_7_a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A tag name shall not be reused to define a different tag" id="MISRA2012-RULE-5_7_b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRA2012-RULE-5_8" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Bit-fields shall only be declared with an appropriate type" id="MISRA2012-RULE-6_1" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Single-bit named bit fields shall not be of a signed type" id="MISRA2012-RULE-6_2" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Octal constants shall not be used" id="MISRA2012-RULE-7_1" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A 'u' or 'U' suffix shall be applied to all integer constants that are represented in an unsigned type" id="MISRA2012-RULE-7_2" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The lowercase character 'l' shall not be used in a literal suffix" id="MISRA2012-RULE-7_3" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A string literal shall not be assigned to an object unless the object's type is pointer to const-qualified char" id="MISRA2012-RULE-7_4" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An inline function shall be declared with the static storage class" id="MISRA2012-RULE-8_10" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRA2012-RULE-8_12" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The restrict type qualifier shall not be used" id="MISRA2012-RULE-8_14" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRA2012-RULE-8_1_b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRA2012-RULE-8_2_a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall have named parameters" id="MISRA2012-RULE-8_2_b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Function types shall be in prototype form" id="MISRA2012-RULE-8_2_c" origId="CODSTA-159" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRA2012-RULE-8_3_a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRA2012-RULE-8_3_b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="All declarations of an object or function shall have compatible types" id="MISRA2012-RULE-8_3_c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_a" origId="CODSTA-118" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A compatible declaration shall be visible when an object or function with external linkage is defined" id="MISRA2012-RULE-8_4_b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRA2012-RULE-8_5" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An identifier with external linkage shall have exactly one external definition" id="MISRA2012-RULE-8_6" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The static storage class specifier shall be used in all declarations of objects and functions that have internal linkage" id="MISRA2012-RULE-8_8" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRA2012-RULE-9_2" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Arrays shall not be partially initialized" id="MISRA2012-RULE-9_3" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An element of an object shall not be initialized more than once" id="MISRA2012-RULE-9_4" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRA2012-RULE-9_5" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The cast operation to essentially enumeration type is not allowed" id="MISRA2012-RULE-10_5_a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not cast from or to essentially Boolean type" id="MISRA2012-RULE-10_5_b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Do not use casts between essentially character types and essentially floating types" id="MISRA2012-RULE-10_5_c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRA2012-RULE-11_4" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRA2012-RULE-11_5" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Use parentheses unless all operators in the expression are the same" id="MISRA2012-RULE-12_1_a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRA2012-RULE-12_1_b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Parenthesis shall be used with 'sizeof' statement" id="MISRA2012-RULE-12_1_c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The comma operator should not be used" id="MISRA2012-RULE-12_3" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRA2012-RULE-12_4_a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRA2012-RULE-12_4_b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that caused by the increment or decrement operator" id="MISRA2012-RULE-13_3" origId="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The result of an assignment operator should not be used" id="MISRA2012-RULE-13_4" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The goto statement should not be used" id="MISRA2012-RULE-15_1" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no more than one break or goto statement used to terminate any iteration statement" id="MISRA2012-RULE-15_4" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should have a single point of exit at the end" id="MISRA2012-RULE-15_5" origId="MISRA2004-14_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function parameter should not be modified" id="MISRA2012-RULE-17_8" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRA2012-RULE-18_4" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declarations should contain no more than two levels of pointer nesting" id="MISRA2012-RULE-18_5" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The union keyword should not be used" id="MISRA2012-RULE-19_2" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#include directives should only be preceded by preprocessor directives or comments" id="MISRA2012-RULE-20_1" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The # and ## preprocessor operators should not be used" id="MISRA2012-RULE-20_10" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="#undef should not be used" id="MISRA2012-RULE-20_5" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="The exception handling features of &lt;fenv.h> should not be used" id="MISRA2012-RULE-21_12" origId="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused type declarations" id="MISRA2012-RULE-2_3_a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused type declarations" id="MISRA2012-RULE-2_3_b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused local tag declarations" id="MISRA2012-RULE-2_4_a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused tag declarations" id="MISRA2012-RULE-2_4_b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A source file should not contain unused macro definitions" id="MISRA2012-RULE-2_5" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="A function should not contain unused label declarations" id="MISRA2012-RULE-2_6" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="There should be no unused parameters in functions" id="MISRA2012-RULE-2_7" origId="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Trigraphs should not be used" id="MISRA2012-RULE-4_2" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Identifiers that define objects or functions with internal linkage should be unique" id="MISRA2012-RULE-5_9_b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="When an array with external linkage is declared, its size should be explicitly specified" id="MISRA2012-RULE-8_11" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRA2012-RULE" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_a" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRA2012-RULE-8_13_b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRA2012-RULE-8_7" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRA2012-RULE" desc="An object should be defined at block scope if its identifier only appears in a single function" id="MISRA2012-RULE-8_9" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-DIR_4_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid null pointer dereferencing" id="MISRAC2012-DIR_4_1-b" origId="BD-PB-NP" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid division by zero" id="MISRAC2012-DIR_4_1-c" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid buffer overflow due to defining incorrect format limits" id="MISRAC2012-DIR_4_1-d" origId="BD-PB-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-DIR_4_1-e" origId="BD-PB-OVERFNZT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not check for null after dereferencing" id="MISRAC2012-DIR_4_1-f" origId="BD-PB-DEREF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-DIR_4_1-g" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-DIR_4_1-h" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-DIR_4_1-i" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Do not compare two unrelated pointers" id="MISRAC2012-DIR_4_1-j" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_1" desc="Avoid integer overflows" id="MISRAC2012-DIR_4_1-k" origId="BD-PB-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_10" desc="Use multiple include guards" id="MISRAC2012-DIR_4_10-a" origId="PFO-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_11" desc="Validate values passed to library functions" id="MISRAC2012-DIR_4_11-a" origId="BD-API-VALPARAM" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-DIR_4_12" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-DIR_4_12-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Ensure resources are freed" id="MISRAC2012-DIR_4_13-a" origId="BD-RES-LEAKS" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not use resources that have been freed" id="MISRAC2012-DIR_4_13-b" origId="BD-RES-FREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not free resources using invalid pointers" id="MISRAC2012-DIR_4_13-c" origId="BD-RES-INVFREE" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not abandon unreleased locks" id="MISRAC2012-DIR_4_13-d" origId="BD-TRS-LOCK" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Avoid double locking" id="MISRAC2012-DIR_4_13-e" origId="BD-TRS-DLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_13" desc="Do not release a lock that has not been acquired" id="MISRAC2012-DIR_4_13-f" origId="BD-TRS-REVLOCK" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid tainted data in array indexes" id="MISRAC2012-DIR_4_14-a" origId="BD-SECURITY-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against integer overflow/underflow from tainted data" id="MISRAC2012-DIR_4_14-b" origId="BD-SECURITY-INTOVERF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer read overflow from tainted data" id="MISRAC2012-DIR_4_14-c" origId="BD-SECURITY-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer write overflow from tainted data" id="MISRAC2012-DIR_4_14-d" origId="BD-SECURITY-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against command injection" id="MISRAC2012-DIR_4_14-e" origId="BD-SECURITY-TDCMD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against file name injection" id="MISRAC2012-DIR_4_14-f" origId="BD-SECURITY-TDFNAMES" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against SQL injection" id="MISRAC2012-DIR_4_14-g" origId="BD-SECURITY-TDSQL" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Prevent buffer overflows from tainted data" id="MISRAC2012-DIR_4_14-h" origId="BD-SECURITY-BUFWRITE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="MISRAC2012-DIR_4_14-i" origId="BD-SECURITY-OVERFFMT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Protect against environment injection" id="MISRAC2012-DIR_4_14-j" origId="BD-SECURITY-TDENV" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Avoid printing tainted data on the output console" id="MISRAC2012-DIR_4_14-k" origId="BD-SECURITY-TDCONSOLE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_14" desc="Exclude unsanitized user input from format strings" id="MISRAC2012-DIR_4_14-l" origId="BD-SECURITY-TDINPUT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_2" desc="All usage of assembler shall be documented" id="MISRAC2012-DIR_4_2-a" origId="COMMENT-09" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_3" desc="Assembly language shall be encapsulated and isolated" id="MISRAC2012-DIR_4_3-a" origId="MISRA2004-2_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_4" desc="Sections of code should not be &quot;commented out&quot;" id="MISRAC2012-DIR_4_4-a" origId="MISRA2004-2_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_5" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="MISRAC2012-DIR_4_5-a" origId="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs to basic types should contain some digits in their name" id="MISRAC2012-DIR_4_6-a" origId="MISRA2004-6_3" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="15;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="typedefs should be used in place of the basic types" id="MISRAC2012-DIR_4_6-b" origId="MISRA2004-6_3_b" sev="4" total="15" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_6" desc="Use typedefs from stdint.h instead of declaring your own in C99 code" id="MISRAC2012-DIR_4_6-c" origId="CODSTA-155" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Consistently check the returned value of non-void functions" id="MISRAC2012-DIR_4_7-a" origId="BD-PB-CHECKRET" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_7" desc="Always check the returned value of non-void function" id="MISRAC2012-DIR_4_7-b" origId="BD-PB-CHECKRETGEN" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-DIR_4_8" desc="If a pointer to a structure or union is never dereferenced within a translation unit, then the implementation of the object should be hidden" id="MISRAC2012-DIR_4_8-a" origId="CODSTA-115" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-DIR_4_9" desc="A function should be used in preference to a function-like macro" id="MISRAC2012-DIR_4_9-a" origId="MISRA2004-19_7" sev="4" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An expression of essentially Boolean type should always be used where an operand is interpreted as a Boolean value" id="MISRAC2012-RULE_10_1-a" origId="CODSTA-161_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially Boolean type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-b" origId="CODSTA-161_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially character type should not be used where an operand is interpreted as a numeric value" id="MISRAC2012-RULE_10_1-c" origId="CODSTA-161_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially enum type should not be used in an arithmetic operation" id="MISRAC2012-RULE_10_1-d" origId="CODSTA-161_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="Shift and bitwise operations should not be performed on operands of essentially signed or enum type" id="MISRAC2012-RULE_10_1-e" origId="CODSTA-161_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially signed or enum type should not be used as the right hand operand to the bitwise shifting operator" id="MISRAC2012-RULE_10_1-f" origId="CODSTA-161_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_1" desc="An operand of essentially unsigned type should not be used as the operand to the unary minus operator" id="MISRAC2012-RULE_10_1-g" origId="CODSTA-161_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_2" desc="Expressions of essentially character type shall not be used inappropriately in addition and subtraction operations" id="MISRAC2012-RULE_10_2-a" origId="CODSTA-162" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object with a narrower essential type" id="MISRAC2012-RULE_10_3-a" origId="CODSTA-163_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_3" desc="The value of an expression shall not be assigned to an object of a different essential type category" id="MISRAC2012-RULE_10_3-b" origId="CODSTA-163_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category" id="MISRAC2012-RULE_10_4-a" origId="CODSTA-164_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_4" desc="The second and third operands of the ternary operator shall have the same essential type category" id="MISRAC2012-RULE_10_4-b" origId="CODSTA-164_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="The cast operation to essentially enumeration type is not allowed" id="MISRAC2012-RULE_10_5-a" origId="CODSTA-165_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not cast from or to essentially Boolean type" id="MISRAC2012-RULE_10_5-b" origId="CODSTA-165_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_5" desc="Do not use casts between essentially character types and essentially floating types" id="MISRAC2012-RULE_10_5-c" origId="CODSTA-165_c" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_6" desc="The value of a composite expression shall not be assigned to an object with wider essential type" id="MISRAC2012-RULE_10_6-a" origId="CODSTA-157" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one operand of an operator in which the usual arithmetic conversions are performed then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-a" origId="CODSTA-156_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_7" desc="If a composite expression is used as one (second or third) operand of a conditional operator then the other operand shall not have wider essential type" id="MISRAC2012-RULE_10_7-b" origId="CODSTA-156_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_10_8" desc="The value of a composite expression shall not be cast to a different essential type category or a wider essential type" id="MISRAC2012-RULE_10_8-a" origId="CODSTA-152" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between a pointer to a function and any other type than pointer to function" id="MISRAC2012-RULE_11_1-a" origId="CODSTA-124_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_1" desc="Conversions shall not be performed between non compatible pointer to a function types" id="MISRAC2012-RULE_11_1-b" origId="CODSTA-124_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_2" desc="Conversions shall not be performed between a pointer to an incomplete type and any other type" id="MISRAC2012-RULE_11_2-a" origId="CODSTA-125" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_3" desc="A cast shall not be performed between a pointer to object type and a pointer to a different object type" id="MISRAC2012-RULE_11_3-a" origId="CODSTA-126" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_4" desc="A conversion should not be performed between a pointer to object and an integer type" id="MISRAC2012-RULE_11_4-a" origId="CODSTA-127" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_5" desc="A conversion should not be performed from pointer to void into pointer to object" id="MISRAC2012-RULE_11_5-a" origId="CODSTA-128" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_6" desc="A cast shall not be performed between pointer to void and an arithmetic type" id="MISRAC2012-RULE_11_6-a" origId="CODSTA-129_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_7" desc="A cast shall not be performed between pointer to object and a non-integer arithmetic type" id="MISRAC2012-RULE_11_7-a" origId="CODSTA-130" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_11_8" desc="A cast shall not remove any 'const' or 'volatile' qualification from the type of a pointer or reference" id="MISRAC2012-RULE_11_8-a" origId="MISRA2004-11_5" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Literal zero (0) shall not be used as the null-pointer-constant" id="MISRAC2012-RULE_11_9-a" origId="CODSTA-CPP-63" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="19;" authUrg="0;" cat="MISRAC2012-RULE_11_9" desc="Use NULL instead of literal zero (0) as the null-pointer-constant" id="MISRAC2012-RULE_11_9-b" origId="CODSTA-131" sev="2" total="19" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="Use parentheses unless all operators in the expression are the same" id="MISRAC2012-RULE_12_1-a" origId="MISRA2004-12_1_e" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operands of a logical &amp;&amp; or || shall be primary-expressions" id="MISRAC2012-RULE_12_1-b" origId="MISRA2004-12_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_1" desc="The operand of the 'sizeof' operator should be enclosed in parentheses" id="MISRAC2012-RULE_12_1-c" origId="FORMAT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_2" desc="The right-hand operand of a shift operator shall lie between zero and one less than the width in bits of the underlying type of the left-hand operand" id="MISRAC2012-RULE_12_2-a" origId="MISRA2004-12_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_3" desc="The comma operator shall not be used" id="MISRAC2012-RULE_12_3-a" origId="MISRA2004-12_10" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="MISRAC2012-RULE_12_4-a" origId="PB-66_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_4" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="MISRAC2012-RULE_12_4-b" origId="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_12_5" desc="The 'sizeof' operator shall not have an operand which is a function parameter declared as &quot;array of type&quot;" id="MISRAC2012-RULE_12_5-a" origId="CODSTA-182" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_1" desc="Initializer lists shall not contain persistent side effects" id="MISRAC2012-RULE_13_1-a" origId="CODSTA-141_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_13_2-a" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_13_2-b" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_13_2-c" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_13_2-d" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_13_2-e" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_13_2-f" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_2" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_13_2-g" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_3" desc="A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects" id="MISRAC2012-RULE_13_3-a" origId="CODSTA-123" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_4" desc="The result of a built-in assignment operator should not be used" id="MISRAC2012-RULE_13_4-a" origId="CODSTA-138" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_5" desc="The right-hand operand of a logical &amp;&amp; or || operator shall not contain side effects" id="MISRAC2012-RULE_13_5-a" origId="MISRA2004-12_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The operand of the sizeof operator shall not contain any expression which has side effects" id="MISRAC2012-RULE_13_6-a" origId="MISRA2004-12_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="Object designated by a volatile lvalue should not be accessed in the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-b" origId="MISRA2004-12_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_13_6" desc="The function call shall not be the operand of the sizeof operator" id="MISRAC2012-RULE_13_6-c" origId="CODSTA-137" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in a 'for' loop shall not have essentially floating type" id="MISRAC2012-RULE_14_1-a" origId="CODSTA-167_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_1" desc="A loop counter in 'while' and 'do-while' loops shall not have essentially floating type" id="MISRAC2012-RULE_14_1-b" origId="CODSTA-167_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="There shall only be one loop counter in a 'for' loop, which shall not be modified in the 'for' loop body" id="MISRAC2012-RULE_14_2-a" origId="CODSTA-168" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The first clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-b" origId="CODSTA-169_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The second clause of a 'for' loop shall be well-formed" id="MISRAC2012-RULE_14_2-c" origId="CODSTA-169_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_2" desc="The third clause of a 'for' statement shall be well-formed" id="MISRAC2012-RULE_14_2-d" origId="CODSTA-169_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_3" desc="Avoid conditions that always evaluate to the same value" id="MISRAC2012-RULE_14_3-ac" origId="BD-PB-CC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_14_4" desc="Tests of a value against zero should be made explicit, unless the operand is effectively Boolean" id="MISRAC2012-RULE_14_4-a" origId="MISRA2004-13_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_1" desc="The goto statement shall not be used" id="MISRAC2012-RULE_15_1-a" origId="MISRA2004-14_4" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_2" desc="The goto statement shall jump to a label declared later in the same function body" id="MISRAC2012-RULE_15_2-a" origId="CODSTA-77" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_3" desc="Any label referenced by a goto statement shall be declared in the same block, or in a block enclosing the goto statement" id="MISRAC2012-RULE_15_3-a" origId="CODSTA-78" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_4" desc="For any iteration statement there shall be no more than one break or goto statement used for loop termination" id="MISRAC2012-RULE_15_4-a" origId="CODSTA-79" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_5" desc="A function shall have a single point of exit at the end of the function" id="MISRAC2012-RULE_15_5-a" origId="MISRA2004-14_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="The statement forming the body of a 'switch', 'while', 'do...while' or 'for' statement shall be a compound statement" id="MISRAC2012-RULE_15_6-a" origId="MISRA2004-14_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_6" desc="'if' and 'else' should be followed by a compound statement" id="MISRAC2012-RULE_15_6-b" origId="MISRA2004-14_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_15_7" desc="All 'if...else-if' constructs shall be terminated with an 'else' clause" id="MISRAC2012-RULE_15_7-a" origId="MISRA2004-14_10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch statement shall only contain switch labels and switch clauses, and no other code" id="MISRAC2012-RULE_16_1-a" origId="MISRA2004-15_0_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_1-b" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_1-c" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_1-d" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_1-e" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_1-f" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_1-g" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_1" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_1-h" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_2" desc="A switch label shall only be used when the most closely-enclosing compound statement is the body of a switch statement" id="MISRAC2012-RULE_16_2-a" origId="MISRA2004-15_1" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty case clause" id="MISRAC2012-RULE_16_3-a" origId="MISRA2004-15_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_3" desc="An unconditional break statement shall terminate every non-empty default clause" id="MISRAC2012-RULE_16_3-b" origId="MISRA2004-15_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="Always provide a default branch for switch statements" id="MISRAC2012-RULE_16_4-a" origId="CODSTA-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_4" desc="A 'default' label shall have a statement or a comment before terminating 'break'" id="MISRAC2012-RULE_16_4-b" origId="CODSTA-119" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_5" desc="A 'default' label, if it exists, shall appear as either the first or the last switch label of a switch statement" id="MISRAC2012-RULE_16_5-a" origId="CODSTA-116" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_6" desc="Every switch statement shall have at least two switch-clauses" id="MISRAC2012-RULE_16_6-a" origId="OPT-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-a" origId="MISRA2004-15_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_16_7" desc="A switch expression shall not represent a value that is effectively Boolean" id="MISRAC2012-RULE_16_7-b" origId="MISRA2004-15_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end, va_copy should not be used" id="MISRAC2012-RULE_17_1-a" origId="CODSTA-136_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_1" desc="The identifiers va_list, va_arg, va_start, va_end should not be used" id="MISRAC2012-RULE_17_1-b" origId="CODSTA-136_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_2" desc="Functions shall not call themselves, either directly or indirectly" id="MISRAC2012-RULE_17_2-a" origId="MISRA2004-16_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_3" desc="Functions shall always have visible prototype at the function call" id="MISRAC2012-RULE_17_3-a" origId="MISRA-071_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-a" origId="MISRA2004-16_8" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_4" desc="All exit paths from a function, except main(), with non-void return type shall have an explicit return statement with an expression" id="MISRAC2012-RULE_17_4-b" origId="MISRA2004-16_8_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_5" desc="The function argument corresponding to a parameter declared to have an array type shall have an appropriate number of elements" id="MISRAC2012-RULE_17_5-a" origId="CODSTA-134" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_6" desc="The declaration of an array parameter shall not contain the 'static' keyword between the [ ]" id="MISRAC2012-RULE_17_6-a" origId="CODSTA-160" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="17;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-a" origId="CODSTA-122_a" sev="2" total="17" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_7" desc="The value returned by a function having non-void return type shall be used" id="MISRAC2012-RULE_17_7-b" origId="CODSTA-122_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_17_8" desc="A function parameter should not be modified" id="MISRAC2012-RULE_17_8-a" origId="CODSTA-132" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays out of bounds" id="MISRAC2012-RULE_18_1-a" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="Avoid accessing arrays and pointers out of bounds" id="MISRAC2012-RULE_18_1-b" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_1" desc="A pointer operand and any pointer resulting from pointer arithmetic using that operand shall both address elements of the same array" id="MISRAC2012-RULE_18_1-c" origId="BD-PB-PTRARR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_2" desc="Do not subtract two pointers that do not address elements of the same array" id="MISRAC2012-RULE_18_2-a" origId="BD-PB-PTRSUB" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_3" desc="Do not compare two unrelated pointers" id="MISRAC2012-RULE_18_3-a" origId="BD-PB-PTRCMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_4" desc="The +, -, += and -= operators should not be applied to an expression of pointer type" id="MISRAC2012-RULE_18_4-a" origId="CODSTA-181" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_5" desc="The declaration of objects should contain no more than 2 levels of pointer indirection" id="MISRAC2012-RULE_18_5-a" origId="MISRA2004-17_5" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_18_6-a" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_6" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_18_6-b" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_7" desc="Flexible array members shall not be declared" id="MISRAC2012-RULE_18_7-a" origId="CODSTA-113" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_18_8" desc="Variable-length array types shall not be used" id="MISRAC2012-RULE_18_8-a" origId="CODSTA-112" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-a" origId="MISRA2004-18_2" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned to an overlapping object" id="MISRAC2012-RULE_19_1-b" origId="MISRA2004-18_2_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_1" desc="An object shall not be assigned or copied to an overlapping object" id="MISRAC2012-RULE_19_1-c" origId="BD-PB-OVERLAP" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_19_2" desc="The union keyword should not be used" id="MISRAC2012-RULE_19_2-a" origId="CODSTA-111" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-a" origId="CODSTA-174_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-b" origId="CODSTA-174_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c90)" id="MISRAC2012-RULE_1_1-c" origId="CODSTA-174_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_1" desc="A program should not exceed the translation limits imposed by The Standard (c99)" id="MISRAC2012-RULE_1_1-d" origId="CODSTA-174_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid division by zero" id="MISRAC2012-RULE_1_3-a" origId="BD-PB-ZERO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid use before initialization" id="MISRAC2012-RULE_1_3-b" origId="BD-PB-NOTINIT" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_1_3-c" origId="BD-RES-FREE" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when reading from a buffer" id="MISRAC2012-RULE_1_3-d" origId="BD-PB-OVERFRD" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_1_3-e" origId="BD-PB-OVERFWR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The value of an expression shall be the same under any order of evaluation that the standard permits" id="MISRAC2012-RULE_1_3-f" origId="MISRA2004-12_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function arguments" id="MISRAC2012-RULE_1_3-g" origId="MISRA2004-12_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function designator and function arguments" id="MISRAC2012-RULE_1_3-h" origId="MISRA2004-12_2_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of expression that involves a function call" id="MISRAC2012-RULE_1_3-i" origId="MISRA2004-12_2_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Between sequence points an object shall have its stored value modified at most once by the evaluation of an expression" id="MISRAC2012-RULE_1_3-j" origId="MISRA2004-12_2_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Do not use more than one volatile between two adjacent sequence points" id="MISRAC2012-RULE_1_3-k" origId="MISRA2004-12_2_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="Don't write code that depends on the order of evaluation of function calls" id="MISRAC2012-RULE_1_3-l" origId="MISRA2004-12_2_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be returned from a function" id="MISRAC2012-RULE_1_3-m" origId="MISRA2004-17_6_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The address of an object with automatic storage shall not be assigned to another object that may persist after the first object has ceased to exist" id="MISRAC2012-RULE_1_3-n" origId="MISRA2004-17_6_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_3" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="MISRAC2012-RULE_1_3-o" origId="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Generic' operator should not be used" id="MISRAC2012-RULE_1_4-a" origId="CODSTA-216" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Noreturn' function specifier should not be used" id="MISRAC2012-RULE_1_4-b" origId="CODSTA-206" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The &lt;stdnoreturn.h> header file should not be used" id="MISRAC2012-RULE_1_4-c" origId="CODSTA-207" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Atomic' type specifier and the '_Atomic' type qualifier should not be used" id="MISRAC2012-RULE_1_4-d" origId="CODSTA-214" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;stdatomic.h> should not be used" id="MISRAC2012-RULE_1_4-e" origId="CODSTA-209" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Thread_local' storage class specifier should not be used" id="MISRAC2012-RULE_1_4-f" origId="CODSTA-210" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The facilities that are specified as being provided by &lt;threads.h> should not be used" id="MISRAC2012-RULE_1_4-g" origId="CODSTA-211" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '_Alignas' alignment specifier and the '_Alignof' operator should not be used" id="MISRAC2012-RULE_1_4-h" origId="CODSTA-213" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The &lt;stdalign.h> header file shall not be used" id="MISRAC2012-RULE_1_4-i" origId="CODSTA-208" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The '__STDC_WANT_LIB_EXT1__' macro should not be defined to the value other than '0'" id="MISRAC2012-RULE_1_4-j" origId="CODSTA-215" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'rsize_t' type should not be used" id="MISRAC2012-RULE_1_4-k" origId="CODSTA-212" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="The 'errno_t' type should not be used" id="MISRAC2012-RULE_1_4-l" origId="CODSTA-217" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use following macros: RSIZE_MAX, L_tmpnam_s, TMP_MAX_S" id="MISRAC2012-RULE_1_4-m" origId="CODSTA-218" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_1_4" desc="Do not use the functions defined in Annex K of ISO/IEC 9899:2011 standard" id="MISRAC2012-RULE_1_4-n" origId="CODSTA-219" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_1" desc="#include statements in a file should only be preceded by other preprocessor directives or comments" id="MISRAC2012-RULE_20_1-a" origId="MISRA2004-19_1" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_10" desc="The # and ## preprocessor operators should not be used" id="MISRAC2012-RULE_20_10-a" origId="MISRA2004-19_13" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_11" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="MISRAC2012-RULE_20_11-a" origId="PREPROC-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_12" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="MISRAC2012-RULE_20_12-a" origId="PREPROC-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_13" desc="Preprocessing directives shall be syntactically meaningful even when excluded by the preprocessor" id="MISRAC2012-RULE_20_13-a" origId="MISRA2004-19_16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_14" desc="All #else, #elif and #endif preprocessor directives shall reside in the same file as the #if or #ifdef directive to which they are related" id="MISRAC2012-RULE_20_14-a" origId="MISRA2004-19_17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="MISRAC2012-RULE_20_2-a" origId="NAMING-46" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_2" desc="The \ character should not occur in a header file name" id="MISRAC2012-RULE_20_2-b" origId="NAMING-48" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_3" desc="The #include directive shall be followed by either a &lt;filename> or &quot;filename&quot; sequence" id="MISRAC2012-RULE_20_3-a" origId="MISRA-089" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C90" id="MISRAC2012-RULE_20_4-a" origId="CODSTA-133_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_4" desc="A macro shall not be defined with the same name as a keyword in C99" id="MISRAC2012-RULE_20_4-b" origId="CODSTA-133_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_5" desc="#undef shall not be used" id="MISRAC2012-RULE_20_5-a" origId="PREPROC-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_6" desc="Arguments to a function-like macro shall not contain tokens that look like preprocessing directives" id="MISRAC2012-RULE_20_6-a" origId="MISRA2004-19_9" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="MISRAC2012-RULE_20_7" desc="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" id="MISRAC2012-RULE_20_7-a" origId="MISRA2004-19_10" sev="2" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_8" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="MISRAC2012-RULE_20_8-a" origId="PREPROC-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_20_9" desc="Do not use in preprocessor directives #if and #elif macros not defined in translation unit" id="MISRAC2012-RULE_20_9-b" origId="MISRA2004-19_11_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define or #undef identifiers with names which start with underscore" id="MISRAC2012-RULE_21_1-a" origId="MISRA2004-20_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C90 code)" id="MISRAC2012-RULE_21_1-b" origId="CODSTA-92_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Reserved identifiers, macros and functions in the standard library, shall not be defined, redefined or undefined (C99 code)" id="MISRAC2012-RULE_21_1-c" origId="CODSTA-92_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_1" desc="Do not #define nor #undef identifier 'defined'" id="MISRAC2012-RULE_21_1-d" origId="MISRA2004-20_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_10" desc="Avoid functions which use time from standard C library" id="MISRAC2012-RULE_21_10-a" origId="SECURITY-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The standard header file &lt;tgmath.h> shall not be used" id="MISRAC2012-RULE_21_11-a" origId="CODSTA-108" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_11" desc="The facilities that are specified as being provided by &lt;tgmath.h> should not be used" id="MISRAC2012-RULE_21_11-b" origId="CODSTA-108_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_12" desc="The exception handling features of &lt;fenv.h> should not be used" id="MISRAC2012-RULE_21_12-a" origId="CODSTA-109" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_13" desc="Do not pass incorrect values to ctype.h library functions" id="MISRAC2012-RULE_21_13-a" origId="BD-API-CTYPE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_14" desc="The Standard Library function memcmp shall not be used to compare null terminated strings" id="MISRAC2012-RULE_21_14-a" origId="BD-PB-MCCSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_15" desc="The pointer arguments to the Standard Library functions 'memcmp', 'memmove' and 'memcmp' shall be pointers to qualified or unqualified versions of compatible types" id="MISRAC2012-RULE_21_15-a" origId="CODSTA-183" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_16" desc="The pointer arguments to the Standard Library function 'memcmp' shall point to either a pointer type, an essentially signed type, an essentially unsigned type, an essentially Boolean type or an essentially enum type" id="MISRAC2012-RULE_21_16-a" origId="CODSTA-184" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow due to reading a not zero terminated string" id="MISRAC2012-RULE_21_17-a" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_17" desc="Avoid overflow when writing to a buffer" id="MISRAC2012-RULE_21_17-b" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_18" desc="The size_t argument passed to any function in string.h shall have an appropriate value" id="MISRAC2012-RULE_21_18-a" origId="BD-API-STRSIZE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="The pointers returned by the Standard Library functions 'localeconv', 'getenv', 'setlocale' or, 'strerror' shall only be used as if they have pointer to const-qualified type" id="MISRAC2012-RULE_21_19-a" origId="CODSTA-185_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_19" desc="Strings pointed by members of the structure 'lconv' should not be modified" id="MISRAC2012-RULE_21_19-b" origId="CODSTA-185_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused" id="MISRAC2012-RULE_21_2-a" origId="MISRA2004-20_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C90)" id="MISRAC2012-RULE_21_2-b" origId="MISRA2004-20_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_2" desc="The names of standard library macros, objects and functions shall not be reused (C99)" id="MISRAC2012-RULE_21_2-c" origId="MISRA2004-20_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_20" desc="Pointers returned by certain Standard Library functions should not be used following a subsequent call to the same or related function" id="MISRAC2012-RULE_21_20-a" origId="BD-PB-INVRET" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_21" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_21-a" origId="SECURITY-48_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_3" desc="Dynamic heap memory allocation shall not be used" id="MISRAC2012-RULE_21_3-a" origId="MISRA2004-20_4" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The setjmp macro and the longjmp function shall not be used" id="MISRAC2012-RULE_21_4-a" origId="MISRA2004-20_7" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_4" desc="The standard header file &lt;setjmp.h> shall not be used" id="MISRAC2012-RULE_21_4-b" origId="MISRA2004-20_7_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The standard header file &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-a" origId="MISRA2004-20_8" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_5" desc="The signal handling facilities of &lt;signal.h> shall not be used" id="MISRAC2012-RULE_21_5-b" origId="MISRA2004-20_8_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_6" desc="The Standard Library input/output functions shall not be used" id="MISRAC2012-RULE_21_6-a" origId="CODSTA-110" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MISRAC2012-RULE_21_7" desc="The library functions atof, atoi and atol from library stdlib.h shall not be used" id="MISRAC2012-RULE_21_7-a" origId="MISRA2004-20_10" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-a" origId="PB-75" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-b" origId="PB-75_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_8" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="MISRAC2012-RULE_21_8-c" origId="PB-75_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_21_9" desc="The library functions bsearch and qsort of &lt;stdlib.h> shall not be used" id="MISRAC2012-RULE_21_9-a" origId="CODSTA-107" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="MISRAC2012-RULE_22_1" desc="Ensure resources are freed" id="MISRAC2012-RULE_22_1-a" origId="BD-RES-LEAKS" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_10" desc="Properly use errno value" id="MISRAC2012-RULE_22_10-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_2-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_2" desc="Do not free resources using invalid pointers" id="MISRAC2012-RULE_22_2-b" origId="BD-RES-INVFREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_3" desc="The same file shall not be opened for read and write access at the same time on different streams" id="MISRAC2012-RULE_22_3-a" origId="BD-PB-WRRDSTR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_4" desc="Avoid writing to a stream which has been opened as read only" id="MISRAC2012-RULE_22_4-a" origId="BD-PB-WRROS" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced" id="MISRAC2012-RULE_22_5-a" origId="CODSTA-166_a" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_5" desc="A pointer to a FILE object shall not be dereferenced by a library function" id="MISRAC2012-RULE_22_5-b" origId="CODSTA-166_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_6" desc="Do not use resources that have been freed" id="MISRAC2012-RULE_22_6-a" origId="BD-RES-FREE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_7" desc="The macro EOF should be compared with the unmodified return value from the Standard Library function" id="MISRAC2012-RULE_22_7-a" origId="BD-PB-EOFCOMP" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_8" desc="Properly use errno value" id="MISRAC2012-RULE_22_8-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_22_9" desc="Properly use errno value" id="MISRAC2012-RULE_22_9-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;else&quot; block" id="MISRAC2012-RULE_2_1-a" origId="MISRA2004-14_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'return', 'break', 'continue', and 'goto' statements" id="MISRAC2012-RULE_2_1-b" origId="MISRA2004-14_1_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in &quot;if/else/while/for&quot; block" id="MISRAC2012-RULE_2_1-c" origId="MISRA2004-14_1_c" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in switch statement" id="MISRAC2012-RULE_2_1-d" origId="MISRA2004-14_1_d" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code in 'for' loop" id="MISRAC2012-RULE_2_1-e" origId="MISRA2004-14_1_e" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after 'if' or 'switch' statement" id="MISRAC2012-RULE_2_1-f" origId="MISRA2004-14_1_f" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_1" desc="There shall be no unreachable code after &quot;if&quot; or &quot;switch&quot; statement inside while/for/do...while loop" id="MISRAC2012-RULE_2_1-g" origId="MISRA2004-14_1_g" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="All non-null statements shall either have at least one side-effect however executed or cause control flow to change" id="MISRAC2012-RULE_2_2-a" origId="MISRA2004-14_2" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_2" desc="Avoid unused values" id="MISRAC2012-RULE_2_2-b" origId="BD-PB-VOVR" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A function should not contain unused type declarations" id="MISRAC2012-RULE_2_3-a" origId="CODSTA-175_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_3" desc="A source file should not contain unused type declarations" id="MISRAC2012-RULE_2_3-b" origId="CODSTA-175_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A function should not contain unused local tag declarations" id="MISRAC2012-RULE_2_4-a" origId="CODSTA-176_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_4" desc="A source file should not contain unused tag declarations" id="MISRAC2012-RULE_2_4-b" origId="CODSTA-176_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_5" desc="A source file should not contain unused macro definitions" id="MISRAC2012-RULE_2_5-a" origId="CODSTA-177" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_6" desc="A function should not contain unused label declarations" id="MISRAC2012-RULE_2_6-a" origId="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_2_7" desc="There should be no unused parameters in functions" id="MISRAC2012-RULE_2_7-a" origId="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-a" origId="MISRA2004-2_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence // shall not be used within a C-style comment" id="MISRAC2012-RULE_3_1-b" origId="COMMENT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_1" desc="The character sequence /* shall not be used within a C++-style comment" id="MISRAC2012-RULE_3_1-c" origId="COMMENT-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_3_2" desc="Line-splicing shall not be used in // comments" id="MISRAC2012-RULE_3_2-a" origId="COMMENT-13" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_1" desc="Octal and hexadecimal escape sequences shall be terminated" id="MISRAC2012-RULE_4_1-a" origId="CODSTA-117" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_4_2" desc="Trigraphs shall not be used" id="MISRAC2012-RULE_4_2-a" origId="MISRA2004-4_2" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_1" desc="External identifiers shall be distinct" id="MISRAC2012-RULE_5_1-a" origId="CODSTA-178" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-a" origId="CODSTA-179_a_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the file scope and in the same name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-b" origId="CODSTA-179_a_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c90)" id="MISRAC2012-RULE_5_2-c" origId="CODSTA-179_b_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_2" desc="Identifiers declared in the same block scope and name space shall be distinct (c99)" id="MISRAC2012-RULE_5_2-d" origId="CODSTA-179_b_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifier declared in a local or function prototype scope shall not hide an identifier declared in a global or namespace scope" id="MISRAC2012-RULE_5_3-a" origId="MISRA2004-5_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_3" desc="Identifiers declared in an inner local scope should not hide identifiers declared in an outer local scope" id="MISRAC2012-RULE_5_3-b" origId="MISRA2004-5_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c90)" id="MISRAC2012-RULE_5_4-a" origId="CODSTA-171_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of its parameters(c99)" id="MISRAC2012-RULE_5_4-b" origId="CODSTA-171_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c90)" id="MISRAC2012-RULE_5_4-c" origId="CODSTA-172_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_4" desc="The name of a macro should be distinct from the names of other macros that are currently defined(c99)" id="MISRAC2012-RULE_5_4-d" origId="CODSTA-172_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c90)" id="MISRAC2012-RULE_5_5-a" origId="CODSTA-170_c90" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_5" desc="The names of macros that exist prior to preprocessing should be distinct from the identifiers that exist after preprocessing (c99)" id="MISRAC2012-RULE_5_5-b" origId="CODSTA-170_c99" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names" id="MISRAC2012-RULE_5_6-a" origId="MISRA2004-5_3_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_6" desc="Do not reuse typedef names as a typedef name" id="MISRAC2012-RULE_5_6-b" origId="MISRA2004-5_3_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused for other purpose within the program" id="MISRAC2012-RULE_5_7-a" origId="MISRA2004-5_4_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_7" desc="A tag name shall not be reused to define a different tag" id="MISRAC2012-RULE_5_7-b" origId="MISRA2004-5_4_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_8" desc="Identifiers that define objects or functions with external linkage shall be unique" id="MISRAC2012-RULE_5_8-a" origId="CODSTA-180" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-a" origId="MISRA2004-5_5_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_5_9" desc="No object or function identifier with static storage duration should be reused" id="MISRAC2012-RULE_5_9-b" origId="MISRA2004-5_5_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_1" desc="Bit fields shall only be defined to be of type unsigned int or signed int" id="MISRAC2012-RULE_6_1-a" origId="MISRA2004-6_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_6_2" desc="Named bit-fields with signed integer type shall have a length of more than one bit" id="MISRAC2012-RULE_6_2-a" origId="CODSTA-71" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_1" desc="Octal constants (other than zero) shall not be used" id="MISRAC2012-RULE_7_1-a" origId="MISRA2004-7_1_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_2" desc="A 'U' suffix shall be applied to all constants of unsigned type" id="MISRAC2012-RULE_7_2-a" origId="MISRA2004-10_6" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_3" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="MISRAC2012-RULE_7_3-a" origId="PORT-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_7_4" desc="A string literal shall not be modified" id="MISRAC2012-RULE_7_4-a" origId="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever a function is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-a" origId="MISRA2004-8_2_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_1" desc="Whenever an object is declared or defined, its type shall be explicitly stated" id="MISRAC2012-RULE_8_1-b" origId="MISRA2004-8_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_10" desc="An inline function shall be declared with the static storage class" id="MISRAC2012-RULE_8_10-a" origId="CODSTA-120" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_11" desc="When an array is declared with external linkage, its size shall be stated explicitly or defined implicitly by initialisation" id="MISRAC2012-RULE_8_11-a" origId="MISRA2004-8_12" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_12" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="MISRAC2012-RULE_8_12-a" origId="PB-58" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-a" origId="MISRA2004-16_7" sev="4" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_13" desc="Declare a type of parameter as typedef to pointer to const if the pointer is not used to modify the addressed object" id="MISRAC2012-RULE_8_13-b" origId="MISRA2004-16_7_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_14" desc="The restrict type qualifier shall not be used" id="MISRAC2012-RULE_8_14-a" origId="CODSTA-121" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Identifiers shall be given for all of the parameters in a function prototype declaration" id="MISRAC2012-RULE_8_2-a" origId="MISRA2004-16_3" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall have named parameters" id="MISRAC2012-RULE_8_2-b" origId="CODSTA-158" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_2" desc="Function types shall be in prototype form" id="MISRAC2012-RULE_8_2-c" origId="CODSTA-159" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_3-a" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="The identifiers used in the declaration and definition of a function shall be identical" id="MISRAC2012-RULE_8_3-b" origId="MISRA2004-16_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_3" desc="All declarations of an object or function shall have compatible types" id="MISRAC2012-RULE_8_3-c" origId="GLOBAL-COMPATDECLS" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="A declaration shall be visible when an object or function with external linkage is defined" id="MISRAC2012-RULE_8_4-a" origId="CODSTA-118" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_4" desc="If objects or functions are declared more than once their types shall be compatible" id="MISRAC2012-RULE_8_4-b" origId="MISRA2004-8_4" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_5" desc="An external object or function shall not have more than one non-defining declaration in translation unit" id="MISRAC2012-RULE_8_5-a" origId="CODSTA-154" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_6" desc="An identifier with external linkage shall have exactly one external definition" id="MISRAC2012-RULE_8_6-a" origId="GLOBAL-ONEEXTERNDEF" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.global" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_7" desc="Functions and objects should not be defined with external linkage if they are referenced in only one translation unit" id="MISRAC2012-RULE_8_7-a" origId="GLOBAL-AVOIDEXTERN" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_8" desc="The static storage class specifier shall be used in definitions and declarations of objects and functions that have internal linkage" id="MISRAC2012-RULE_8_8-a" origId="MISRA2004-8_11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_8_9" desc="Objects shall be defined at block scope if they are only accessed from within a single function" id="MISRAC2012-RULE_8_9-a" origId="MISRA2004-8_7" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_1" desc="Avoid use before initialization" id="MISRAC2012-RULE_9_1-a" origId="BD-PB-NOTINIT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_2" desc="The initializer for an aggregate or union shall be enclosed in braces" id="MISRAC2012-RULE_9_2-a" origId="INIT-16" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_3" desc="Arrays shall not be partially initialized" id="MISRAC2012-RULE_9_3-a" origId="MISRA2004-9_2_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_4" desc="An element of an object shall not be initialized more than once" id="MISRAC2012-RULE_9_4-a" origId="PB-69" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MISRAC2012-RULE_9_5" desc="Where designated initializers are used to initialize an array object the size of the array shall be specified explicitly" id="MISRAC2012-RULE_9_5-a" origId="CODSTA-186" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate resources in function argument list because the order of evaluation of a function's parameters is undefined" id="MRM-01" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use the same form in corresponding calls to new/malloc and delete/free" id="MRM-06" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not invoke malloc/realloc for objects having constructors" id="MRM-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid hiding the global new" id="MRM-32" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy assignment operator for classes with dynamically allocated memory" id="MRM-37" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare a copy constructor for classes with dynamically allocated memory" id="MRM-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never return a dereferenced local pointer initialized by new in this function scope" id="MRM-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call delete on pointer members in destructors" id="MRM-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Provide error handling for file opening errors right next to the call to fopen" id="MRM-39" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor shall copy all data members and bases" id="MRM-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Call fclose() on pointer member in destructor if the pointer was used to open a file" id="MRM-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An assignment operator shall assign all data bases" id="MRM-43" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not pass a pointer that has insufficient storage capacity or that is not suitably aligned for the object being constructed to placement 'new'" id="MRM-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate more than one resource in a single statement" id="MRM-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="All classes should contain the assignment operator or appropriate comment" id="MRM-04" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="All classes should contain the copy constructor or appropriate comment" id="MRM-05" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Don't memcpy or memcmp non-PODs" id="MRM-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to an expression that points to deallocated memory" id="MRM-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to global or member variable that points to deallocated memory" id="MRM-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always assign a new value to parameter or local variable that points to deallocated memory" id="MRM-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new and delete" id="MRM-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Adhere to convention when writing new" id="MRM-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new, it should provide overloads of all three of plain, in-place, and non-throwing operator new" id="MRM-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator new[], it should provide overloads of all three of plain, in-place, and non-throwing operator new[]" id="MRM-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete, it should provide overloads of all three of plain, in-place, and non-throwing operator delete" id="MRM-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If a class defines any overload of operator delete[], it should provide overloads of all three of plain, in-place, and non-throwing operator delete[]" id="MRM-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-18" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not allocate memory and expect that someone else will deallocate it later" id="MRM-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use objects to manage resources" id="MRM-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Store newed objects in smart pointers in standalone statements" id="MRM-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete if you write operator new" id="MRM-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Write operator delete[] if you write operator new[]" id="MRM-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new and delete together" id="MRM-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide new[] and delete[] together" id="MRM-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use allocation by declaration rather than by new or malloc" id="MRM-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Freed memory shouldn't be accessed under any circumstances" id="MRM-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Destructor should not be called manually" id="MRM-31_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="MRM" desc="Check the return value of new" id="MRM-34" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Never provide brackets ([]) for delete when deallocating non-arrays" id="MRM-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Always provide empty brackets ([]) for delete when deallocating arrays" id="MRM-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy and destroy consistently" id="MRM-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy assignment operator should be declared when a copy constructor is declared (and vice versa)" id="MRM-40_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both the copy constructor and copy assignment operator should have the same public/protected/private permission" id="MRM-40_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="If you have a non-trivial copy constructor or copy assignment operator, you should also declare a destructor" id="MRM-40_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Both copy constructor and copy assignment operator should be declared for classes with a nontrivial destructor" id="MRM-40_d" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use sizeof operator on pointer type to specify the size of the memory to be allocated via 'malloc', 'calloc' or 'realloc' function" id="MRM-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use calloc, malloc, realloc and free functions" id="MRM-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the assignment operator or contain appropriate comment" id="MRM-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Classes containing at least one non-static member variable should declare the copy constructor or contain appropriate comment" id="MRM-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="A copy constructor and a copy assignment operator shall be declared for classes that contain pointers to data items or nontrivial destructors" id="MRM-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Do not use 'delete' on pointers to a void type" id="MRM-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="The user defined 'new' operator should throw the 'std::bad_alloc' exception when the allocation fails" id="MRM-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Avoid using the default operator 'new' for over-aligned types" id="MRM-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="An overhead should be used when an array of objects is passed to the placement 'new' allocation function" id="MRM-55_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Copy assignment operators should not have side effects that could affect copying the object" id="MRM-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Move assignment operators should not have side effects that could affect moving the object" id="MRM-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Declare both private copy constructor and copy assignment operator at the same time" id="MRM-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="MRM" desc="Use RAII to prevent resource leaks" id="MRM-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers for constant and enumerator values shall be lowercase" id="NAMING-42" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="All &quot;#define&quot; constants shall be in uppercase" id="NAMING-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="In an enumerated list, list members (elements) shall be in uppercase and names or tags for the list shall be in lowercase" id="NAMING-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Use lowercase for file names" id="NAMING-03" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Global prefixes should only be used for global variables" id="NAMING-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin local variable names with a lowercase letters" id="NAMING-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin global variable names with a lowercase letters" id="NAMING-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin member variable names with a lowercase letters" id="NAMING-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all boolean type variables with 'b'" id="NAMING-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class, struct, union, enum, and typedef names with an uppercase letter" id="NAMING-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of abstract data types, structures, typedefs, and enumerated types are to begin with an uppercase letter" id="NAMING-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The name of enumeration type shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The names of structures shall begin with an uppercase letter and contain a suffix '_t' at the end" id="NAMING-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin constant variables with 'c'" id="NAMING-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin class data member names with 'its'" id="NAMING-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all double type variable with 'd'" id="NAMING-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all float type variables with 'f'" id="NAMING-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="6;" authUrg="0;" cat="NAMING" desc="Begin all function names with uppercase letter" id="NAMING-17" sev="3" total="6" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING" desc="Begin global variable names with 'the'" id="NAMING-18" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Begin all integer type variable with 'i'" id="NAMING-19" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Functions that begin with 'is' should return boolean values" id="NAMING-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all long integer variables with 'li'" id="NAMING-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Prefix a variable type 'pointer' with a 'p' character" id="NAMING-22" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all short integer variables with 'si'" id="NAMING-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all signed character variables with 'c'" id="NAMING-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all terminated characters string variables with 'sz'" id="NAMING-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned character type variables with 'uc'" id="NAMING-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Begin all unsigned integer type variables with 'ui'" id="NAMING-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use lowercase letters for structure and union member names" id="NAMING-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Append names of non-scalar typedefs with &quot;_t&quot;" id="NAMING-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C always have the file name extension &quot;.c&quot;" id="NAMING-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use typenames that differ only by the use of uppercase and lowercase letters" id="NAMING-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="An include file for a class should have a file name of the form &lt;class name> + extension" id="NAMING-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Do not use identifiers which begin with one or two underscores (`_' or `__')" id="NAMING-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Global function names should start with lowercase" id="NAMING-34" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Member function names should start with lowercase" id="NAMING-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Names of parameters in declaration and definition should be identical" id="NAMING-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Include files in C++ always have the file name extension '.hh'" id="NAMING-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ always have the file name extension &quot;.cc&quot;" id="NAMING-38" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Inline definition files always have the file name extension &quot;.icc&quot;" id="NAMING-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING" desc="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" id="NAMING-40" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files will always have a file name extension of '.h'" id="NAMING-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="File name extension, if present, should be &quot;*.cpp&quot; or &quot;*.h&quot;" id="NAMING-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="13;" authUrg="1;" cat="NAMING" desc="All letters contained in function and variable names will be composed entirely of lowercase letters" id="NAMING-44" sev="3" total="13" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" id="NAMING-45" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The ', &quot;, /* or // characters shall not occur in a header file name" id="NAMING-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING" desc="Different identifiers shall be typographically unambiguous" id="NAMING-47" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="The \ character should not occur in a header file name" id="NAMING-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="User defined suffixes of the user defined literal operators shall start with underscore followed by one or more letters" id="NAMING-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Universal character names shall be used only inside character or string literals" id="NAMING-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Header files should have a file extension of: &quot;.h&quot;, &quot;.hpp&quot; or &quot;.hxx&quot;" id="NAMING-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Use visually distinct identifiers" id="NAMING-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Implementation files in C++ will always have a file name extension of &quot;.cpp&quot;" id="NAMING-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING" desc="Identifiers in the same name space with overlapping visibility should be typographically unambiguous" id="NAMING-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array variables and parameters" id="NAMING-HN-01" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool types" id="NAMING-HN-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for bool pointer, array, or reference types" id="NAMING-HN-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte types" id="NAMING-HN-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for byte pointer, array, or reference types" id="NAMING-HN-05" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char types" id="NAMING-HN-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for array of char types" id="NAMING-HN-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer, array, or reference to array of char types" id="NAMING-HN-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer, array, or reference types" id="NAMING-HN-09" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for char pointer or reference types" id="NAMING-HN-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for constant parameters" id="NAMING-HN-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point types" id="NAMING-HN-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for double-precision floating point pointer, array, or reference types" id="NAMING-HN-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword types" id="NAMING-HN-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dword pointer, array, or reference types" id="NAMING-HN-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for dynamically allocated array" id="NAMING-HN-16" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point types" id="NAMING-HN-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for floating point pointer, array, or reference types" id="NAMING-HN-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for class declaration" id="NAMING-HN-19" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for structs declaration" id="NAMING-HN-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ifstream type variables and parameters" id="NAMING-HN-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-22" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-23" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for istream type parameters and variables" id="NAMING-HN-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int types" id="NAMING-HN-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point types" id="NAMING-HN-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long double-precision floating point pointer, array, or reference types" id="NAMING-HN-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for long int pointer, array, or reference types" id="NAMING-HN-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for member variables" id="NAMING-HN-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int types" id="NAMING-HN-30" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for int pointer, array, or reference types" id="NAMING-HN-31" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ofstream type parameters and variables" id="NAMING-HN-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for ostream type parameters and variables" id="NAMING-HN-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for pointer" id="NAMING-HN-34" sev="3" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for reference parameters" id="NAMING-HN-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int types" id="NAMING-HN-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for short int pointer, array, or reference types" id="NAMING-HN-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for static variables" id="NAMING-HN-38" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string types" id="NAMING-HN-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for string pointer, array, or reference types" id="NAMING-HN-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for unsigned types" id="NAMING-HN-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for void pointer types" id="NAMING-HN-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word types" id="NAMING-HN-43" sev="3" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="NAMING-HN" desc="Hungarian notation for word pointer, array, or reference types" id="NAMING-HN-44" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Class cannot inherit other class more than once unless it is virtual inheritance" id="OOP-03" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Be wary about using multiple inheritance of classes that are not abstract interfaces" id="OOP-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not directly access global data from a constructor" id="OOP-08" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from constructors" id="OOP-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid calling virtual functions from destructors" id="OOP-16_b" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Define a virtual destructor in classes used as base classes which have virtual functions" id="OOP-22" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make destructors virtual in base classes" id="OOP-24" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to an abstract class shall not be converted to a pointer of a class that inherits from that abstract class" id="OOP-29" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Make base class destructors public and virtual, or protected and nonvirtual" id="OOP-31" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class destructor is called and the class has virtual functions it shall have a virtual destructor" id="OOP-38" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Casts from a base class to a derived class should not be performed on polymorphic types" id="OOP-49" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not use multiple inheritance" id="OOP-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall be limited to at most 1 protected implementation" id="OOP-07_a" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Multiple inheritance shall not use any public implementations" id="OOP-07_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using global data in member functions" id="OOP-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid &quot;public&quot; data members" id="OOP-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid 'protected' data members" id="OOP-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="If a class has virtual functions it shall have a virtual destructor" id="OOP-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid casts down the inheritance hierarchy" id="OOP-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Down casting (casting from base to derived class) shall not be allowed" id="OOP-35" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A stateful virtual base shall be explicitly declared in each derived class that accesses it" id="OOP-39_b" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A base class shall not be both virtual and non-virtual in the same hierarchy" id="OOP-41" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid public copy constructors and assignment operators in base classes" id="OOP-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid slicing. Consider Clone instead of copying in base classes" id="OOP-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not derive functions with the same name from more than one base class" id="OOP-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="For multiple inheritance use virtual common base class" id="OOP-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid the use of global objects in destructors" id="OOP-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid using the friend mechanism" id="OOP-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Friend declarations shall not be used except declarations of comparison operators" id="OOP-11_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Protected member function shall not return non-const handles to private class-data" id="OOP-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited virtual function with a different default parameter value" id="OOP-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid explicit cast from derived to a base class" id="OOP-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use the virtual keyword if a subclass implements a virtual function" id="OOP-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Avoid declaring virtual functions inline" id="OOP-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never convert pointers to objects of a derived class to pointers to objects of a virtual base class" id="OOP-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare copy assignment operator for class with reference or const members" id="OOP-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Declare the copy constructor and copy assignment operator private not in class itself, but in a specifically designed base class" id="OOP-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Never redefine an inherited nonvirtual function" id="OOP-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not redefine an inherited nonvirtual function with template parameter" id="OOP-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Public member functions shall not return non-const handles to private/protected class-data" id="OOP-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="The copy assignment operator shall be declared protected or private in an abstract class" id="OOP-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="There shall be no more than one definition of each virtual function on each path through the inheritance hierarchy" id="OOP-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="All constructors that are callable with a single argument of fundamental type shall be declared explicit" id="OOP-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A copy constructor shall only initialize its base classes and the non-static members of the class of which it is a member" id="OOP-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Classes should not be derived from virtual bases" id="OOP-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member data in non-POD types shall be private" id="OOP-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a virtual base class shall only be cast to a pointer to a derived class by means of dynamic_cast" id="OOP-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Member functions declared in derived class should not hide functions declared in base classes" id="OOP-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Do not increase the accessibility of overridden or hidden methods" id="OOP-54" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A user-defined assignment operator shall not be virtual" id="OOP-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Structs should only contain public data members and should not be a base or inherit" id="OOP-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Write a using declaration to redeclare overloaded functions" id="OOP-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Check for assignment to self in operator=" id="OOP-34" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual base shall be explicitly declared in each derived class" id="OOP-39" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Hierarchies should be based on abstract classes" id="OOP-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A virtual function shall only be overridden by a pure virtual function if it is itself declared as pure virtual" id="OOP-43" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A pointer to a class may not be converted to a pointer of a second class unless the one inherits from the other" id="OOP-52" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="A non-POD type should be defined as class" id="OOP-55" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Consider use composition instead of private inheritance" id="OOP-14" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Prefer composition when don't need inheritance" id="OOP-37" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OOP" desc="Use namespace instead of class or structure containing only static functions" id="OOP-51" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Eliminate unused parameters" id="OPT-03" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Variables will not be introduced until they can be initialized with meaningful values" id="OPT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare variables as locally as possible" id="OPT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Prefer canonical form of ++ and --. Prefer calling the prefix forms" id="OPT-04" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused private member variables" id="OPT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is +, -, *, /, %" id="OPT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Prefer &quot;a @= b&quot; than &quot;a = a @ b&quot;, where &quot;@&quot; is &amp;, |, ^, &lt;&lt;, >>" id="OPT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="OPT" desc="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" id="OPT-10" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one function only then include that variable in the function itself" id="OPT-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="If a file-level static variable is used/referenced in one class only then include that variable in the class itself" id="OPT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Declare member variables in the descending size order" id="OPT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Pass objects by reference instead of by value" id="OPT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider overloading to avoid implicit type conversions" id="OPT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Global function containing recursion, loops or virtual function call should not be inlined" id="OPT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid inline constructors and destructors" id="OPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Member function containing recursion or loops should not be inlined" id="OPT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider using op= instead of stand-alone op" id="OPT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Postpone variable definitions as long as possible" id="OPT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least one non-empty case clause" id="OPT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Useless case statement shall not be permitted" id="OPT-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="'strlen' function should not be used to check string against NULL/non-NULL" id="OPT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every defined function with internal linkage shall be used at least once" id="OPT-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="There shall be no unused parameters (named or unnamed) in non-virtual functions" id="OPT-31" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="All non-empty functions with void return type shall have external side effect(s)" id="OPT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not assign a variable to itself" id="OPT-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Do not use a variable inside its own initializer" id="OPT-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Every switch statement shall have at least two switch-clauses" id="OPT-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There shall be no unused named parameters in virtual functions" id="OPT-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unused local variables" id="OPT-02" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Avoid unnecessary local variables" id="OPT-06" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial accessor and mutator functions should be inlined" id="OPT-23" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Trivial forwarding functions should be inlined" id="OPT-24" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Only functions with 1 or 2 statements should be considered candidates for inline functions" id="OPT-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The number of accessor and mutator functions should be minimized" id="OPT-27" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Redundant explicit cast to the same type is not allowed" id="OPT-29" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OPT" desc="Functions with void return type shall not be empty" id="OPT-32_b" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A function should not contain unused label declarations" id="OPT-37" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="There should be no unused parameters in functions" id="OPT-38" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in two branches of if-else-if chain" id="OPT-40_a" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="The same code (after preprocessing) in different clauses of switch statement" id="OPT-40_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="A file should directly include only the headers that contain declarations and definitions required to compile that file" id="OPT-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Remove unnecessary '== true'" id="OPT-09" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OPT" desc="Consider returning object by reference instead of by value" id="OPT-33" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against command injection" id="OWASP2017-A1-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid printing tainted data on the output console" id="OWASP2017-A1-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against environment injection" id="OWASP2017-A1-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Exclude unsanitized user input from format strings" id="OWASP2017-A1-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Protect against SQL injection" id="OWASP2017-A1-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A1" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2017-A1-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2017-A10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A2" desc="Do not use weak encryption functions" id="OWASP2017-A2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A3" desc="Properly seed pseudorandom number generators" id="OWASP2017-A3-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A4" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2017-A4-a" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Protect against file name injection" id="OWASP2017-A5-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2017-A5-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A5" desc="Ensure that privilege relinquishment is successful" id="OWASP2017-A5-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Properly use errno value" id="OWASP2017-A6-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2017-A6-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2017-A6" desc="Do not leave 'catch' blocks empty" id="OWASP2017-A6-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2019-API10-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API10" desc="Do not use 'syslog' function for logging purposes" id="OWASP2019-API10-b" origId="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API2" desc="Do not use weak encryption functions" id="OWASP2019-API2-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow due to defining incorrect format limits" id="OWASP2019-API3-d" origId="BD-PB-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow due to reading a not zero terminated string" id="OWASP2019-API3-e" origId="BD-PB-OVERFNZT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when reading from a buffer" id="OWASP2019-API3-f" origId="BD-PB-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid overflow when writing to a buffer" id="OWASP2019-API3-g" origId="BD-PB-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer overflow from tainted data due to defining incorrect format limits" id="OWASP2019-API3-h" origId="BD-SECURITY-OVERFFMT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer read overflow from tainted data" id="OWASP2019-API3-i" origId="BD-SECURITY-OVERFRD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid buffer write overflow from tainted data" id="OWASP2019-API3-j" origId="BD-SECURITY-OVERFWR" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid race conditions while checking for the existence of a symbolic link" id="OWASP2019-API3-m" origId="BD-TRS-SYMLINK" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not pass empty container iterators to std algorithms as destinations" id="OWASP2019-API3-a" origId="BD-CO-EMPCON" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays out of bounds" id="OWASP2019-API3-b" origId="BD-PB-ARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid accessing arrays and pointers out of bounds" id="OWASP2019-API3-c" origId="BD-PB-OVERFARRAY" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Properly seed pseudorandom number generators" id="OWASP2019-API3-k" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2019-API3-l" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="OWASP2019-API3-p" origId="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Avoid functions which use time from MFC library" id="OWASP2019-API3-o" origId="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="OWASP2019-API3-q" origId="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API3" desc="Usage of system properties (environment variables) should be restricted" id="OWASP2019-API3-n" origId="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Ensure resources are freed" id="OWASP2019-API4-b" origId="BD-RES-LEAKS" sev="1" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="1;" authUrg="0;" cat="OWASP2019-API4" desc="Validate potentially tainted data before it is used to determine the size of memory allocation" id="OWASP2019-API4-a" origId="BD-SECURITY-TDALLOC" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Properly use errno value" id="OWASP2019-API7-a" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2019-API7-b" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API7" desc="Do not leave 'catch' blocks empty" id="OWASP2019-API7-c" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against command injection" id="OWASP2019-API8-a" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid printing tainted data on the output console" id="OWASP2019-API8-b" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against environment injection" id="OWASP2019-API8-c" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against file name injection" id="OWASP2019-API8-d" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Exclude unsanitized user input from format strings" id="OWASP2019-API8-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Protect against SQL injection" id="OWASP2019-API8-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2019-API8-g" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2019-API8-h" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing dynamically created strings into exec" id="OWASP2019-API8-i" origId="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API8" desc="Avoid passing user input into methods as parameters" id="OWASP2019-API8-j" origId="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All usage of assembler shall be documented" id="OWASP2019-API9-c" origId="COMMENT-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="OWASP2019-API9" desc="Use of floating-point arithmetic shall be documented" id="OWASP2019-API9-d" origId="COMMENT-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="All uses of the #pragma directive shall be documented and explained" id="OWASP2019-API9-g" origId="MISRA2004-3_4" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="1;" cat="OWASP2019-API9" desc="Objects or functions with external linkage shall be declared in a header file" id="OWASP2019-API9-e" origId="MISRA-023" sev="4" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Assert liberally to document internal assumptions and invariants" id="OWASP2019-API9-a" origId="CODSTA-11" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="When using enum, the values of each member should be explicitly declared" id="OWASP2019-API9-b" origId="CODSTA-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2019-API9" desc="Document integer division" id="OWASP2019-API9-f" origId="MISRA-041" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Protect against file name injection" id="OWASP2021-A1-a" origId="BD-SECURITY-TDFNAMES" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Observe correct revocation order while relinquishing privileges" id="OWASP2021-A1-b" origId="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A1" desc="Ensure that privilege relinquishment is successful" id="OWASP2021-A1-c" origId="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A2" desc="Properly seed pseudorandom number generators" id="OWASP2021-A2-a" origId="BD-SECURITY-RAND" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against command injection" id="OWASP2021-A3-b" origId="BD-SECURITY-TDCMD" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid printing tainted data on the output console" id="OWASP2021-A3-c" origId="BD-SECURITY-TDCONSOLE" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against environment injection" id="OWASP2021-A3-d" origId="BD-SECURITY-TDENV" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Exclude unsanitized user input from format strings" id="OWASP2021-A3-e" origId="BD-SECURITY-TDINPUT" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Protect against SQL injection" id="OWASP2021-A3-f" origId="BD-SECURITY-TDSQL" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A3" desc="Avoid passing unvalidated binary data to log methods" id="OWASP2021-A3-a" origId="BD-SECURITY-LOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A4" desc="Avoid passing sensitive data to functions that write to log files" id="OWASP2021-A4-a" origId="BD-SECURITY-SENSLOG" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Properly use errno value" id="OWASP2021-A5-c" origId="BD-PB-ERRNO" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Disable resolving XML external entities (XXE) in libxerces-c" id="OWASP2021-A5-d" origId="BD-SECURITY-XXEXRC" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Where multiple handlers are provided in a single try-catch statement or function-try-block for a derived class and some or all of its bases, the handlers shall be ordered most-derived to base class" id="OWASP2021-A5-a" origId="EXCEPT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A5" desc="Do not leave 'catch' blocks empty" id="OWASP2021-A5-b" origId="EXCEPT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A7" desc="Do not use weak encryption functions" id="OWASP2021-A7-a" origId="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A8" desc="Use care to ensure that LoadLibrary() will load the correct library" id="OWASP2021-A8-a" origId="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="OWASP2021-A9" desc="All exceptions should be rethrown or logged with standard logger" id="OWASP2021-A9-a" origId="EXCEPT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PARSER" desc="Parser warning" id="PARSER-WARNING" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PARSER" desc="Parser remark" id="PARSER-REMARK" sev="5" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call delete on non-pointers" id="PB-13" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Properly terminate character strings" id="PB-21" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The class object should be passed by reference if the class has non-static pointers and has no declared copy constructor" id="PB-23" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Operators should not return value by reference" id="PB-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The definition of a constructor shall not contain default arguments that produce a signature identical to that of the implicitly-declared copy constructor" id="PB-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Unsigned arithmetic shall not be used" id="PB-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Public and protected methods should not be invoked by class constructor" id="PB-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A string literal shall not be modified" id="PB-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The following character sequences shall not appear in header file names: ', \, /*, //, or &quot;" id="PB-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The left-hand operand of a right-shift operator shall not have a negative value" id="PB-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast from or to incomplete class at the point of casting" id="PB-54" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not delete objects with incomplete class at the point of deletion" id="PB-55" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Boolean condition always evaluates to the same value due to enumeration with only zero or only non-zero constants" id="PB-68" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PB" desc="Do not dereference pointer type expressions" id="PB-01" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use assignments inside a(b), a[b], and cast" id="PB-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Using mixed types in ternary operator is not allowed" id="PB-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Return value of a function must match declared return type" id="PB-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operator should have operands of compatible types" id="PB-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign function return value to a variable of incompatible type" id="PB-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not assign signed constants to unsigned integer variables" id="PB-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't treat arrays polymorphically" id="PB-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PB" desc="Declared types of formal and actual parameters to functions must match" id="PB-11" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not cast a signed char to an unsigned int" id="PB-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Incorrect End-Of-String (EOS) definition" id="PB-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Don't assign the dividend of two integers to a floating-point type" id="PB-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid unintentionally discarding the remainder of integer division" id="PB-15_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to char type" id="PB-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid assigning out-of-range value to unsigned char type" id="PB-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading class methods on a pointer and a numerical type" id="PB-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not create inline non-member functions that contain local static data" id="PB-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid slicing function arguments / return value" id="PB-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not use increment and decrement expressions inside a(b), a[b], and cast" id="PB-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="More than one 'enum' type shall not be used as a switch condition or a label in a case statement" id="PB-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on constants" id="PB-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call 'sizeof' on a pointer type" id="PB-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in assignments involving enum types" id="PB-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit type conversions in comparisons involving enum types" id="PB-33_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Third parameter to 'memcpy'/'strncpy'/'memmove' should not depend on second" id="PB-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Assignment operators shall not be used in conditions without brackets" id="PB-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The unbounded functions of library &lt;cstring> shall not be used" id="PB-37" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Narrow and wide string literals shall not be concatenated" id="PB-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="String literals with different encoding prefixes shall not be concatenated" id="PB-38_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a reference or a pointer to a parameter that is passed by reference or const reference" id="PB-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A function shall not return a pointer or a reference to a parameter that is passed by const reference" id="PB-39_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An identifier with array type passed as a function argument shall not decay to a pointer" id="PB-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not pass expression with array type to a function with pointer or array type parameter" id="PB-41_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An object shall not be assigned to an overlapping object" id="PB-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="All constructors of a class should explicitly call a constructor for all of its immediate base classes and all virtual base classes" id="PB-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The execution of a function registered with 'std::atexit()' or 'std::at_quick_exit()' should not exit via an exception" id="PB-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%s' and '%c' format specifiers in the format string and their corresponding arguments in the invocation of a string formatting function" id="PB-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%f' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%i' and '%d' format specifiers in the string and their corresponding arguments in the invocation of a string formatting function" id="PB-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%u' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="There should be no mismatch between the '%p' format specifier in the format string and its corresponding argument in the invocation of a string formatting function" id="PB-49" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The number of format specifiers in the format string and the number of corresponding arguments in the invocation of a string formatting function should be equal" id="PB-50" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic shall not be applied to pointers that address variables of non-array type" id="PB-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading global functions on a pointer and a numerical type" id="PB-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid overloading namespace functions on a pointer and a numerical type" id="PB-53" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid implicit conversions from signed to unsigned type" id="PB-56" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="A pointer to an array of derived class objects should not be converted to a base class pointer" id="PB-57" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Within an enumerator list, the value of an implicitly-specified enumeration constant shall be unique" id="PB-58" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Missing comma in a string array initialization" id="PB-59" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Suspicious argument to malloc" id="PB-60" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Pointer arithmetic performed on freshly allocated memory" id="PB-61" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function calls with incorrect argument order" id="PB-62" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Function address should not be compared to zero" id="PB-63" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The values returned by string comparison functions should be compared only to zero" id="PB-64" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is assigned to a variable of a wider integer type" id="PB-65" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid possible integer overflow in expressions in which the result is compared to an expression of a wider integer type" id="PB-65_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '+', '-', '*' operator" id="PB-66_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The same code (after preprocessing) in both branches of if-else statement" id="PB-67" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An element of an object shall not be initialized more than once" id="PB-69" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="An expression with enum underlying type shall only have values corresponding to the enumerators of the enumeration" id="PB-70" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not copy instances of structures containing a flexible array member" id="PB-71" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not call va_arg with an argument of the incorrect type" id="PB-72" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'abort()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'exit()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="The 'quick_exit()' and '_Exit()' functions from the 'stdlib.h' or 'cstdlib' library shall not be used" id="PB-75_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PB" desc="C-style strings shall not be used" id="PB-76" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Expression statements shall not be explicit calls to constructors of temporary objects only" id="PB-77" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types" id="PB-78" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Avoid function declarations that are syntactically ambiguous" id="PB-79" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Integer overflow or underflow in constant expression in '&lt;&lt;' operator" id="PB-66_b" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Do not add or subtract a constant with a value greater than one from an iterator" id="PB-74" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PB" desc="Evaluation of constant unsigned integer expressions should not lead to wrap-around" id="PB-73" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Don't define entities with linkage in a header file" id="PFO-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards" id="PFO-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="An include file should not contain more than one class definition" id="PFO-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="File with extension '.c' may not include other files with extension '.c'" id="PFO-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Never include other files in a file with extension '.icc'" id="PFO-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use multiple include guards with pattern based on the header file name" id="PFO-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Use mechanism that prevents multiple inclusion of the file i.e. include guards or &quot;#pragma once&quot; preprocessor directive" id="PFO-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="&quot;#pragma once&quot; preprocessor directive should not be used in source files" id="PFO-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PFO" desc="Do not define more than on class in a header file" id="PFO-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="4;" authUrg="0;" cat="PFO" desc="Every implementation file should declare a local constant string that describes the file" id="PFO-04" sev="5" total="4" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hard coded value of offset in structures" id="PORT-03" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use hex constant '0xffffffff' as an error marker" id="PORT-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a long should not be casted to an int pointer" id="PORT-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast an int pointer to a long pointer" id="PORT-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Algorithms shall not make assumptions concerning the order of allocation of nonstatic data members separated by an access specifier" id="PORT-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Assigning result of ints operation to long without casting at least one of the ints is not allowed" id="PORT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long int to an int" id="PORT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass long casted to an int in function call" id="PORT-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Constant assignment to long should not involve int literals" id="PORT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not initialize a long int with int literals" id="PORT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign the value from 32 bit multiplication to long type" id="PORT-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="8;" authUrg="0;" cat="PORT" desc="The type int shall always be declared as unsigned int or signed int" id="PORT-13" sev="3" total="8" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions from &quot;shorter&quot; type to &quot;longer&quot; type in assignment" id="PORT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not cast from &quot;shorter&quot; type to &quot;longer&quot; type" id="PORT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PORT" desc="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" id="PORT-16" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use 'i64' or 'L' suffixes directly" id="PORT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Instead of casting a long type operand of an expression to int cast the result of the expression" id="PORT-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not declare variables of long type directly" id="PORT-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not assign a long value to a double" id="PORT-21" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 64 characters" id="PORT-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid implicit conversions to a type of narrower size" id="PORT-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Avoid conversions of constant values to a narrower type" id="PORT-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="A pointer to a structure should not be passed to a function that writes data to a file" id="PORT-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type long double shall not be used" id="PORT-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Type wchar_t shall not be used" id="PORT-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ external identifiers should differ in the first 64 characters" id="PORT-34_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers should differ from external identifiers in the first 64 characters" id="PORT-34_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C++ internal identifiers declared in the same scope should differ in the first 64 characters" id="PORT-34_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C external identifiers should differ in the first 31 characters" id="PORT-35_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers should differ from external identifiers in the first 31 characters" id="PORT-35_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="User-specified C internal identifiers declared in the same scope should differ in the first 31 characters" id="PORT-35_c" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of identifiers should not be longer than 31 characters" id="PORT-36_a" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="The names of macro identifiers should not be longer than 31 characters" id="PORT-36_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not throw an exception across execution boundaries" id="PORT-30" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Do not pass a nonstandard-layout type object across execution boundaries" id="PORT-31" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use capital 'L' instead of lowercase 'l' to indicate long" id="PORT-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of large arrays of longs" id="PORT-22" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Use arrays of int types instead of dynamic allocated large arrays of longs" id="PORT-23" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PORT" desc="Don't use large arrays of pointers to bool, char, short, int and float types" id="PORT-24" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't use macros in include statement" id="PREPROC-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="In a macro function, use parentheses before and after multiplication or division" id="PREPROC-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Do not allow absolute or relative path names in #include statements" id="PREPROC-06" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include directive shall use the &lt;filename.h> notation to include header files" id="PREPROC-09" sev="2" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="Avoid using macro definitions" id="PREPROC-01" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="3;" authUrg="0;" cat="PREPROC" desc="The #include pre-processor directive will only be used to include header (*.h) files" id="PREPROC-08" sev="3" total="3" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #ifndef pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" id="PREPROC-10_c" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifdef, #else, #elif preprocessor directives should not be used" id="PREPROC-11" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #if preprocessor directive should not be used" id="PREPROC-11_b" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="16;" authUrg="0;" cat="PREPROC" desc="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" id="PREPROC-12" sev="3" total="16" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Macro should not contain token pasting, variable argument list nor recursive macro calls" id="PREPROC-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="14;" authUrg="0;" cat="PREPROC" desc="All macros must expand into complete syntactic units" id="PREPROC-14" sev="3" total="14" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Pointer dereference operations may not be hidden in macro definitions" id="PREPROC-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter immediately following a # operator shall not immediately be followed by or preceded by a ## operator" id="PREPROC-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="The input/output library stdio.h shall not be included" id="PREPROC-18" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The controlling expression of a #if or #elif preprocessing directive shall evaluate to 0 or 1" id="PREPROC-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Match the filename in a #include directive to the one on the filesystem" id="PREPROC-20" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#error directive shall not be used" id="PREPROC-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="The #pragma directive shall not be used" id="PREPROC-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="All macro identifiers in preprocessor directives shall be defined before use, except in #ifdef and #ifndef preprocessor directives and the defined() operator" id="PREPROC-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="#undef shall not be used" id="PREPROC-25" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="PREPROC" desc="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" id="PREPROC-26" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Don't redefine primitive types" id="PREPROC-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="PREPROC" desc="Don't define part of statement" id="PREPROC-04" sev="4" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="A macro parameter used as an operand to the # or ## operators, which is itself subject to further macro replacement, shall only be used as an operand to these operators" id="PREPROC-17" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Incorrect 'NULL' definition" id="PREPROC-07" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="PREPROC" desc="Avoid token concatenation that may produce universal character names" id="PREPROC-21" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The methods inside the SIGNAL and SLOT macros have to exist" id="QT-04" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not force thread termination by calling QThread::terminate()" id="QT-07" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not call new on QMutexLocker" id="QT-09" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not directly set specific Widget attributes that are set by Qt kernel" id="QT-12" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Every QObject subclass should contain a Q_OBJECT macro" id="QT-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="QObject must not be inherited more than one time" id="QT-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="It's only possible to connect a signal to a slot or a signal to another signal" id="QT-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Mark signal emissions with the keyword &quot;emit&quot; to distinguish a signal emission from a normal method call" id="QT-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not set Idle or Critical priority to QThreads. Use High/Low/Med only" id="QT-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If using lock on a mutex in a function, release the lock in the same function" id="QT-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Declare a copy constructor and operator= for any Qt - inherited objects that have pointers" id="QT-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Never mix const and non-const iterators in assignment" id="QT-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="If you use Q_DECLARE_FLAGS, you must also use Q_DECLARE_OPERATORS_FOR_FLAGS" id="QT-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Q_DECLARE_OPERATORS_FOR_FLAGS must be in the global namespace, Q_DECLARE_FLAGS inside the enum's namespace" id="QT-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="The getters and setters of a Q_PROPERTY must exist and the types must match" id="QT-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Properties of enum types must use Q_ENUMS" id="QT-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Non-const function should not be called on the Qt object" id="QT-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="QT" desc="Do not use setWindowFlags function on a Widget" id="QT-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use gets()" id="SECURITY-16" sev="1" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from standard C library" id="SECURITY-01" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use random numbers from standard C library" id="SECURITY-02" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use care to ensure that LoadLibrary() will load the correct library" id="SECURITY-04" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid calling functions printf/wprintf with only one argument other than string constant" id="SECURITY-05" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using functions fprintf/fwprintf with only two parameters, when second parameter is a variable" id="SECURITY-08" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using data() function from 'string' class of standard library" id="SECURITY-09" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using the 'vfork()' function" id="SECURITY-10" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsecured shell functions that may be affected by shell metacharacters" id="SECURITY-11" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions which may cause buffer overflows" id="SECURITY-12" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Avoid using unsafe string functions that do not check bounds" id="SECURITY-13" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="SECURITY" desc="Do not use scanf and fscanf functions without specifying variable size in format string" id="SECURITY-14" sev="2" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not print potentially sensitive information, resulting from an application error into exception messages" id="SECURITY-15" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing non-const parameters or variables into exec" id="SECURITY-17" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing dynamically created strings into exec" id="SECURITY-18" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions prone to race is not allowed" id="SECURITY-19" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid passing user input into methods as parameters" id="SECURITY-20" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'syslog' function for logging purposes" id="SECURITY-21" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use mbstowcs() function" id="SECURITY-22" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Beware of functions which may return the current directory or the windows directory" id="SECURITY-23" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using InitializeCriticalSection" id="SECURITY-24" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using thread-unsafe functions" id="SECURITY-25" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'setuid' in source code" id="SECURITY-26" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use chmod(), chown(), chgrp()" id="SECURITY-27" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Standard random number generators should not be used to generate randomness for security reasons" id="SECURITY-28" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use obsolete C routine ulimit()" id="SECURITY-29" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using 'getpw' function in program code" id="SECURITY-30" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use 'cuserid' function" id="SECURITY-31" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using obsolete C routine 'usleep'" id="SECURITY-32" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of functions which do not properly handle non-NULL terminated strings is not allowed" id="SECURITY-33" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid using environment variables" id="SECURITY-34" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="7;" authUrg="0;" cat="SECURITY" desc="Don't trust any value of command line if attacker can set them" id="SECURITY-35" sev="2" total="7" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Never use unfiltered data from an untrusted user as the format parameter" id="SECURITY-36" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use weak encryption functions" id="SECURITY-37" sev="2" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="SECURITY" desc="Untrusted data is used as a loop boundary" id="SECURITY-38" sev="2" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the rand() function for generating pseudorandom numbers" id="SECURITY-02_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Avoid functions which use time from MFC library" id="SECURITY-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Don't use unsafe C functions that do write to range-unchecked buffers" id="SECURITY-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use secure temporary file name functions" id="SECURITY-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Specify the access permission bits if a file is created using the 'open' or 'openat' system call" id="SECURITY-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The function 'pthread_setcanceltype()' should not be called with 'PTHREAD_CANCEL_ASYNCHRONOUS' argument" id="SECURITY-43" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Observe correct revocation order while relinquishing privileges" id="SECURITY-44" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Ensure that privilege relinquishment is successful" id="SECURITY-45" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="A pointer to a structure should not be passed to a function that can copy data to the user space" id="SECURITY-46" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use correct integer precisions when checking the right hand operand of the shift operator" id="SECURITY-47" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not call the 'system()' function from the 'stdlib.h' or 'cstdlib' library with an argument other than '0' (null pointer)" id="SECURITY-48" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'system()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-48_b" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'char' buffer to store input from 'std::cin'" id="SECURITY-51" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="The 'getenv()' function from the 'stdlib.h' or 'cstdlib' library shall not be used" id="SECURITY-52" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Usage of system properties (environment variables) should be restricted" id="SECURITY-03" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'umask' before calling 'mkstemp'" id="SECURITY-40" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Call 'chdir' if you call 'chroot'" id="SECURITY-41" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Use the 'cnd_signal()' function with a unique condition variable" id="SECURITY-49" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="SECURITY" desc="Do not use the 'notify_one()' function when multiple threads are waiting on the same condition variable" id="SECURITY-50" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="To make copying efficient, correct, and immune to the slicing problem create containers of pointers instead of containers of objects" id="STL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Call empty instead of checking size() against zero" id="STL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using iterative calls to insert in an explicit loop" id="STL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Almost all uses of copy where the destination range is specified using an insert iterator should be replaced with calls to range member functions" id="STL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of anonymous istream_iterator objects use istream_iterator names when used as function parameters" id="STL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When using containers of newed pointers, remember to delete the pointers before the container is destroyed" id="STL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Never create containers of auto_ptrs" id="STL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove algorithm with list and standard associative containers" id="STL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="1;" authUrg="0;" cat="STL" desc="Prefer vector and string to dynamically allocated arrays" id="STL-10" sev="3" total="1" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use reserve to avoid unnecessary reallocations" id="STL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each vector and string should be checked if it is not empty before it is passed to C function" id="STL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using vector&lt;bool>" id="STL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Specify comparison types for associative containers of pointers" id="STL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="For associative containers never use comparison function returning true for equal values" id="STL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer iterator to const iterator, reverse_iterator, and const_reverse_iterator" id="STL-18" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use distance and advance to convert a container's const_iterators to iterators" id="STL-19" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure destination ranges are big enough" id="STL-22" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Follow remove-like algorithms by erase to remove elements from a container" id="STL-23" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Avoid using remove and similar algorithms (i.e., remove_if and unique) on containers of dynamically allocated pointers" id="STL-24" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Proper implementation of copy_if should not be based on returning the remove_copy_if with a not1 in front of the predicate" id="STL-26" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If accumulate() is used on a container of floating point values, use floating point value as initial one" id="STL-27" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Design functor classes for pass-by-value" id="STL-28" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make predicates const pure functions" id="STL-29" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Each functor class should has only one operator() function, and it's parameter and return types should be passed to unary_function or binary_function" id="STL-30" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="You must employ ptr_fun, mem_fun, or mem_fun_ref whenever you pass a function to an STL component" id="STL-31" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Make sure less&lt;T> means operator&lt;" id="STL-32" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer algorithm calls to hand-written loops" id="STL-33" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Prefer member functions to algorithms with the same names" id="STL-34" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not rely on the conversion of count()'s nonzero values to true and zero to false" id="STL-35" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not use an iterator range that isn't really a range" id="STL-36" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="2;" authUrg="0;" cat="STL" desc="C-style arrays shall not be used" id="STL-37" sev="3" total="2" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use != instead of &lt; to compare iterators" id="STL-38" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Use traits classes in conjunction with overloading" id="STL-39" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="When calling swap, employ a using declaration for std::swap, then call swap without namespace qualification" id="STL-40" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Do not declare the non-member to be an overloading of std::swap" id="STL-41" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Member version of swap should never throw exceptions" id="STL-42" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider using vector&lt;char> instead of string" id="STL-11" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="It is necessary to be careful when using reverse_iterator's base iterator for erasure purposes" id="STL-20" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Consider istreambuf_iterators for character-by-character input" id="STL-21" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="If you pass a sorted range to an algorithm that also takes a comparison function, be sure that the comparison function you pass behaves the same as the one you used to sort the range" id="STL-25" sev="4" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="STL" desc="Instead of trying to write the container-independent code use class encapsulation" id="STL-01" sev="5" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Factor parameter-independent code out of templates" id="TEMPL-01" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Define non-member functions inside templates when type conversions are desired" id="TEMPL-02" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not overload functions within a template class" id="TEMPL-03" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template global functions use 'typename' to identify nested dependent type names" id="TEMPL-04" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In template classes use 'typename' to identify nested dependent type names" id="TEMPL-05" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Don't change default arguments of virtual functions in template classes" id="TEMPL-06" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy constructor shall be declared when there is a template constructor with a single parameter that is a generic parameter" id="TEMPL-07" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The viable function set for a function call should either contain no function specializations, or only contain function specializations" id="TEMPL-08" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Overloaded function templates shall not be explicitly specialized" id="TEMPL-09" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="All partial and explicit specializations for a template shall be declared in the same file as the declaration of their primary template" id="TEMPL-10" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A copy assignment operator shall be declared when there is a template assignment operator with a parameter that is a generic parameter" id="TEMPL-11" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="In a class template with a dependent base, any name that may be found in that dependent base shall be referred to using a qualified-id or this->" id="TEMPL-12" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Do not declare non-member generic functions in associated namespaces" id="TEMPL-13" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="The function shall resolve to a function declared previously in the translation unit" id="TEMPL-14" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Declare 'extern' an explicitly instantiated template" id="TEMPL-15" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Template specialization shall be declared in the same file as the primary template or a user-defined type, for which the specialization is declared" id="TEMPL-16" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="Use a trailing return type syntax if the return type is preceded by the 'typename' keyword" id="TEMPL-17" sev="3" total="0" />
            <Rule analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" authTot="0;" authUrg="0;" cat="TEMPL" desc="A non-member generic operator shall only be declared in a namespace that does not contain class (struct) type, enum type or union type declarations" id="TEMPL-18" sev="3" total="0" />
         </RulesList>
         <SeverityList>
            <Severity authTot="76;" authUrg="3;" id="1" total="76" />
            <Severity authTot="654;" authUrg="14;" id="2" total="654" />
            <Severity authTot="966;" authUrg="23;" id="3" total="966" />
            <Severity authTot="397;" authUrg="6;" id="4" total="397" />
            <Severity authTot="375;" authUrg="4;" id="5" total="375" />
         </SeverityList>
      </Rules>
      
  <Supps />

      
  <StdViols>
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="METRICS-31" lnHash="-1179647073" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="-1179647073" unbViolId="0e979693-ddd7-37d4-8afc-2df35e89b58d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9445e65c-06d0-3d7d-b5ca-8b5ca1f6b6ca" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'NullPointer.cpp' should be in lowercase" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="NAMING-03" lnHash="-1179647073" rule.header="Use lowercase for file names" tool="c++test" lineHash="-1179647073" unbViolId="95272743-983d-33ee-a67e-f9e4ea84b347" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1dfde55b-fe6a-35e4-a220-fecfda3e23cb" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'NullPointer.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="NAMING-38" lnHash="-1179647073" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="-1179647073" unbViolId="0867e18d-8675-3669-aeae-a0a62b22b25b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="521ee00c-80e3-3cf4-bccd-23fbee739ddb" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="5" auth="devtest" locRef="1" rule="PFO-04" lnHash="-1179647073" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="-1179647073" unbViolId="8b0f0f4f-1fb4-3a43-a470-5e436423a0a8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4396b71-5cfb-340f-821a-14b9992c3ac9" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="COMMENT-02" lnHash="-1179647073" rule.header="Provide copyright information" tool="c++test" lineHash="-1179647073" unbViolId="294fda46-b6da-36f7-af79-837d03e02526" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58bfc87f-5602-32ba-86c5-26db9eb86628" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'NullPointer.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="JSF-133_b" lnHash="-1179647073" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="-1179647073" unbViolId="61f41fdc-ae15-38d6-a999-cc22738e405e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3636554a-e8fa-39f4-b0ea-13fd32d17bec" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="COMMENT-03" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="745d8689-a8ff-34a4-a980-6f36f1aca921" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="873fa712-2262-31d8-9f89-71388ffadf40" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'NullPointer.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="JSF-133_a" lnHash="-1179647073" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="-1179647073" unbViolId="d93bfd91-752f-3321-9e84-80b6efe04119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eb0692d-f9ef-3712-9e3f-41bc507b3b17" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="JSF-032" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="7dd62131-7c15-3ab7-be5f-8ac1febd45b5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49217851-ad66-3476-ba44-f80f29f96ae8" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Point.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="3" auth="devtest" locRef="1" rule="PREPROC-08" lnHash="-1179647073" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="-1179647073" unbViolId="bf24f504-d22a-3f56-bc27-99a0365d359f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="223e46aa-8423-371f-8d45-45a9e2b06542" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="2" auth="devtest" locRef="1" rule="PREPROC-09" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="b6923e0c-d9a4-3673-bf86-b596300365d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="175ce5f4-0268-3d0b-a5be-74cd6ea18990" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Point.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="1" sev="2" auth="devtest" locRef="1" rule="JSF-033" lnHash="-1179647073" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="-1179647073" unbViolId="194e6bba-c422-38e8-8e5c-5b8f9507fc09" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="678946ff-bf17-3f1a-b71f-ffb9bad114f7" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="3" sev="2" auth="devtest" locRef="1" rule="MISRA2008-18_0_1" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="58e834f5-bed7-3d82-a18f-509bbfa0207b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="210e5971-b9ad-3646-8a33-2691f926aa4e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="3" sev="3" auth="devtest" locRef="1" rule="HICPP-1_3_3-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="1563a3d7-25c3-38c7-9704-1793be730c5f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bffcc39c-6eb8-3aca-b6a8-4dd4377d40cb" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="3" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A18_0_1-a" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="43710008-1588-321a-a5b7-a728976810b0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f6e47f7-e93a-3996-bc53-8d2330a5dda3" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="3" sev="3" auth="devtest" locRef="1" rule="CODSTA-CPP-59" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="207e9dc8-425f-3f4b-9baa-6d0e1cc31f85" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c747d97b-f8f7-338f-812e-aeadfd91d65f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdlib.h>' the corresponding C++ library header should be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="3" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A1_1_1-d" lnHash="-327381023" rule.header="The C library shall not be used" tool="c++test" lineHash="-327381023" unbViolId="214d0598-7c15-3936-b493-662957452142" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f646e662-4ff2-3e06-b4e8-40d1a0964603" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="3" sev="4" auth="devtest" locRef="1" rule="HICPP-17_2_1-a" lnHash="-327381023" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="-327381023" unbViolId="48a41473-f557-3a7c-898f-a99a4cc30e05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="941a48dc-43d1-3a95-a152-1812287f7aa2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="3" goals="0," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="COMMENT-04" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="d28b3259-c9e1-3963-98cf-948369eeecdd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d91a29a-a037-38bd-a684-69749a77d22a" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The definition of the 'main' function is not preceded by a comment" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="4" auth="devtest" locRef="1" rule="JSF-134" lnHash="-332596053" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-332596053" unbViolId="76840562-1718-3d73-a500-04bb50a7ad8b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aef04a08-7f47-3202-984d-11b4b37193c5" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="COMMENT-14" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="c9347a33-657b-3f54-9c49-8d73bb2da6f3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdb249bd-d0e5-35e3-aac9-562d6d5f1618" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A2_7_3-a" lnHash="-332596053" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-332596053" unbViolId="1b07159d-3afc-39cf-91cf-c54490f90205" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8bd2bac-8d40-331d-845c-bdf1ac2f6064" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="23300b6f-6a36-3a92-aed5-60024bba2a93" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7952f2b6-becc-33a7-9811-0d8db06793c8" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="20be6104-ec4f-3786-8c21-f51be4424b45" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8230bda0-09d0-35e7-b6d3-216dcc5f18ae" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="fd11fbfc-eb5a-3515-a801-3f41c4c14950" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e14676cb-a0d5-3672-8121-63571131755f" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="dd52d8a9-21f2-3b13-8f89-0c50bcfb7e0d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c34f92cc-2114-3edb-8438-0b2013819833" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="COMMENT-14_b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="6b1db5bf-e87c-317d-9eeb-4cf860266b8f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79ddcb34-f9e8-3f95-be4a-17fc104f379d" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A2_7_3-b" lnHash="-332596053" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-332596053" unbViolId="c7072e12-5ec6-32c3-949f-157db9d856e2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6c666ce-eae9-3bb8-81f6-3a2d3e227bb6" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="'main' shall be declared as unsigned int or signed int" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="f80e6b31-ae1e-3761-b33a-26ac1c47bb34" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a848d01-2edf-34de-9d93-a56f71abd84c" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CERT_CPP-ERR50-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="306c8c42-31f6-3c67-b7ca-5a4157230fce" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="296e8267-950b-3f9c-934d-08b2117e9383" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A15_3_3-a" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="cbef6451-9931-34c4-84a6-e9245c4eda03" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8372bef9-b0a9-3ffb-8a46-60648c53ecea" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="HICPP-15_3_2-b" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="d05ee5a1-4abb-3230-9da1-bedfbaad883f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6df0a7db-3386-397d-913c-4b4f2fa58193" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="4" auth="devtest" locRef="1" rule="MISRA2008-15_3_2" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="60b03286-9300-3ea8-bd31-b0b4ed0e9c2d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="451b1115-0b46-361e-b274-63c2622e41cb" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A15_5_3-d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="0ef133f7-a1df-346e-b8ff-be4c480f987b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="340dac5a-a501-38e3-9564-e8d8f792951c" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="EXCEPT-06" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="ea179751-33ed-3ca8-b69d-16bceaae8ade" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="301fd965-402c-33e0-942d-8e3ec9bca133" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'main' function does not contain a catch(...) to catch all unhandled exceptions" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="MISRA2008-15_5_3_d" lnHash="-332596053" rule.header="There should be at least one exception handler to catch all otherwise unhandled exceptions" tool="c++test" lineHash="-332596053" unbViolId="e3cb8abc-f050-3765-b9aa-198b3aca6de7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6836f498-21f5-32e6-82f0-e96cdae45852" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'main'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="FORMAT-28" lnHash="-332596053" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-332596053" unbViolId="a82eb085-f25b-3141-9c0e-d8795ee10af8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ea35289-6b1d-38c7-a0db-87a18dd27e5d" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Function 'main' has Cyclomatic Complexity value: 2" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="5" auth="devtest" locRef="1" rule="METRICS-29" lnHash="-332596053" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-332596053" unbViolId="fe89e167-b683-33f3-9dd7-d7f9398d82c3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42cb8853-7c4c-304c-9d20-b3361808747f" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Function 'main' has Essential Complexity value: 1" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="5" auth="devtest" locRef="1" rule="METRICS-33" lnHash="-332596053" rule.header="Report Essential Complexity" tool="c++test" lineHash="-332596053" unbViolId="ef85c0b2-3c1a-3e1c-b78c-c9d9c0042520" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae2885fd-8e33-32d2-af81-8b322915c460" locEndPos="5" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="4" auth="devtest" locRef="1" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="59465052-b7d6-3555-bb91-65b8daf4d107" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaee68ea-61ea-3a28-99be-d89c6e6edd81" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="846b58cd-c5b1-311f-94a2-b6c2ae271c05" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa3a56b1-f06e-3527-b2cd-29e49862f913" locEndPos="10" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="'argc' shall be declared as unsigned int or signed int" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="PORT-13" lnHash="-332596053" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-332596053" unbViolId="2991b1d2-7e21-36f7-8941-52bffc4c1cd9" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f180cc5-d960-3493-a133-470392a33f77" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CERT_C-DCL00-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="92909af4-eadd-3b11-88b3-9ce630b94540" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23662e19-e8c0-3be1-9707-b0d581bb2433" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A7_1_1-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="d1cb48ee-e1a2-30ad-aa3e-54a82e8df495" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5a674d2-61e3-3878-9dfe-157e79559c23" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="MISRA2008-7_1_1" lnHash="-332596053" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-332596053" unbViolId="bfacb9c4-ff52-3a20-b1e1-c9d1cf047e4a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b20a89e-1fbf-3316-9790-faaf0c68ea4a" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CODSTA-CPP-53" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="1154c218-bfca-3707-bace-cae2784b220e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01c7e635-dc2a-3648-9592-4c790662ad1e" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'argc' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="HICPP-7_1_2-a" lnHash="-332596053" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-332596053" unbViolId="5c312c7d-1dd0-3848-b863-383f08d25c8a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1c7dfa3-9fcd-39a9-b62d-dc532e37ba08" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="NAMING-HN-22" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="5f64eb90-b296-3d82-bce0-83d814af52a0" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="412baa62-09a7-305e-b235-bbec0c266489" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="NAMING-HN-30" lnHash="-332596053" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-332596053" unbViolId="7093dea7-be29-30e2-a9aa-b06f394ee6c7" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fc5f798-695a-3f76-9ac6-a31edddfb7d8" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="NAMING-HN-43" lnHash="-332596053" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-332596053" unbViolId="5ac57e78-21f4-35b4-8cd0-02a88772075a" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63d0da71-87fb-33f3-a1b6-eac16ac28649" locEndPos="14" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="4" auth="devtest" locRef="1" rule="MISRA2008-3_9_2" lnHash="-332596053" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-332596053" unbViolId="af38c52d-dfb6-34ab-9917-8de95eeb6a8f" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d76d133-ebca-3ebf-adf3-f3c93b0526b8" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="MISRA-013" lnHash="-332596053" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-332596053" unbViolId="a122105d-91c1-3c9a-8d14-d688a9f4cb32" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a929504-a7b1-3fe2-a8f4-82b7da4b4832" locEndPos="20" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declaration of variable 'argv' contains more than one level of pointer indirection" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="HICPP-8_1_1-a" lnHash="-332596053" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-332596053" unbViolId="00f82103-6beb-35ee-9cd8-797b6f4f33e1" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d16ddb3b-f9f7-3b32-8a89-ae37161d7484" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Declaration of variable 'argv' contains more than one level of pointer indirection" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CODSTA-89" lnHash="-332596053" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-332596053" unbViolId="0d6e1250-48ed-38d2-99a1-a235a1bd4496" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b36f27b-1d91-3913-b10a-05c67772f2f4" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: argv" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CODSTA-94" lnHash="-332596053" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-332596053" unbViolId="f0143291-6bb6-3dd4-bf63-990a13cc4037" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1297ca6-5c33-3575-bd20-3e1bdd732d8c" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: argv" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CODSTA-95" lnHash="-332596053" rule.header="Do not declare pointer type" tool="c++test" lineHash="-332596053" unbViolId="1aa6a747-38c6-35bf-8988-a1d941478ad3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abccf7ad-139f-3a73-8ab5-1db2d30fc7fa" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="JSF-097_c" lnHash="-332596053" rule.header="Arrays shall not be used in global functions" tool="c++test" lineHash="-332596053" unbViolId="29a68827-5e9f-3f1e-adfc-a0caa59f7ec3" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5581ff32-ef76-33de-bbcf-b40f8eba1793" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' with array type was found in 'main' function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="2" auth="devtest" locRef="1" rule="CODSTA-142" lnHash="-332596053" rule.header="Global functions shall not declare parameters with array type" tool="c++test" lineHash="-332596053" unbViolId="6b2f3d54-60b0-3592-b5a5-6ec1483b1556" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fe8103d-8485-35bd-8c90-eeeeaa3dacb4" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CERT_C-API00-a" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="552451f9-e026-3522-aea1-82be8156c707" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9baa8932-ddf6-3132-831a-24254b584c28" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'argv' is not validated before use" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="5" sev="3" auth="devtest" locRef="1" rule="CODSTA-86" lnHash="-332596053" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-332596053" unbViolId="035a521c-1a38-35dc-856c-c4feca630f00" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a53513e-49ad-3ca9-9cbd-a9173c1682cf" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="5" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="6" sev="3" auth="devtest" locRef="1" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="ff18173f-433e-324c-ba0a-50085ecb7473" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="486d4394-635d-349c-b97c-5efd2e3fedb2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="6" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="264435611" rule.header="Tabs should be avoided" tool="c++test" lineHash="264435611" unbViolId="39aefc2b-38ac-3a68-a516-5f0919c31c2c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bdb4324-23a0-359b-b03b-4502eeec70c1" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="e0bf1391-e1b3-36d0-a621-723d2bd4409a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37e8f00d-3c13-3bd1-bac3-04163d552132" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="264435611" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="264435611" unbViolId="d3b5a837-1f0d-3c26-b667-c094273884ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51a9c4a6-2971-3734-b78d-7f4f5f28863e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A8_5_2-a" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="f565ae05-796a-3694-bf73-39513deed392" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d18048b9-558f-3762-aa6c-ca8f944e1c26" locEndPos="9" locType="sr" urgent="true" hash="-1257393797" locEndLn="7" goals="1," />
    <StdViol msg="The definition of the 'point' variable should contain a braced initializer" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="CODSTA-MCPP-38" lnHash="264435611" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="264435611" unbViolId="67bb6a0b-6352-3d57-8522-fdc037d9242e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f35e377a-e3f9-3456-8c93-562c4fcdd63e" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="NAMING-45" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="78ae250d-5403-3519-984f-25c7d42b4ab2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea2bc618-ae3b-3d8e-828f-40c259d4b4b3" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="JSF-048" lnHash="264435611" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="264435611" unbViolId="6a625c13-b102-323b-85a7-b85c9a76b7c8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5dcca86-0fed-3c74-b3bf-94fea2d4e407" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: point" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="CODSTA-94" lnHash="264435611" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="264435611" unbViolId="691d69d6-5bf9-33b7-b219-d51c32959fac" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5dc409ba-95bf-3795-9e77-cc4c46544099" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The variable of pointer type is declared: point" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="CODSTA-95" lnHash="264435611" rule.header="Do not declare pointer type" tool="c++test" lineHash="264435611" unbViolId="ead4111e-4246-315a-903b-eef9b7f6a48f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adccac86-6253-3f3f-bce5-ef29095a5b1f" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="MISRA2008-2_10_1" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="04d2a63f-2656-377f-b48f-2766555dc4b4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7462e067-87d2-3bf5-b4a0-c60774efa890" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="HICPP-2_4_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="b0389b14-3400-394d-8a1e-8f994ad0f083" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7525cb10-8884-32ca-b647-376922a13593" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-M2_10_1-a" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="e88d1453-efc1-38f3-91ae-5d0f6cd90472" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a33a7a53-effc-3096-b3f8-d9aa27aff7dc" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Identifier name: 'point' differs only by case from its type name: 'Point'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="NAMING-47" lnHash="264435611" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="264435611" unbViolId="c774b243-ec79-3343-89cb-808a0c008a77" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4d443da-e55e-3099-97c9-437c33f63d8f" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="MRM-18" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="02af122c-0717-3a02-8907-dd3d30c537cc" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da9926ac-cadb-36a6-92ba-9491d98c608b" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Locally allocated memory is not deleted locally for : point" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="1" auth="devtest" locRef="1" rule="CERT_C-MEM00-a" lnHash="264435611" rule.header="Do not allocate memory and expect that someone else will deallocate it later" tool="c++test" lineHash="264435611" unbViolId="789252b9-7f79-3a55-9aa1-a7bdea101cec" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acfacefd-398a-32ea-8098-414bd6b939a0" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="JSF-132_a" lnHash="264435611" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="264435611" unbViolId="ab1768ec-c977-3ca5-8049-4f926873067a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbc5f40e-b4e4-33aa-ba60-014e8dd32ee3" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="The 'point' variable should be commented" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="COMMENT-05" lnHash="264435611" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="264435611" unbViolId="63e92d72-a679-3240-87b0-ac5935278f3a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f4dba86-ea76-33b1-836d-38839a831fa8" locEndPos="9" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="MISRA2012-RULE-11_9_a" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="da590244-c2a3-3287-b38d-3df12fe64c6e" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9ab3bef-8e23-3095-a4ef-81bc53758ce6" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-M4_10_2-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="1df4d492-fb5d-3c72-85b2-0f4d328c76b8" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66a9b104-86ee-3df7-b183-4565b3964952" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="MISRA2008-4_10_2" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="3a323c98-451d-3bca-9ad6-e54e54a15c81" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="625b994d-f8b1-3d4c-ab71-bad25ce72dd8" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="CODSTA-CPP-63" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="d0f7ecfd-f1ef-3d02-be21-fb77a113baa6" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc6cab96-dca9-3e55-9ae5-3ccf5fd2bd26" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="MISRAC2012-RULE_11_9-a" lnHash="264435611" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="3e5001e3-61a9-3036-aeb6-1868e79d297b" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a7336fd-f37b-37d7-aec1-17d50442466f" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A4_10_1-b" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="3efa97ea-d16e-335e-aa9b-d9459c7aa397" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5672882c-b6ab-3904-b2a4-6b7bc41b86df" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="4" auth="devtest" locRef="1" rule="HICPP-2_5_3-a" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="251e062f-e878-3e4f-82d3-432779a2c11e" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d03e7c6-797f-3f09-ab38-b5cb74835f36" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="4" auth="devtest" locRef="1" rule="CODSTA-MCPP-04" lnHash="264435611" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="264435611" unbViolId="fd7b76ff-e49d-3b76-af33-6e1481fa4e22" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d6fe232-7a32-349d-8384-613bdae6dea3" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="3" auth="devtest" locRef="1" rule="CODSTA-131" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="df28e5b8-e10b-3111-b937-fda635e5c7b6" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf82446d-9efa-3b03-b174-455e999bc2c3" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="MISRA2012-RULE-11_9_b" lnHash="264435611" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="264435611" unbViolId="341374d8-8144-3b77-8cd1-c4093cae0754" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e819d3ba-3271-37c7-9406-f1f6ad16a069" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Variable 'point' of pointer type is initialized with '0'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="7" sev="2" auth="devtest" locRef="1" rule="MISRAC2012-RULE_11_9-b" lnHash="264435611" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="264435611" unbViolId="a263905d-852d-3b2e-986b-f1683498cd72" locStartPos="16" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0320521-401d-3f24-b126-865a940f5ab3" locEndPos="17" locType="sr" hash="-1257393797" locEndLn="7" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="JSF-061" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="fb2cbc36-d050-366c-9fb2-2de219ca9f9b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd002059-3257-36c9-a749-dfc011ea90ff" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="FORMAT-42" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="a0b92e61-1a00-367e-b7a4-326c0e1b7c07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce9635d1-5f95-39fd-af9d-8da6c7091932" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="JSF-060_a" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-620226472" unbViolId="8e5b024b-d09e-3822-9954-bb408af78d0f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2ef99f1-9878-3b44-9dc5-922ff661bdf5" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="FORMAT-43" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="5bca2143-d97b-3d0f-badc-28af3c217331" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8f3e674-fd29-3faa-bfa8-11e12c86783e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="JSF-060_b" lnHash="-620226472" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-620226472" unbViolId="4cac2fbb-1fcb-36e7-ab19-bb759f91711b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="617ed968-5705-3c75-95c4-c6c5125041bb" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="-620226472" rule.header="Tabs should be avoided" tool="c++test" lineHash="-620226472" unbViolId="c1004364-aa3f-337a-bc0c-73006ff5e620" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81a66610-b5d0-3d32-911b-a25632502d11" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="2d1d6c4d-d08b-3499-afde-daa3e6b7eb08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d1bb15c-9bdd-3603-a4be-c50be8756a00" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="-620226472" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-620226472" unbViolId="b8f3490c-0da6-3b83-9571-b49229c725b1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82aeab5a-9c44-38ac-9fa1-f133bbd1b5a2" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="FORMAT-02" lnHash="-620226472" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-620226472" unbViolId="97c4ec0f-e8ba-3f38-a67b-86a40ad48988" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8c87d02-77e8-31ef-acce-977903417d31" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="CODSTA-23" lnHash="-620226472" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-620226472" unbViolId="3a08676a-6b29-3b50-ab82-88a9db03ff26" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="828518d9-d13b-3e42-9246-fff49d427bea" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="No value of command line should be trusted: argc" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="2" auth="devtest" locRef="1" rule="SECURITY-35" lnHash="-620226472" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="-620226472" unbViolId="ecb83612-495d-378a-abbd-cfb798f64437" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c840002f-8bd1-3d14-80e8-19d7744df61e" locEndPos="6" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="JSF-151" lnHash="-620226472" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="-620226472" unbViolId="5121c478-2e07-3d37-a57d-1f2a077ec023" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="832b14ee-7d56-3bbb-8a6e-fdaa49d75b40" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="CODSTA-26" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="2c831589-0943-3887-b330-a53118056323" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f76676ce-f032-3b6a-9c36-184eb3578cf1" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="8b6a708d-2c9b-302f-b55a-4b7860b6fc59" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a656c63-ebc4-3457-8df6-fa43ef1fb483" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Literal constant '3' is used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="8" sev="3" auth="devtest" locRef="1" rule="HICPP-5_1_1-a" lnHash="-620226472" rule.header="Avoid magic numbers" tool="c++test" lineHash="-620226472" unbViolId="6f0dcb79-000d-31c9-9f82-11ca984b104f" locStartPos="12" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8e8d0a8-c053-33f4-aa7e-931422ffd78d" locEndPos="13" locType="sr" hash="-1257393797" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="38d16647-2cb2-37ec-a435-3194ca722ca1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="883b6e01-f2c4-31bb-988b-559ea1ffd181" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="6a8edcb6-397b-348d-9093-dc472d5278c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="587908fc-8c9f-332d-aaf3-14db88690a6f" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="7764d2bd-fe16-3ab3-ba3a-e9f30d9ba77c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1da621b3-a7e2-3c11-9f0d-b0a3e3d84f06" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="212456074" rule.header="Tabs should be avoided" tool="c++test" lineHash="212456074" unbViolId="1ab4c6c8-7800-3e4e-8b27-4790cf757018" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26d65cda-6362-361c-a0aa-12fbdc3c8161" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="3d89a154-7ca1-33cf-afc5-ec61247f350f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8906080-ea89-3e38-b123-58d7a4353dfb" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="212456074" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="212456074" unbViolId="e6a6df98-a2e0-30e7-aa85-29b3f300c914" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdcfd06c-a587-36bd-8f16-7230d9e9c977" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="b61454ec-3598-3056-9ee5-e5678d0d26de" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37f82240-dc4e-3d29-bb15-7c037affada6" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Check the return value of new" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="MRM-34" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="64ac5934-fe04-3da5-af56-5256c8172929" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf214ea1-afe5-3fe3-9e7a-a1d120448565" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Check the return value of new" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="1" auth="devtest" locRef="1" rule="CERT_CPP-MEM52-a" lnHash="212456074" rule.header="Check the return value of new" tool="c++test" lineHash="212456074" unbViolId="7466d10d-cfa0-35f8-90a7-bff0ca6e3cb0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6679de39-b281-3771-9299-889e4f963a7d" locEndPos="3" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRA2012-DIR-4_12" lnHash="212456074" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="5f1af577-0b91-3a00-875c-9241d09c2082" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b698c25-a747-3842-a280-184b84c69bca" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRA2008-18_4_1" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="37ec703b-a209-3133-8ab6-45841009cf92" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e292574-a2f1-338c-9496-2351656e5436" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRAC2012-RULE_21_3-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="340897ee-0e41-3b2c-9fc3-711136773d42" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1e1c323-b681-3ce3-b49f-b038a28468c7" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A18_5_2-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="1387fa14-fb3f-3e3c-8e60-2d0c031b482e" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0362e0b-9797-34c7-bdc5-413b86e71ea9" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="JSF-206" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="12d42140-a245-3787-8ca2-2fdc41a4ebfe" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f5d5356-83d6-3c63-9a01-a0f5e0af55ab" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRA2012-RULE-21_3" lnHash="212456074" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="28414e11-fc07-3282-b993-b966a1f2b8d4" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1162aff5-d3f9-3b29-9fed-2b7d004f1d5b" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="MISRA2004-20_4" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="9e36739d-22c9-331a-8e20-60a6fb00ed3f" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69d67536-1255-33dc-88b5-ce7600ee2dac" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRAC2012-DIR_4_12-a" lnHash="212456074" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="212456074" unbViolId="dd956528-1575-3f21-b554-ca19e6804dc2" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a8cbef2-26fa-3b55-898d-0e3d17c46f93" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="3d08021a-6645-3f3a-9816-d5875c42ac28" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9f0620c-4562-3496-aacf-02b50d2922d0" locEndPos="11" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="934bae30-8f7e-314f-ab84-3d283399eef5" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56ba6459-eef9-38c0-b442-fdcfd2961345" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="2db07b90-73a3-37d7-82ee-9eda252a5c17" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3e0436c-1604-3457-8447-09448104b680" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="b26dd542-d9de-367f-926a-16b56cc44a22" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c590d380-9849-38ed-8698-109cc23faf2c" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="fa29f7bc-6d0e-3a13-9f7f-67c1492281b0" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b79d2297-1340-3942-8867-a50a466daf62" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="b6a8b5c3-4baa-3cd6-81b0-93b3b75a77a2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd22a5d7-a6d1-3bfc-b7f6-fd9f21d3f196" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="d6ce4b89-de57-3baf-8235-03c75f56ef50" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e47e15f-9bb6-3174-bb43-12e974be619c" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="39a41879-dd93-3f5f-a9d8-2df9c578764a" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="054c71a5-e906-3fbf-a9b9-83b6144ee702" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="d5ba90ed-4262-3959-9c90-5a5054bd916f" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b87dddb-ecef-3333-97e5-37903f1377e7" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A18_0_2-b" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="33989db0-a70f-3c07-8523-9ce27570a386" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dac2dca0-21ca-3977-92ec-f20df31ad3d8" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="fa79bead-53a0-32e6-b2f6-4c7abccd778e" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a145314-35ce-3777-9725-d4e86fc90281" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="a8142452-6c27-3e0b-980e-628649aa2ed2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6202de20-cab2-3b23-a9b2-d5a7043eedec" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="1312c466-37c6-3ab8-9d72-238a87a7d430" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb7190a9-5768-302c-89a4-742d8878fb28" locEndPos="21" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="7be99856-9ea9-3adb-9e4c-286d5eace405" locStartPos="25" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7fcbddb-f409-3ff6-bee8-74c81fc0656e" locEndPos="26" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="626ef7e1-57bf-39ee-a150-25222f842cb7" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d7f0898-48c0-3f32-a5b5-aeb2eb651a49" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRAC2012-RULE_21_7-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="d5190724-bbb7-354a-8642-89fe79da31ca" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f9a0483-61b5-3991-95d2-7f083000759c" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="CERT_CPP-ERR62-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="7335effc-38bc-31c4-b835-9390fde5cb04" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b20dc842-9de0-31cd-8a99-c0d26f7de4c7" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRA2008-18_0_2" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;cstdlib> shall not be used" tool="c++test" lineHash="212456074" unbViolId="0d196f40-7cd4-3496-95ec-9e829f3d8e38" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba912574-8c35-3a76-bfe6-196b9e01ac21" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="CERT_C-ERR34-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="1614dca9-4ef8-35b8-83e6-4d5d225743b8" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a08558a6-ee75-3c17-ab9c-c5da56c03802" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="MISRA2004-20_10" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="7ac13ec6-9dd0-3f8f-8348-3878cfa63007" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e99c06db-d8d4-399a-99b3-8f2b6d6d2ff5" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="CERT_C-MSC24-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="d22da300-6639-38b9-9f0e-cb9391fae41f" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fda43057-afa5-3b01-bdef-2412e6382fac" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="CERT_C-ERR07-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="cf84d6c6-ef6f-3ff9-8cca-778cfcef2eab" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dd8590a-8983-3fa4-8c2d-100bca36a320" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A18_0_2-b" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="8bc269a7-93c4-31ff-b5a1-f9a9b8bbe1fc" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4b50268-835f-3241-9128-f08fa71a8366" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A18_0_2-a" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library stdlib.h shall not be used" tool="c++test" lineHash="212456074" unbViolId="ef01cc4a-216a-3f20-a9d2-511cdf5e3802" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edcdf633-b79b-31b7-8137-a6d77557f2c7" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="MISRA2012-RULE-21_7" lnHash="212456074" rule.header="The atof, atoi, atol and atoll functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="9690a0c6-5282-3323-a45a-305e70fe68ab" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6b2b5ce-aa8e-39fa-9a1b-9c681877b641" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Usage of 'atoi' function is not allowed" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="JSF-023" lnHash="212456074" rule.header="The library functions atof, atoi and atol from library &lt;stdlib.h> shall not be used" tool="c++test" lineHash="212456074" unbViolId="abb73a2b-cc58-3e8b-927e-f70173bf201e" locStartPos="35" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5abe03b0-d9de-32b6-87d4-b1eda8edfa5b" locEndPos="36" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="No value of command line should be trusted: argv" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="SECURITY-35" lnHash="212456074" rule.header="Don't trust any value of command line if attacker can set them" tool="c++test" lineHash="212456074" unbViolId="8cee8da6-49c9-3807-a66c-9e21a5e6d2d6" locStartPos="40" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22d27189-b6bd-3a18-8ae4-45281d7fa375" locEndPos="41" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="JSF-151" lnHash="212456074" rule.header="Numeric values in code will not be used; symbolic values will be used instead" tool="c++test" lineHash="212456074" unbViolId="7df124da-ae66-33c3-ac54-523e059a0b94" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65bc54c0-a3b6-39f9-9f32-aeefc58a7e63" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="CODSTA-26" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="6156acc0-a6ab-3c19-80ab-3a37c969ce7d" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f11bd17-609b-3219-8039-6b6c7f1924e1" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="2" auth="devtest" locRef="1" rule="AUTOSAR-A5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="0f551bee-35cf-3900-8da3-5368cffafb2b" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="36d94e88-1a3d-3522-a8a6-3774516d781c" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Literal constant '2' is used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="9" sev="3" auth="devtest" locRef="1" rule="HICPP-5_1_1-a" lnHash="212456074" rule.header="Avoid magic numbers" tool="c++test" lineHash="212456074" unbViolId="d06e2328-7070-3909-8fd6-398a7733726e" locStartPos="45" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc68d973-f587-3523-ad68-bd9a524bc615" locEndPos="46" locType="sr" hash="-1257393797" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="10" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="8937e2a9-8196-3c9b-ae62-750f7bf2de41" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="334fa60d-28a7-3c96-a8f6-4e02f7ce1e86" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="10" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="08011771-136e-3fec-82ec-d6d2cf483035" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="299e79f2-131f-33eb-b9a1-b0ff2a97b197" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="10" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="45876523-f569-33af-94d0-8d0d2ffd0522" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09af72ab-b934-3988-920e-bead0ca57d69" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="11" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="1178067846" rule.header="Tabs should be avoided" tool="c++test" lineHash="1178067846" unbViolId="95d370f7-4310-35b9-a607-a806b8fc948a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66a36136-06e4-3e7f-a759-2c72dac3c9ff" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="11" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="ba2c5806-aea8-35c4-ac9e-c62bc479598b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aee4fec2-7139-300a-a370-0cc11c514e66" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="11" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="1178067846" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1178067846" unbViolId="5a303978-cec9-361f-b9af-bdf631525868" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="813c3e17-0b7b-3c16-b830-3b43fb3dfde7" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="11" goals="0," />
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="AUTOSAR-A5_3_2-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1390236584" lang="cpp" violId="bd4e370c-01ef-39ce-a9fe-f003ad36f049" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="46041a86-59e2-31de-8183-480d01f11b43" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="AUTOSAR-M0_3_1-f" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="78528533" lang="cpp" violId="72f01124-5723-3a49-a200-2f5a7811d196" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="51e4221a-7cae-3e3a-9a99-b99ae470ddb1" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="BD-PB-NP" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="476450621" lang="cpp" violId="6406b9ca-9c94-3e0b-8f2d-b40666b8efcd" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="fb3e5866-71d7-3935-b6be-04f12e20411c" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="CERT_C-ERR33-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2017494553" lang="cpp" violId="7f8368c4-7198-3dc3-a6a9-3803e4521ccf" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="bb195303-87f7-37d4-934f-a7e5533fbb47" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="CERT_C-EXP34-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1982312066" lang="cpp" violId="d540ef76-6572-3661-938b-565c0f021228" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="6633f6f0-dd3c-32c3-899a-71736a681c8b" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="CERT_C-MSC19-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-799733766" lang="cpp" violId="0b4df0bb-f671-3a15-a1f6-a5a9db12868f" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="3" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="935b9dae-2e1e-3627-ba34-1fae23443969" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="CERT_C-POS54-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1180988405" lang="cpp" violId="bcad51b1-a5fb-3d26-9088-87b7afa26647" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="ef112538-401d-3725-9bcf-f4d95f62f620" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="CERT_CPP-STR51-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1665615379" lang="cpp" violId="a831c196-20f0-3f13-a827-72828db6afe3" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="ce3ae1f6-9e34-3bb7-af14-2abab51a8bfd" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="CWE-476-a" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1747021404" lang="cpp" violId="6ad517df-7203-36ae-b573-e51f6a46fb20" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="9cd9eef6-8829-38f5-8472-d742f2174650" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="HICPP-5_2_1-c" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-15090486" lang="cpp" violId="88d7bfb4-7f23-394c-8edf-b3ca2f661056" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="1" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="6cf83332-96f1-3cff-a247-fe346bcc4904" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="MISRA2008-0_3_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="564686231" lang="cpp" violId="12bac978-5527-33de-b727-911e09689ad5" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="5" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="1f07692c-7920-3373-b874-4dd56d4aa690" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="MISRA2012-DIR-4_1_b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2094766674" lang="cpp" violId="2e6783cf-6d84-3c3f-b452-8d37ecc0ab2b" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="3b1b4b63-3b8f-34fa-a661-08bee48a4d65" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;point&quot; may possibly be null" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ruleSAFMsg="Null pointer dereferencing point" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="MISRAC2012-DIR_4_1-b" FirstElSrcRngStartPos="0" lnHash="1178067846" ruleSCSCMsg="Source of null value" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" rule.header="Avoid null pointer dereferencing" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1597100009" lang="cpp" violId="f39b79cb-2865-33e5-adc3-3c102cff61cc" locEndPos="0" locEndLn="12" goals="0," locStartln="11" sev="2" locRef="1" tool="c++test" lineHash="1178067846" unbViolId="cf2b4419-845f-3ea1-9cbd-478d7a2ef8e0" locType="sr" hash="-1257393797" causeLocRef="1">
      <Props>
        <Prop key="Tracked variables" val="Null value carrier" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="264435611" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="Point* point = 0;" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Source of null value" kind="cause" />
            <Ann msg="Null value carrier: point" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-620226472" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="if (argc > 3) {" ElType="." rngLn="8">
          <Anns>
            <Ann msg="Condition evaluation: (argc > 3) (assuming false)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1178067846" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="point->reflectAcrossX();" ElType=".P" rngLn="11">
          <Anns>
            <Ann msg="Null value carrier: point" kind="comment" />
            <Ann msg="Null pointer dereferencing point" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="12" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="0" rule.header="Tabs should be avoided" tool="c++test" lineHash="0" unbViolId="1387f2bd-9d5f-3801-83b0-b062e82800bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb4b8ff3-2726-3b3b-9790-ca3273377b0c" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="12" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="6cdc35e8-f283-3a50-9c1a-9b7a6f578d62" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1066ccd-776c-3101-b7ce-ff71088083a6" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="12" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="0" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="0" unbViolId="75b5ce43-8edf-3ac0-9ef8-b1a132159604" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="919d3048-b30a-3dbe-96e3-539d27c650ad" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="13" sev="4" auth="devtest" locRef="1" rule="JSF-043" lnHash="1599597842" rule.header="Tabs should be avoided" tool="c++test" lineHash="1599597842" unbViolId="623b870d-c3c1-34f9-b03d-6bef82388b12" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3ebc577-c65c-3b5f-8430-ffb5bab35cfe" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="13" sev="5" auth="devtest" locRef="1" rule="FORMAT-01" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="b48074d0-ab6e-3d9c-89a6-a4daf2884194" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5c2452e-3b40-3d39-8845-85a95e0335d1" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="13" sev="5" auth="devtest" locRef="1" rule="HICPP-2_1_1-a" lnHash="1599597842" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1599597842" unbViolId="edc46990-98f9-37c1-a141-39d30827c693" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91d06fa9-3672-3022-a170-75a729f59e9e" locEndPos="1" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locStartln="13" sev="3" auth="devtest" locRef="1" rule="FORMAT-25_b" lnHash="1599597842" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1599597842" unbViolId="b5f817c6-7314-36b0-93c1-a3b86f33c06b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0e38afd-0e9e-3ac9-b232-07ce8fb9c4e7" locEndPos="2" locType="sr" hash="-1257393797" locEndLn="13" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="5e66a2e0-c975-3e49-ba22-cf0f875d732d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="009ac549-96c6-3c92-b2c3-aae9fa79e6ed" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'DivisionByZero.cpp' should be in lowercase" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="8c0b38f0-877f-32a9-88f3-dae7fa9e68a2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bb9f68c-b925-38a1-a329-5401c033da79" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="44beee08-3e53-3d47-b56f-89e7573f9e82" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21312d23-4c72-3f6d-b899-8065269c721d" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="5" auth="devtest" locRef="2" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="abd569ad-b7c4-3ecf-8a32-c6fde54595ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17924602-56fa-33f8-9392-2dd00288f400" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="11de6ebb-622f-34b0-9e2b-8dc6f2d723bb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1edc1a68-ad67-3662-a684-59b31d7dcba4" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="66baaac1-e8e3-38bb-a429-165fd239e1e1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="774e97cd-0a70-3de3-ac70-2db83df96ede" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="eebd66ee-377c-3c96-86ab-61200b62669f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26b3492e-e1ae-3be2-b6b0-16cb9fa3fc50" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="cc05d424-b4ec-3dd0-911a-12114a34e6af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0890bcef-34a2-320f-8792-39d9213fc75c" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="f132e0b2-4e67-3085-b970-e0ea45a93d14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52a05d4a-17a0-3630-b805-8ad828692ca0" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="3" auth="devtest" locRef="2" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="8447a149-5856-3c8c-b3a1-e555f29b03b3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6b9ca6a-0201-39a0-bd0d-1d0aa952d2a6" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="2" auth="devtest" locRef="2" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="46c0904f-e4e1-3c7b-88e5-8888b15c4b1a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a99d0c66-e70b-3b88-9300-d97acfd24d81" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="1" sev="2" auth="devtest" locRef="2" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="7545d4bf-1b53-3c47-b3a6-ed0f1c3e861c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9de94611-b0e4-37e0-8a69-75ded1b25e60" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="1" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRA2008-3_9_2" lnHash="-1572071035" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1572071035" unbViolId="7db0145a-b6cf-3093-825d-b8901d2f7a73" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2863e547-c250-3d6d-927a-9bd662988ad1" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="MISRA-013" lnHash="-1572071035" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1572071035" unbViolId="5f0e53bf-52d4-3f31-bb16-eca03e749059" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24ccc9fd-7724-33f8-86f2-cb1a6c777bbf" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="HICPP-7_1_6-b" lnHash="-1572071035" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1572071035" unbViolId="fccfd2b4-33c3-3312-af7f-9d844c405bf0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64c21d3d-bf93-3ef5-a045-a9c764dd1c2d" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRAC2012-DIR_4_6-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="bf522bb9-caa6-3ddd-a029-6aaab044bf79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efcd66d2-0d43-3c67-9080-ff6f71d12edd" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="MISRA2004-6_3_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="e8367ca8-a2e3-3ba2-8265-383ec854f01d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dce9a41-32a4-3539-bcb8-512bd21c2bdc" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="JSF-209_b" lnHash="-1572071035" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="ceef7e4d-7e3d-35b4-b62e-27e1b665244f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9399b2b4-e0bb-322e-bd9a-55f706083577" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRA2012-DIR-4_6_b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="71a3e2ec-d1be-3d0a-bbfd-271099ef5659" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f2b4392-2891-36bf-a55d-837ce48188cc" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'double' should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="HICPP-3_5_1-b" lnHash="-1572071035" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1572071035" unbViolId="5d4d3844-3d5e-3d72-9342-b9de3d90a745" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17ff0de6-1f7c-3b57-8f9e-f166f84f110b" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1613810146" lang="cpp" violId="2718f036-b576-31ed-912e-d0296e33fd33" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="11c1982f-f415-3dd4-b1ee-6fbadc1048b8" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape2&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1042079686" lang="cpp" violId="129ad6a6-4f9a-35d2-b0d8-14825cf1039f" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="d9ece4b6-e299-3b39-bf66-c79a3094864f" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape2->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="6" rule="AUTOSAR-A8_4_10-a" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-938638073" lang="cpp" violId="b1eea8a4-9bbe-3eea-872d-eb8a35b05971" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="2" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="77a6b2a9-1de0-3e18-9685-e60584b335d0" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="The &quot;shape1&quot; parameter of the &quot;getShapeRatio&quot; function cannot be NULL and should be passed by reference" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ruleSAFMsg="Function header" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="6" rule="BD-PB-REFPARAM" FirstElSrcRngStartPos="0" lnHash="-1572071035" ruleSCSCMsg="Point where the parameter is dereferenced" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" rule.header="A parameter shall be passed by reference if it can't be NULL" FirstElSrcRngStartln="5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1776184541" lang="cpp" violId="6f75d7ba-a822-3d0a-8da9-500a7c991724" locEndPos="0" locEndLn="4" goals="0," locStartln="3" sev="3" locRef="2" tool="c++test" lineHash="-1572071035" unbViolId="066c5884-e898-336a-9b14-d67cfaefcf52" locType="sr" hash="-1665970746" causeLocRef="2">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1572071035" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="3" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="3" srcRngEndLn="4" desc="double getShapeRatio(Shape* shape1, Shape* shape2)" ElType=".P" rngLn="3">
          <Anns>
            <Ann msg="Function header" kind="point" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="2070090220" locType="sr" srcRnghash="-1665970746" locRef="2" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" ln="5" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="5" srcRngEndLn="6" desc="shape1->getArea()" ElType=".C" rngLn="5">
          <Anns>
            <Ann msg="Point where the parameter is dereferenced" kind="cause" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="GLOBAL-UNUSEDFUNC" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="3d6c737b-75e0-3123-aea3-66538bf27884" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a717c5a5-2706-3416-8306-2434fc1a4b95" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="AUTOSAR-M0_1_10-a" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1572071035" unbViolId="72f2a718-44ed-31da-a635-143054716b79" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1d1f30a5-fb5a-3847-92ac-476893e92b2c" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'getShapeRatio' function is not used in the testing scope" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="MISRA2008-0_1_10_b" lnHash="-1572071035" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1572071035" unbViolId="01de22a5-af3f-3b9f-9cc9-3190cda8b761" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="9a543c2c-f752-3675-9788-85e1378723b0" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The return type of the 'getShapeRatio' function should be declared as 'auto'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="CODSTA-MCPP-08_b" lnHash="-1572071035" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1572071035" unbViolId="79a0973b-6d3c-30d4-9ecc-aefd3e8d346e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c07ae5c-557a-370e-87fe-5525ff81689d" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="COMMENT-04" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="3859d31f-9bcd-3723-aeb2-12e3024d4c30" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="397898ca-5631-3d5d-b556-ca08170f11e9" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The definition of the 'getShapeRatio' function is not preceded by a comment" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="JSF-134" lnHash="-1572071035" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1572071035" unbViolId="8b26374c-c26a-3f8f-b6ae-556b85398918" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c17332e8-af69-3ab0-acfc-15193ace6d39" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="OWASP2019-API9-e" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="b2349345-af86-3962-8cf0-362e7e0b990f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c52a547f-eec3-312c-bb4b-603b8710b630" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-A3_3_1-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="ad52918e-c5d9-36de-989e-68ddc5a180b7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74c74e9d-71f7-34cc-b8d5-699f6583cb9d" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="JSF-137" lnHash="-1572071035" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1572071035" unbViolId="18aa8b1b-c8bd-3185-b93e-00385c1e0226" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e80dc9e9-03b6-31bb-be50-02e00ba2e235" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRA-023" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="44a5104a-5189-3f0e-8173-75a15c4698c2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0fb7674-5018-3de0-904e-cc7033f744bb" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="MISRA2008-3_3_1" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="97aa04d9-4cbb-3673-80ca-237d0a674672" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03b7fcfb-0902-3b2a-886d-6e94242ef15c" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CERT_C-DCL15-a" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="650e47c8-cd6d-319e-a206-9ac60106b3f8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b5f5db9-546c-3bb9-8670-f8b4ca54b7fb" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Function 'getShapeRatio' has external linkage and is not declared in the header" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRA2004-8_10" lnHash="-1572071035" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1572071035" unbViolId="0ae1e626-0020-3f76-b670-1c248348a8cb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcdde9d0-8fd5-3f1c-bc2f-f1fae5fd1771" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="JSF-051" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="742549a6-8cdd-3268-a20a-4045777426b8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d43ea691-eb37-317c-9023-7c96a2282837" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The name 'getShapeRatio' should be composed only of lowercase letters" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="NAMING-44" lnHash="-1572071035" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1572071035" unbViolId="c6ccacf0-d74e-36bd-b558-7be83c23c57a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69fef863-f16f-3c4c-9278-bf77c8502790" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="JSF-098" lnHash="-1572071035" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1572071035" unbViolId="f7544f27-8217-31f7-ba1c-30d6af5cb33e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4acc4562-2021-3790-a155-17c7cfc46981" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-CPP-36" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="141d0ab3-2496-325c-ae70-ffb2eb7b96b6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77b5ab3c-dc56-340d-9372-4d1adec6cc1f" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-M7_3_1-a" lnHash="-1572071035" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1572071035" unbViolId="be9bb4a3-43ab-38da-a223-2a6bbbf963d2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fff65540-d6a2-39de-9678-d24f95ce1d8d" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Global function 'getShapeRatio' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="MISRA2008-7_3_1" lnHash="-1572071035" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1572071035" unbViolId="2c171ccd-881b-39f5-8437-412a0af05a9b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f7a63a4-1744-3eae-993a-b764e7c9ec41" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="COMMENT-14" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="6d6ffbc3-812f-326a-85f2-c050311380a2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="132b94d2-a8d2-32ac-9adf-8a3f7bdbee1b" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-A2_7_3-a" lnHash="-1572071035" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1572071035" unbViolId="fd45d654-c016-334b-9e1e-93b66a55937c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72c5200d-2ba6-3cb5-a8c5-63784b8e0647" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="2caef5ee-7e48-31b7-bce5-34a0abc905c9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69acabdb-8a26-3fb2-a423-f07fd8aad7ba" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="68ae296d-a03c-31fa-b423-9e10e8d7c0f8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31ad1679-5f74-3421-b341-1a274f866af6" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="1ab530a9-1869-37b5-afee-3621418a74a8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="002584b5-6843-3d4b-9fa2-b745af38ebd6" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="120d1b03-1abd-37fe-94c6-6a23d9189626" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0df980b-a8dd-3ab9-a77b-217721d3f9d6" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="COMMENT-14_b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="4cf4c982-be1e-3f47-ba50-140739909766" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c003db7-adb8-33e2-9cd7-3de16cfe65e6" locEndPos="8" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-A2_7_3-b" lnHash="-1572071035" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1572071035" unbViolId="0cc6b3d9-be90-3a82-8b9a-f17c86f75ce8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff4ace4f-0515-39a2-82e2-98821801eac6" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'getShapeRatio'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="FORMAT-28" lnHash="-1572071035" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1572071035" unbViolId="b5d4bbfe-c655-3978-8827-049cabc871b9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2c12535-a9f3-35ad-945e-489b7f4100aa" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has Cyclomatic Complexity value: 1" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="5" auth="devtest" locRef="2" rule="METRICS-29" lnHash="-1572071035" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1572071035" unbViolId="039a15e9-1c01-3ae7-8947-9c2be1e4adf9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5414178-de82-3d92-bb13-5342d937c90e" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Function 'getShapeRatio' has Essential Complexity value: 1" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="5" auth="devtest" locRef="2" rule="METRICS-33" lnHash="-1572071035" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1572071035" unbViolId="4799f937-6531-3a23-8dcb-a6e6115bc81a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fa1c235-d729-3e18-83e8-4dcf6d42e50c" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Naming convention not followed: getShapeRatio" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="NAMING-17" lnHash="-1572071035" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1572071035" unbViolId="4a329c16-7f5f-35fd-82b3-ab3bb5e9412e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fa3796e-ef7d-31d3-a1de-7064154aa72b" locEndPos="8" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: shape1" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="325580d4-3f9f-3324-aa4e-e2a3275987a8" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fc8721e-6277-3048-9c04-f7920070c209" locEndPos="29" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The parameter of pointer type is declared: shape1" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="d5ca2b54-07cb-3af8-99b2-d3b475b91693" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d605db2-bbb2-3c97-928d-cc9a5833d77b" locEndPos="29" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CERT_C-DCL00-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="89660499-c453-3bee-8981-67c1f6056041" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8637778a-8a02-38f0-87da-8c309e27528c" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="c48ba800-07db-3643-abd6-c8a67868f1ba" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad10929d-ce37-300f-986b-a8d95df8b517" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1572071035" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1572071035" unbViolId="e52b4c5e-83f9-3b3c-96e3-5dcc327618a7" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f6db125-1b08-3402-b28f-8a37dc5544b0" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-CPP-53" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="4e04a3f2-8df6-3785-9da0-4757ff3435fb" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="449a8cc4-7de5-3096-92cd-dd8c53c5f21d" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape1' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="HICPP-7_1_2-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="9a81678a-c803-37aa-94e2-287d777e9fdc" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef7ee83-7c79-37cc-b2db-cfff48612fe6" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="f12971d3-056a-334f-a4c8-50afe6d889aa" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b5bd317-4345-33ce-b22b-73f59f812f0c" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape1' is not validated before use" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="e2e803d7-0f84-3dda-9f0e-de5f4f4869a1" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0341bed-d59b-3885-b646-bc321b2d4d16" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="7c4f911a-8a04-34fd-ab70-55b77723a445" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="487f323d-2200-3ef2-89d4-4cefa30367da" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="c6d4039c-f373-35fb-ab3d-873c068815a3" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df096d35-9329-3b68-8610-63a59d528af7" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="64e60b10-8ac1-3dd5-8cb3-ecba524af17d" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a282c6cb-24fa-3369-be9d-5a125a29626f" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="8fba358a-6a4f-3f85-a4a5-556017b67d7e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f5aeb8b-856d-3b3a-a7b9-4e48fc84e200" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="041e219e-5ad2-3398-8ca1-2b5901d81e8d" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91396b8c-f400-3356-8ff2-ef302a88d052" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="b8b41d3d-4eba-3c22-9d92-95ca80fdfc0a" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be75b11a-ecb6-383a-83d1-ea1aafba7683" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape1&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="8e6bce46-1be1-3cd9-a877-a1f362417e7b" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb0ca6a6-7b73-3c0a-8c98-e987ef85e0c1" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape1' identifier should have the 'p' prefix" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="481de4ac-1b00-3c92-840c-a1131f61408a" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c644d7-1215-325d-8781-765e594f1795" locEndPos="29" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: shape2" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-94" lnHash="-1572071035" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1572071035" unbViolId="43d2d14b-01c0-39d6-b7bc-9feae8eb477a" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9867915-9368-3f7d-a0f2-1f628242c43c" locEndPos="44" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="The parameter of pointer type is declared: shape2" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-95" lnHash="-1572071035" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1572071035" unbViolId="383218a4-6f59-3a92-adcb-12809d1b409e" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e51f4633-45df-316f-a27a-b0219a1badf5" locEndPos="44" locType="sr" urgent="true" hash="-1665970746" locEndLn="3" goals="1," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CERT_C-DCL00-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="d8f301d0-7699-3108-9d1a-0d29668f6750" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ccb7034-319a-3a88-805e-98d12c78d0d4" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-A7_1_1-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="b98e08b4-0e68-35a6-9fcc-281c7607f8ab" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1280b11e-d48f-37c8-afe1-747bc8a4fccc" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="MISRA2008-7_1_1" lnHash="-1572071035" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1572071035" unbViolId="07c1fa64-f984-3799-9938-d51d14a12009" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04524171-4742-337e-9359-09d710ce9d69" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-CPP-53" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="f9d3698c-ced0-3204-9b91-8b2f15642e7c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4986d316-d030-365a-8950-40862812eaeb" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Declare parameter 'shape2' as const" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="HICPP-7_1_2-a" lnHash="-1572071035" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1572071035" unbViolId="90b3e221-d332-3722-a0e8-565e11cb1e1e" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4532988-c2c1-396e-b918-b50e9ed9ceea" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CERT_C-API00-a" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="33edd805-5d64-3af3-92c8-cfaf770b61ae" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a6aba95-c378-3f9b-a848-ff420fd25b5a" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Parameter 'shape2' is not validated before use" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CODSTA-86" lnHash="-1572071035" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1572071035" unbViolId="b350c277-0794-3676-90d7-73d8280064e8" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4827e4a-9160-399e-bb4b-a11730096810" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-M7_1_2-b" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="56bee77c-b6f7-30cc-a257-f0fc47f9b9ba" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25ff1351-188f-3bc3-8160-1ab1faa14ac1" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRAC2012-RULE_8_13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="d326d846-9b07-345f-9e71-c01ecb40bac1" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc50998d-2f75-3d51-b11a-e58164c92165" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="CERT_C-DCL13-a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="67d2d664-5d5f-3ce3-8a89-523c3711c5ac" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4510726-f7ca-3940-8018-44095f7ac67a" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="MISRA2004-16_7" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="7bd2777c-e825-3372-8241-f14f05b875e9" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="958563a4-3c22-3a4b-a60b-948fa0aac2e1" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="MISRA2012-RULE-8_13_a" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="dd156cf9-993f-35b1-b7d0-ed6d488f5c3c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4353c6eb-c811-3138-a6e8-f84eeb1eb276" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="4" auth="devtest" locRef="2" rule="JSF-118" lnHash="-1572071035" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1572071035" unbViolId="e82b485f-03a4-3396-8917-22dbce57629c" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65a500a2-91f2-3739-b6c1-bafb62fe21d0" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Pass parameter &quot;shape2&quot; with const specifier" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="2" auth="devtest" locRef="2" rule="MISRA2008-7_1_2_a" lnHash="-1572071035" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1572071035" unbViolId="2db6adf6-c788-383a-83d0-618ef3abf9ae" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88d3ec2f-19ba-3d9d-8a21-3767c6e89780" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="The 'shape2' identifier should have the 'p' prefix" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="3" sev="3" auth="devtest" locRef="2" rule="NAMING-HN-34" lnHash="-1572071035" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1572071035" unbViolId="d7e7d6e2-22c7-3974-98fb-59d2559b26d1" locStartPos="43" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49cdb542-5e53-3177-8ed6-15f329a273ca" locEndPos="44" locType="sr" hash="-1665970746" locEndLn="3" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="4" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="4" sev="3" auth="devtest" locRef="2" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="cb4aed42-0476-30a3-b190-1988ce1b6d6f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c366e89-3a8e-3858-9c92-111230bc0bc8" locEndPos="1" locType="sr" urgent="true" hash="-1665970746" locEndLn="4" goals="1," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="4" auth="devtest" locRef="2" rule="JSF-043" lnHash="2070090220" rule.header="Tabs should be avoided" tool="c++test" lineHash="2070090220" unbViolId="03d47d9c-b1db-399e-ac0f-cea538304d32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f320893-6c9b-39a8-b863-35d10e748a17" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="5" auth="devtest" locRef="2" rule="FORMAT-01" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="aa2f2a7f-0199-30d7-9f8d-2f313840b26b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0c4e34c-7582-3bdc-a656-85c9f6689286" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="5" auth="devtest" locRef="2" rule="HICPP-2_1_1-a" lnHash="2070090220" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2070090220" unbViolId="fa2ab7a1-bf18-313b-a0d1-4cab23b4ca7e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d817b28a-6d81-311a-918f-0962e006e1f1" locEndPos="1" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="3" auth="devtest" locRef="2" rule="FORMAT-25_b" lnHash="2070090220" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="2070090220" unbViolId="8bb19ae1-fe0f-3f35-b998-5a7b37e4b063" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ee479a-5477-39f0-ac9e-28639dd8b231" locEndPos="2" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="5" auth="devtest" locRef="2" rule="MISRA2008-0_4_2" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="0b433935-1a2d-38ae-8dc5-b00d1b94d34f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bf9cade-a8e9-330b-80e0-40323bbf68b6" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="3" auth="devtest" locRef="2" rule="OWASP2019-API9-d" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="e9629085-3b56-392b-8cde-22c11ba7ad32" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4588361c-03b8-32f6-a7ac-719ac991f8e1" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="3" auth="devtest" locRef="2" rule="COMMENT-10" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="0fc2c9f9-8dca-37db-ba53-35854f56b210" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="579130cb-5842-3273-be0b-2444347fa0c3" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="floating-point arithmetic is not documented" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locStartln="5" sev="2" auth="devtest" locRef="2" rule="AUTOSAR-M0_4_2-a" lnHash="2070090220" rule.header="Use of floating-point arithmetic shall be documented" tool="c++test" lineHash="2070090220" unbViolId="356e53be-224a-317f-9af5-191f354c4377" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47375804-1fef-3be5-b36c-3c929306da24" locEndPos="9" locType="sr" hash="-1665970746" locEndLn="5" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="PREPROC-18" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be included" tool="c++test" lineHash="1233725276" unbViolId="afbb351f-00ca-3e03-bf39-efe42cfab36a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c1cb5ad-6fab-3a25-8b7a-1bbb2430e194" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="2" auth="devtest" locRef="3" rule="JSF-022" lnHash="1233725276" rule.header="The input/output library &lt;stdio.h> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="e4c42daf-41c2-34ba-951c-8a7d481ccc09" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f809ae80-29a4-32f5-bb55-9f1e4a16d412" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="METRICS-31" lnHash="1233725276" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="1233725276" unbViolId="28a2b3a8-b9d4-3690-a496-06116fd6daee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e894c48-002d-3337-9901-b88dd02f4156" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'MemoryLeak.cpp' should be in lowercase" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="NAMING-03" lnHash="1233725276" rule.header="Use lowercase for file names" tool="c++test" lineHash="1233725276" unbViolId="92b5687c-247f-3f2d-818e-900aef45b2ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf4a096a-d1cc-3e5b-bce2-dc5064452ba0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="NAMING-38" lnHash="1233725276" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="1233725276" unbViolId="76c54bc0-3192-30b5-870f-4139c2fea844" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a3a09e5-556b-37ac-a9e1-7f2c12c07c23" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="5" auth="devtest" locRef="3" rule="PFO-04" lnHash="1233725276" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="1233725276" unbViolId="4782ef4a-01de-3b4f-8eb5-787f671c0313" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="677fae38-55f6-39ca-8c91-9bbd6fedff0c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="2" auth="devtest" locRef="3" rule="MISRA2008-18_0_1" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="f5bfc10c-cf23-3b67-bb91-61f3fe85279f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3bf3820-30de-3779-9cb1-784289611baa" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="HICPP-1_3_3-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="811ab4c9-97ad-3b0d-a9f9-e40bf596b208" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f07b6986-41ef-3de5-b206-05aef99c5855" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A18_0_1-a" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="447b8654-44c8-343d-b028-2ae9b4b8b86b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8a97513-60b8-3571-b541-09e3b64992c8" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="CODSTA-CPP-59" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="c7dc1f69-3d62-397c-a2ff-5a6d814be9f6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f1e752f-3639-3529-80b7-562698e95558" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Instead of C library header '&lt;stdio.h>' the corresponding C++ library header should be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A1_1_1-d" lnHash="1233725276" rule.header="The C library shall not be used" tool="c++test" lineHash="1233725276" unbViolId="80db0878-683b-3c38-b9b9-5473cc6c0ccb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dc7d792-1201-3a96-bc76-8e10eadbe017" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="COMMENT-02" lnHash="1233725276" rule.header="Provide copyright information" tool="c++test" lineHash="1233725276" unbViolId="7b52a3a2-8c95-36b8-b03a-5b920c1768f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bef58fb3-d595-3939-b481-b5faa959f537" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="JSF-133_b" lnHash="1233725276" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="1233725276" unbViolId="841079ce-4c08-3d2a-8a25-9dd9ae8e099b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfb1908a-99c2-383b-a3c9-b146eec94ddb" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="COMMENT-03" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="7ac2a004-a690-375c-916a-c82e36101f8e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6572178c-dd35-36a6-89df-3cdcaa46c42d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="JSF-133_a" lnHash="1233725276" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="1233725276" unbViolId="221895d4-6c50-37d1-b414-b9f564572102" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9089aef-b210-33fb-8fd2-a829b6881874" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Ensure that C Standard Library is securely used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="4" auth="devtest" locRef="3" rule="HICPP-17_2_1-a" lnHash="1233725276" rule.header="Wrap use of the C Standard Library" tool="c++test" lineHash="1233725276" unbViolId="654dc870-2a6a-3697-8912-98e0ea8611b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4885af9-a099-3cd1-b673-89019b530815" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-M27_0_1-a" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="8d021b22-2af2-356f-8b17-e27078520451" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d371837e-6902-3f82-9725-849d35907a15" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="2" auth="devtest" locRef="3" rule="MISRA2008-27_0_1" lnHash="1233725276" rule.header="The stream input/output library &lt;cstdio> shall not be used" tool="c++test" lineHash="1233725276" unbViolId="a3858c6e-beff-3dfe-922e-084a914438f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75a7839f-90a3-343c-9700-59a96fb3984e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="&lt;stdio.h> library shall not be used" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="1" sev="3" auth="devtest" locRef="3" rule="MISRA2004-20_9" lnHash="1233725276" rule.header="The input/output library stdio.h shall not be used" tool="c++test" lineHash="1233725276" unbViolId="579914e6-5e09-370b-8300-9dc4a1f4a536" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3090a96-352f-31e0-ab4f-d61b393b298d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="1" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="4" auth="devtest" locRef="3" rule="JSF-098" lnHash="-738024550" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-738024550" unbViolId="566dd280-d7de-3648-ace1-fb4b51b633a5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48220f89-e3d5-3d8c-9c55-cd9da26ddfa2" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="CODSTA-CPP-36" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="540ed355-4447-36e7-a890-66ac87ac6e46" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0c70acb-3ab3-393d-b734-3eb5cc800e3a" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-738024550" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-738024550" unbViolId="eced4a2b-3681-3001-bb1f-996b444b0b2d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a30ecef8-26c3-3b7b-85c1-65c3cfb3eed5" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Type 'IOException' is declared in global namespace" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="2" auth="devtest" locRef="3" rule="MISRA2008-7_3_1" lnHash="-738024550" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-738024550" unbViolId="c2cd9195-4a53-3d6f-964a-d0ed2dded11a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59185b79-b4b6-323a-b95c-70fd6094e8ae" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="COMMENT-14" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="9ae0b902-aad0-396b-b3a7-27e4d20fa755" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f0db3e2-3608-3c71-aa35-82bc386bc3e2" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-738024550" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-738024550" unbViolId="eea4a394-2622-3ee4-b5d4-88d867f2e36a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d411989c-090c-38b2-9176-08aeecfb6961" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' does not define any constructors" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="2" auth="devtest" locRef="3" rule="CODSTA-CPP-19" lnHash="-738024550" rule.header="Declare at least one constructor to prevent the compiler from doing so" tool="c++test" lineHash="-738024550" unbViolId="5635eadc-b3f5-3f6b-99a4-fe216081c90c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79a5f902-c3fa-3b10-92a6-193586ff6a1b" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="4" auth="devtest" locRef="3" rule="AUTOSAR-A12_4_2-a" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="aeb429b7-264c-3d23-8c4d-3bf00555906f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c083e5e-2e8b-3831-b8c6-e7913886cdaa" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' should be final" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="CODSTA-MCPP-23" lnHash="-738024550" rule.header="If a public destructor of a class is non-virtual, then the class should be declared final" tool="c++test" lineHash="-738024550" unbViolId="2890e8c7-dfff-31a7-8463-9d06d507d5a6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9446c549-9d80-3fdb-9511-242c0f777b47" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare default constructor in 'IOException'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="e50f6f62-f8b0-345e-986e-ff195a44e9dc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55e9162e-f073-3750-a789-6527c90db68b" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare destructor in 'IOException'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="e28dcb3d-bb88-3ca4-904a-383b06caa9d0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6645272a-5c34-3434-9fc8-891a19b1b8ee" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare copy assignment operator in 'IOException'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="02a05e24-40cf-345a-b8a6-e7acdf31a111" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ef3eabb-1e91-3932-a06b-2777e305418f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare move assignment operator in 'IOException'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="f706db49-3b59-38e3-988e-5bdd4c9079ed" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1eb37fa-0caf-3594-b034-4d79d7039923" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare copy constructor in 'IOException'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="20e4850f-78b4-30a1-bd6d-a89cfbf5ceb5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8403274-899b-374a-95f0-6d1cb5128f0f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Explicitly declare move constructor in 'IOException'" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="HICPP-12_5_1-a" lnHash="-738024550" rule.header="Explicitly define =default or =delete special member functions of concrete classes implicitly provided by the compiler" tool="c++test" lineHash="-738024550" unbViolId="bd949455-43e7-359e-8a4a-18fc226265b8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5406f63-bd85-3caf-b6f6-fad8be2af670" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' missing assignment operator or special comment" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="MRM-04" lnHash="-738024550" rule.header="All classes should contain the assignment operator or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="aa141ad0-59f0-3a06-80e8-5355b8da852a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06201dc2-9a7f-3316-8528-11a26b3dd49f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="Class 'IOException' missing copy constructor or special comment" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="MRM-05" lnHash="-738024550" rule.header="All classes should contain the copy constructor or appropriate comment" tool="c++test" lineHash="-738024550" unbViolId="5a5fb907-e889-3035-aed2-8b66408a61c7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5b16709-16b0-3765-9440-1dd5adef8d0e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="All letters beside the first one in name 'IOException' should be lowercase" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="NAMING-40" lnHash="-738024550" rule.header="Only the first word of the name of a class, structure, namespace, enumeration, or typedef will begin with an uppercase letter" tool="c++test" lineHash="-738024550" unbViolId="84fab322-e72c-3cb4-ac78-01d28bf5b4ad" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a7d880b-a81f-389e-acf8-163bd9d1d634" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The 'IOException' identifier should have the 'C' prefix" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="3" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-19" lnHash="-738024550" rule.header="Hungarian notation for class declaration" tool="c++test" lineHash="-738024550" unbViolId="ca168847-cf1a-3c2e-a7b8-4b62e034e6b6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d843e3c2-bf59-321c-a3a3-6300d4c49541" locEndPos="7" locType="sr" hash="1013754779" locEndLn="3" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="25054645-3175-3386-ad8f-eae8301b1604" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9771e8a9-bd61-3c20-bd34-ed776a06f7c5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="e4d7aec3-a03f-3f13-a124-941397e1d16c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7606e694-6a7d-3606-9263-d5e2898bc51a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="0040d43c-c918-33db-9fd5-48b06dc98f30" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc6bd2fb-f4b2-3f9f-8c25-c5a2bbab3672" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="eb4424b8-afc6-3228-8988-35b2604f9c0b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b6cd221-955c-3ca8-b692-0ba2115e9b50" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1086168919" unbViolId="aee78e79-5bff-3ab8-ac10-9029b36f52b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cbbcfa9-89b7-3591-8e74-74d6bcadfc67" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="fa666176-12dc-3204-ac22-4b4de3965fef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ecee1bc-ac77-3341-8018-7d4dc2f7ac2d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="1435ea39-fd73-311a-a129-0973d67e59e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ab1f76e-1219-3361-ab7b-b68a0ecaedfd" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="54e913af-5b27-3ea1-93e0-98047c21156f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6ef7e93-52fc-38fa-b817-e8f3c5e4afc0" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="27cb0bc0-3161-3388-8eb6-661c952d58c9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c54aa4a9-8438-34b6-8eda-abe3da5b1f94" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="afea1c24-80dd-3d38-b345-aa4d6a5ab6de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="575ed1cc-d7f7-33ac-8faa-4331d10a5f6e" locEndPos="1" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The return type of the 'readIntegerArray' function should be declared as 'auto'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="CODSTA-MCPP-08_b" lnHash="-1086168919" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-1086168919" unbViolId="6dad16d6-cd13-3d8f-a14c-7545f82a7abc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9170d891-6dfb-3e9f-9ffb-223a1f0912e7" locEndPos="6" locType="sr" urgent="true" hash="1013754779" locEndLn="5" goals="1," />
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="COMMENT-04" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="1841a9a4-8d98-3890-b7da-f973a4070c2e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76c8fc6d-4374-3da5-b285-71579a3d9469" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The definition of the 'readIntegerArray' function is not preceded by a comment" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="JSF-134" lnHash="-1086168919" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1086168919" unbViolId="0674e89b-2611-33c0-af2a-00f91d32abf8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2474c169-6bdc-3fe9-af28-fbfdd5e6addf" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="OWASP2019-API9-e" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="3aabcd48-3335-3d70-a935-abc49c12fc73" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65421e09-80ad-32f3-80d2-37093841fc10" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A3_3_1-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="2c037d68-c6d6-3062-8275-17045b7d3f76" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8456d73-1611-37bd-8715-c3ce1b14eacf" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="JSF-137" lnHash="-1086168919" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1086168919" unbViolId="8cf8bf16-5fa5-38ca-99a6-5387cb65c2a6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ea59c9a-4bb0-3d10-9b7b-3cf892ba4e26" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRA-023" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="0a8c93cc-6c08-3c1f-91b0-21ca84ee16b4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17b830fd-db00-3843-8f3d-d1e8bef9438a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="MISRA2008-3_3_1" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="2972b7a6-faa9-31cb-a180-f89567fe99ef" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f7da82a-d5e7-37ae-9a7c-143d015d09a5" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CERT_C-DCL15-a" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="274e216b-7672-3647-b9c3-cf1c2d669ee2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65827a49-0161-3e2f-a83e-72157564fc7b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has external linkage and is not declared in the header" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRA2004-8_10" lnHash="-1086168919" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1086168919" unbViolId="972ec648-c99e-3ffb-9db7-dd8692e169b0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdd3b893-3d72-304b-b9a9-a07a3643339d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="JSF-051" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="48659a99-e64d-3f3d-8d4e-14e7876db347" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33d705a1-a248-3b4a-819e-cc9b93b6034c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The name 'readIntegerArray' should be composed only of lowercase letters" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-44" lnHash="-1086168919" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1086168919" unbViolId="8a59cea3-70af-305f-bbee-0591248b8f63" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f2803be-e6c4-3a2f-9f96-47324d216f59" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="JSF-098" lnHash="-1086168919" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1086168919" unbViolId="c366c96f-9282-3395-855b-cd483f530e25" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d55d2f90-54ca-3d29-a948-39ca1f39d062" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-CPP-36" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="ecc3daa3-fff4-3b9f-a31e-71b4bb1ec7f9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29eeae55-9691-39e5-9d88-a794580f262d" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-M7_3_1-a" lnHash="-1086168919" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1086168919" unbViolId="8b46b1f1-debd-3f6b-96a3-6078a50e96fc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24b9a8db-e476-3935-a9cb-31d05c0693e5" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Global function 'readIntegerArray' is declared in global namespace" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="MISRA2008-7_3_1" lnHash="-1086168919" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1086168919" unbViolId="6a307997-53bb-3155-8e11-05ed339bbcca" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d56c420c-7b2a-38dd-a116-a3a167e2ef6e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="05f8d166-f474-329d-b828-de63664f3587" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c14cf03-1c43-3070-a06a-98bb11bf780b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' returns a pointer type" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="ed966737-c873-3424-a58f-5cd1388c56fc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf8e8267-d163-3696-b4b9-dfe896a569e4" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="COMMENT-14" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="035772c1-3152-3cd6-a640-78dd82b82c66" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93f098d0-3ab2-3857-9338-23298983a8b4" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A2_7_3-a" lnHash="-1086168919" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1086168919" unbViolId="da1e6816-ee9a-323a-9b2b-bbb3b2c755a9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d72f6e35-88ec-3d7a-9b81-72c9da5c54aa" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="618e1c4d-d7b0-3a54-9164-72d820e73b01" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3afbca02-19bb-3718-bfb0-ed289660f9d3" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="42e6474d-1cbc-3df2-acd2-d98342ae1d92" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9a92d98-c648-3419-b183-11fa6d646a45" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="85c69a48-4ef7-37e2-8ac0-094937f6c63c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55f17356-8d83-3fe6-aba2-737af4cf8dc0" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="0a69f7ee-baf7-3a67-9917-af7247f8b547" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd40897e-1f21-3fec-aca7-f4324895258a" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="COMMENT-14_b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="34d44314-3f78-3912-85c0-d092674e5f40" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5516800-e906-3b98-8a11-8c523592ccce" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A2_7_3-b" lnHash="-1086168919" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1086168919" unbViolId="51f0509d-e8a4-3f30-81f6-df9474e0eba3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0733a662-31e4-364b-8de0-9c84c9073d2b" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'readIntegerArray'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="FORMAT-28" lnHash="-1086168919" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-1086168919" unbViolId="2f067f07-de41-3498-85a9-333e817294d3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99241e2d-9d94-36ee-8789-2049a503562e" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has Cyclomatic Complexity value: 3" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="5" auth="devtest" locRef="3" rule="METRICS-29" lnHash="-1086168919" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1086168919" unbViolId="4b8450e3-6025-3225-ad1f-82c4a87697e0" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a0c71f8-3a37-36b3-977d-d601076617db" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Function 'readIntegerArray' has Essential Complexity value: 1" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="5" auth="devtest" locRef="3" rule="METRICS-33" lnHash="-1086168919" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1086168919" unbViolId="345666fe-ccb4-3dea-8ad9-8980c9ce7bed" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3d3151c-3da1-367c-8073-86a21f9967a7" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Naming convention not followed: readIntegerArray" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-17" lnHash="-1086168919" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-1086168919" unbViolId="89bb84b5-d673-3efa-86dc-becf176419ba" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e44917aa-ceb1-3ea0-bc55-857817f47718" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="GLOBAL-UNUSEDFUNC" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="7f07b681-2280-31eb-8970-0de5ea6fc7d8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="bd9c8b16-f7fb-321e-b433-6478adf52d8c" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="AUTOSAR-M0_1_10-a" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-1086168919" unbViolId="475b6eb9-0484-305f-aabf-e41af0d466a1" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="85d55fba-70df-30c6-bd79-8c20d97c03d7" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'readIntegerArray' function is not used in the testing scope" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="MISRA2008-0_1_10_b" lnHash="-1086168919" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-1086168919" unbViolId="ab677f6e-e5ce-37c6-a147-3808f1d21b61" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="89a063cd-8f5d-30ea-89ac-d3c87618e4e2" locEndPos="6" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-45" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="95730652-8cbf-3717-947f-920b4206fe49" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65b102c5-cfa2-37c0-bc61-7015be166e8b" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="JSF-048" lnHash="-1086168919" rule.header="Identifiers will not differ by mixture of case, the underscore character, interchange of the similarly looking letters and numbers" tool="c++test" lineHash="-1086168919" unbViolId="c4b68ce9-e60c-3ea4-8904-54b0d23f0988" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cfbecca-aedd-3da5-a49a-a0b6dbe84612" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: file" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="d14e319b-67e1-3662-9969-760a1fc19b99" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e66f10bb-45e7-3f29-bc92-0580971508a5" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: file" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="3eb82604-bda6-34c5-bf10-ce1ec134a779" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae0db8e3-a40d-37b8-b003-48fb496402d4" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="MISRA2008-2_10_1" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="8818ccdb-a842-3569-a13e-3378cad394e4" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="017e4798-ce9e-36e6-8e4b-f62c522a79d6" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="HICPP-2_4_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="ed1a556c-773d-32fe-88b2-a4ecca8fcc18" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f0d3600-3fe3-3b68-89c4-f779f5faced9" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-M2_10_1-a" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="1b0e72e7-6451-3aa6-92b6-3fadb430b642" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afa6147d-04d2-33bd-97f2-e6021e66b50e" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Identifier name: 'file' differs only by case from its type name: 'FILE'" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-47" lnHash="-1086168919" rule.header="Different identifiers shall be typographically unambiguous" tool="c++test" lineHash="-1086168919" unbViolId="cffb10f8-296e-3d50-b777-e63a29123660" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e0db703-734c-33e0-80d8-b4d85a0ba0ef" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CERT_C-DCL00-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="e5accf7f-36b6-3ee2-9537-65bc6a760963" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dce8164f-d834-37dd-8164-855b7574ff18" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="c35b0bf5-8cbd-36ac-a845-e882bce2ff02" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c51f27f-0e0c-3291-8568-a9f712426562" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="MISRA2008-7_1_1" lnHash="-1086168919" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="-1086168919" unbViolId="0bf7baae-f67c-3db4-9e2c-356d8dfbb190" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90e94a72-e0fe-3263-8188-54fbffeb5c7c" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-CPP-53" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="1cb5b5bc-0463-3911-b404-cb884058161d" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a7d64b4-7c59-3ff5-ab53-e99624ceba7c" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Declare parameter 'file' as const" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="HICPP-7_1_2-a" lnHash="-1086168919" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="-1086168919" unbViolId="af8a254d-17de-38a7-af8a-d53e6daf79c0" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7832ebe3-c5ff-3460-97bb-8d366999bd2a" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="8a210eb5-8b4a-3cd6-83d0-c7419cfb572f" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="204d90a8-0999-375f-85da-6e4908d91b41" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'file' is not validated before use" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="fed8a792-1804-3de2-a7b2-d33a767b0a1c" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4516a6ae-87d5-3c5c-b668-04cd97180f9e" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'file' identifier should have the 'p' prefix" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-34" lnHash="-1086168919" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1086168919" unbViolId="0b66e985-f929-3efe-bfd9-94bfd8ff9d6e" locStartPos="28" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c095b99-ead1-328d-a7ed-bc88a0dd9c23" locEndPos="29" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRA2008-3_9_2" lnHash="-1086168919" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="cf4ff666-54cf-33e9-8f82-36794bec293f" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1b721ce-3227-3b5e-9a49-a876b7c1fc2d" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="MISRA-013" lnHash="-1086168919" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1086168919" unbViolId="e8b051a5-76d5-36a7-aba8-d05a7d514b61" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13c2a0b1-2f8a-3fc9-9485-85a1c1166a10" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-223" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="f5d228a1-904d-3162-8112-e5d7c5ed7ac7" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c96ea36-6d72-36a4-89b1-cecfa4582750" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="-1086168919" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1086168919" unbViolId="01af5f75-5e15-3f9b-8246-d0c807c2f16b" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d275420-7963-342e-994a-c705b1dc37ad" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="HICPP-7_1_6-b" lnHash="-1086168919" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1086168919" unbViolId="b7e310bd-64ce-30a3-abec-2c618c397e65" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecfcb551-4186-34c3-934a-6f0c3fc6a914" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="824685fc-c945-3245-a14f-6a698c59bc44" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bc03479-3292-37ed-aa19-2c57c85e4bdb" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="MISRA2004-6_3_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="bd7dcc48-3426-3895-a048-a0510bcb1ca4" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95daec33-7c85-3bf5-980d-c19aee0cba9a" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="JSF-209_b" lnHash="-1086168919" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="0542a7c1-f7f3-3172-8808-96ba539b1ee8" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af6eb339-4548-3b5d-b30b-f5e45d7adc23" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="d87a57e7-d340-35ee-923a-e277d7b089f4" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3346ce51-e921-319d-be05-a13114549174" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="HICPP-3_5_1-b" lnHash="-1086168919" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1086168919" unbViolId="b073375c-d7df-32b9-ba44-c0e75e6856a6" locStartPos="34" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e3bf4b7-c8aa-3be6-89af-969b495a26fb" locEndPos="35" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: pSize" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-94" lnHash="-1086168919" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1086168919" unbViolId="028257f3-7f67-3dac-bb6b-07456dc3cd6a" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec3736db-1f92-3d2c-86e1-c8c1da7ccf28" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: pSize" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-95" lnHash="-1086168919" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1086168919" unbViolId="f13a7b13-a519-3e6b-9cf8-c0d71b214421" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dd9381b-616b-3901-865d-e2b464d82f9d" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CERT_C-API00-a" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="b4234ff8-5735-33a2-bb56-ed825c122a15" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae4c50b0-5664-358a-ad5c-400735b7749f" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Parameter 'pSize' is not validated before use" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CODSTA-86" lnHash="-1086168919" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="-1086168919" unbViolId="41f2ab27-7c69-30b8-9077-fc79ee5c3ae7" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da1303ff-f327-326e-9c0d-ad89aa9c4265" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-M7_1_2-b" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="1e1d2ad1-346b-354e-96a1-987036106699" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="344ed7eb-7ed4-3a31-8ad1-59d57f7aa497" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRAC2012-RULE_8_13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="c2f45c56-635f-3a56-94ea-b8523dcc974d" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="798b5559-cc3c-3f17-a333-a525ee0ffc6f" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="CERT_C-DCL13-a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="44918ac5-ab85-3210-aa08-6081cd7212b8" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38269b7f-bc53-3d6c-b8a1-6470df77de99" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="MISRA2004-16_7" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="951bbed9-3290-3a03-a54d-c6367a6e80d9" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f52e409-9b47-3427-9c08-fc946f9f1020" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="MISRA2012-RULE-8_13_a" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="bb2b1025-fee5-36db-b290-dc0a96a61563" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68083785-de16-3e75-b5dc-62023aa86638" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="4" auth="devtest" locRef="3" rule="JSF-118" lnHash="-1086168919" rule.header="A pointer parameter in a function prototype should be declared as pointer to const if the pointer is not used to modify the addressed object" tool="c++test" lineHash="-1086168919" unbViolId="6798488b-ac72-3363-a9fd-f39215e03f94" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a29e451-fb1f-3665-90e1-720550d53105" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Pass parameter &quot;pSize&quot; with const specifier" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="2" auth="devtest" locRef="3" rule="MISRA2008-7_1_2_a" lnHash="-1086168919" rule.header="A pointer parameter in a function shall be declared as pointer to const if the corresponding object is not modified" tool="c++test" lineHash="-1086168919" unbViolId="e9760a27-2293-3523-8cbf-ecfd8ab2f946" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83c3a361-0ad0-3f28-ae72-5e4cab4ff99c" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-23" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="f041385b-f6d8-3af3-ad8a-702208751af0" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fc1f62c-4305-3307-bd27-8a2f904062df" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-31" lnHash="-1086168919" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="411e4ab0-b771-3495-8c37-0c78ed6e87ce" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3aa5e13-e391-3f54-837f-d9f150ab60d5" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="5" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="5" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-44" lnHash="-1086168919" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="-1086168919" unbViolId="c9bd667b-0c85-32c7-aac8-7e9f2d6e5169" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="284bc6e9-32a0-3d66-a562-6e2c141131c0" locEndPos="40" locType="sr" hash="1013754779" locEndLn="5" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="6" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="6" sev="3" auth="devtest" locRef="3" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="cd6ce8e4-3db0-38e3-b1a2-10616ff5ce8f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efb97640-a39a-3e56-bca6-de3bea919c57" locEndPos="1" locType="sr" hash="1013754779" locEndLn="6" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="-1844934654" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1844934654" unbViolId="b65560ed-2ed8-3d54-8d95-df5eeb1dd4bd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3d0d5d0-bdc9-3356-b858-2cad1be21325" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="dfa26833-1e61-32b4-83f5-dac1ac77a3fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e682a6b7-74f4-3d5a-b25e-be5708352108" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="-1844934654" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="cfc1db9e-c58a-3695-943d-c48ad3d352e9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6078eba9-02cc-3f59-bfca-35d2d6697181" locEndPos="1" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="6f7db225-865e-363c-b4ec-feee30f9a0aa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03e739a2-ab15-3bbc-b49b-43d415e1244a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="0dd43080-3056-329c-a914-ec237aaf0a20" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e366d72-30fe-38de-9ce5-9bf5052cfe48" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="CERT_C-ERR02-a" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="3d33420e-b122-37d3-9ffc-876a84ba3430" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9329a48-3d12-3e84-af8f-19495d939bd8" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="CODSTA-110" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="864fa939-162c-3781-a463-9addd5961707" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70c92ebd-3cf6-3bb9-ae23-2354ef55aafb" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="CERT_C-ERR07-b" lnHash="-1844934654" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="256b5b60-1c2a-3fe5-a5c3-05dfb1481bd5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f7990ad-86ab-3f51-918c-2a01cb7d20ab" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A0_1_2-a" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="2dcaa786-1745-37ee-b37d-3d48cecd709b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e66cb12-7c2b-317b-b76c-126893dc3ccd" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="CODSTA-CPP-58" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="945fca8f-9913-3462-9a8c-3f48fa70efd0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e159d70-fc4a-3f29-af75-5b7dc1ca1bd3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="MISRA2008-0_1_7" lnHash="-1844934654" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="264463e1-c6c6-3c75-9f3a-86292574470b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47e13f96-43ad-3a54-8bfb-8209ded6e92c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's 'fscanf' return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="4" auth="devtest" locRef="3" rule="JSF-115_a" lnHash="-1844934654" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1844934654" unbViolId="13f51393-2efc-3218-b3a8-2e06fd355caf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbbb4d51-8fd1-35d1-8722-7533b32b417a" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="CODSTA-122_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="043bdaaa-ee82-3133-9ba2-9d88c382deaa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01b89b5d-50b7-3ca3-8827-29eeab5be21c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="1" auth="devtest" locRef="3" rule="CERT_C-ERR33-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="248f6429-a4e4-38d6-a9ec-4195519249ea" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db9252c5-e004-39e1-9372-b081359f7af7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="1" auth="devtest" locRef="3" rule="CERT_C-POS54-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="2b1d071a-6263-35e6-8920-4b6f75afbd78" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f1916c4-e8e5-36e2-b471-3a6eaf7d543b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="MISRAC2012-RULE_17_7-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="c02d478e-12e4-3bac-b07e-1c51b7702fe3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfa63d63-546d-3d38-a09f-613787b0b1f9" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="CERT_C-EXP12-a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="edfcf144-05f8-3ebf-8bcf-1e333f9e32d6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d15ff30-973a-3f95-8699-090f2f730e8d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="MISRA2012-RULE-17_7_a" lnHash="-1844934654" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1844934654" unbViolId="6339bdea-9330-3752-8a44-138eff22f21a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23a949d3-f523-3e1e-8564-00867864414d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="MISRA2004-16_10" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="eee3aef2-35d3-35af-b906-bd2ce3129d98" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69473fe6-a3b6-3f55-8d5c-1c9e08cf6bca" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-M0_3_2-a" lnHash="-1844934654" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="1f2e8bc3-8c19-31d7-b5d5-d54459f04926" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50c870df-06e9-3fc3-9796-76aa50faf334" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="MISRA2008-0_3_2" lnHash="-1844934654" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1844934654" unbViolId="677a9bf6-c4c1-349a-bdc9-40677db55767" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bac3a82-e9fe-3575-acf9-08c4a2f9c8d0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unused function's &quot;fscanf&quot; return value" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="JSF-115" lnHash="-1844934654" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1844934654" unbViolId="b475bb92-91f2-321d-8684-8f44c04723c0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf6f11bf-3cf3-3d09-a4b5-38ea63f2edaa" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="APSC_DV-002390-c" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="37f234fd-b50a-35e2-b9a9-f0fc8702df1b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3036f540-30ad-3dd5-aef4-14ea93522fd6" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="SECURITY-14" lnHash="-1844934654" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="-1844934654" unbViolId="a985c476-e2e3-38f2-8faa-dc424fbdd87b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f0e282f-cc45-37cc-86ed-2841fee600e7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Prefer iostream.h to stdio.h" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="5" auth="devtest" locRef="3" rule="CODSTA-CPP-01" lnHash="-1844934654" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="-1844934654" unbViolId="f11e589f-ec73-30b2-be2f-4d3125433b78" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="679e1202-b0df-3227-87a3-3e9b38f6fe8e" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="1" auth="devtest" locRef="3" rule="CERT_C-STR07-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="db32f413-782e-3640-8ed6-1b1b857a11ee" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8799edcd-6d0a-3831-b825-15a85d95e127" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="fa9f879e-0e75-3855-a01b-b1ee02ac171f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f529e3e5-b2eb-314d-9986-f193093780cf" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="CERT_C-INT05-a" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="80a11872-5df8-3fa2-aa68-78fb717b3cc7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f02eeaee-d987-30ca-9636-031101ba7826" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="SECURITY-13" lnHash="-1844934654" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="-1844934654" unbViolId="58dc960e-369c-3387-beb0-b7b93d8f5ac9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bddfcda2-e272-3dca-a7f8-25ff0dd1655b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <DupViol msg="Duplicated string: '&quot;%d&quot;'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="CDD-DUPS" lnHash="-1844934654" rule.header="Avoid string literal duplication" tool="c++test" lineHash="-1844934654" unbViolId="975e2216-fc65-3fef-baa8-1f3f33571aab" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="dccffc76-657b-355c-8df9-79df2b3f922a" locEndPos="18" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="14" srcRngEndPos="18" srcRngStartln="7" srcRngEndLn="7" desc="[Line 7] Duplicated string in file 'MemoryLeak.cpp'" rngLn="7" />
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="19" srcRngEndPos="23" srcRngStartln="10" srcRngEndLn="10" desc="[Line 10] Duplicated string in file 'MemoryLeak.cpp'" rngLn="10" />
      </ElDescList>
    </DupViol>
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="5" auth="devtest" locRef="3" rule="CWE-798-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="b9958ae7-1022-34e0-9eb1-608526cafcaa" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23dea119-69bb-3705-8da9-ecccb78326f5" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="5" auth="devtest" locRef="3" rule="CODSTA-203" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="22b164ff-6d9e-387b-8f97-19455071b4b5" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e7df748-08fc-316b-a160-602fec9d55a4" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="1" auth="devtest" locRef="3" rule="APSC_DV-003110-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="f2af8237-3fb7-3b36-88ea-77d66ff90e1f" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a79b3462-39da-3a73-b7dc-8de999933f0f" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="1" auth="devtest" locRef="3" rule="CERT_C-MSC41-a" lnHash="-1844934654" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1844934654" unbViolId="73b9f4f6-75c3-3b9d-be0f-91e6e5b8faf9" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d5c8acf-c5e7-307d-85eb-f3b9196da40f" locEndPos="15" locType="sr" urgent="true" hash="1013754779" locEndLn="7" goals="1," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="df0e744a-86d1-37fa-bc10-7b4b086e7962" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32f1ba96-56c1-30a1-88ab-a198b45ab0ea" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="7" sev="3" auth="devtest" locRef="3" rule="PB-76" lnHash="-1844934654" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1844934654" unbViolId="ec9e3b70-3e2f-3995-acae-1431b2b937c1" locStartPos="14" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4899da02-4d44-3239-b581-218342108e98" locEndPos="15" locType="sr" hash="1013754779" locEndLn="7" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="1773312110" rule.header="Tabs should be avoided" tool="c++test" lineHash="1773312110" unbViolId="35fa89d6-f962-329c-9f61-ec6738afbbde" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c59db827-40c0-3fa3-bc95-89c0e5887d0b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="bb2e68c1-a71d-3068-934a-05562649b700" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43322a3e-13c6-3f30-9ad1-f0484b80a8ad" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="1773312110" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1773312110" unbViolId="d72947d3-9dec-36b5-9a6d-0c64f7326886" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="955d38c4-87dc-343b-bbe0-8da9f7a255ef" locEndPos="1" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDALLOC" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-862528737" lang="cpp" violId="bd89e490-4b96-394f-a4d9-f87520f1ff95" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="f6da8cf4-9f12-3187-978d-e3c1fce5ae36" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="CWE-770-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1466367756" lang="cpp" violId="aedf1d34-d530-3b88-8238-c3c8c367f8a9" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="902d6028-0fcf-3a32-bb52-ed244932ed2a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used to determine the size of memory allocation" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where the array is allocated" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="OWASP2019-API4-a" FirstElSrcRngStartPos="0" lnHash="1773312110" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used to determine the size of memory allocation" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1519224323" lang="cpp" violId="94a6eb8d-5912-3257-ba17-058720f04213" locEndPos="0" locEndLn="9" goals="0," locStartln="8" sev="2" locRef="3" tool="c++test" lineHash="1773312110" unbViolId="d0ae5c60-9b0b-35a8-9fff-6d83de534ea3" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".P" rngLn="8">
          <Anns>
            <Ann msg="Point where the array is allocated" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="4" auth="devtest" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="30b49f21-de72-38eb-8e22-b069987da5df" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7feace49-a39c-39a2-89da-0ddc614b038b" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="e1fc8355-fc25-3b7d-9339-d32f1836794b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9211cce-6a81-345e-bca2-65ff86c63b47" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="eb678929-c0ac-3ea1-a92c-3ee1b60bd2ea" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bd2dab0-61a5-34a2-bfe4-3c83d890e521" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="d6496a34-8e7b-33ec-bfc1-7f3f18cfc741" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c4460c7-6ca3-3f59-b583-8128ed154b6f" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1773312110" unbViolId="b847dc15-3f76-3d10-99b0-494d3a9d16ee" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bae8d2d-582b-33cb-9378-a7d1888847d7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="4" auth="devtest" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="3f9c5ca8-29db-3c02-96e1-525229501671" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="712dd3a5-d719-32c6-a840-c2c9d140a8a8" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="c7e27d2e-2564-36af-8a65-1c44bef779f3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="103d32e1-91ad-387b-8f52-464f9a11267d" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="3cbef0cd-8910-319b-9053-14f10f26ddb3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e567aba3-4560-3f2d-b9e6-ac3a94328a96" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="4" auth="devtest" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="7bb5d5ed-55e7-3b83-9cb4-e2dcca477c73" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="685c230e-ecf0-3fef-803d-41544ce286f7" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="e67c6b7b-1263-3203-b5b3-ecc0f94d65e6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53353a27-4c2f-34fb-920c-a111037497b8" locEndPos="2" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="918568ae-5c47-33ba-9477-80aefb20572a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1eb555a-38ed-3857-8c8c-b82e37fb55cc" locEndPos="7" locType="sr" urgent="true" hash="1013754779" locEndLn="8" goals="1," />
    <StdViol msg="The definition of the 'data' variable should contain a braced initializer" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="CODSTA-MCPP-38" lnHash="1773312110" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1773312110" unbViolId="298f889f-51ac-3048-a037-e9b524b1d5f6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="179b08e7-ec0f-38b9-9a00-0245aa2ea5df" locEndPos="7" locType="sr" urgent="true" hash="1013754779" locEndLn="8" goals="1," />
    <StdViol msg="The 'data' variable should be declared with the 'auto' type specifier" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="CODSTA-MCPP-08_a" lnHash="1773312110" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="1773312110" unbViolId="fca76a86-4bb2-3fbc-a008-7f724a0a194d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9395799-581b-395f-9827-228b291a7e50" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: data" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="CODSTA-94" lnHash="1773312110" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1773312110" unbViolId="5b8f8ab5-7e41-3255-bff6-69e2e130ffc9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dbcda0f-b521-34f4-8e3b-8d446126bc6d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The variable of pointer type is declared: data" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="CODSTA-95" lnHash="1773312110" rule.header="Do not declare pointer type" tool="c++test" lineHash="1773312110" unbViolId="52458667-be50-37b1-b283-73318983c202" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4dbe8aa-ad30-3eb4-a852-0f3525878ab8" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="CERT_C-DCL00-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="10aec87a-4c25-38b4-a768-78b6647c6ba6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d77d486-b3e6-3673-b681-7a9821adc197" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A7_1_1-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="61967de4-cbcd-3e73-8019-5add5c97079d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e16e5895-5373-3288-a866-1637d07e698f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="MISRA2008-7_1_1" lnHash="1773312110" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1773312110" unbViolId="058c8e87-236a-33d9-b842-6a7f76743d9b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9729a48d-5526-367f-903d-0d19746ff901" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="CODSTA-CPP-53" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="20a95d64-e338-39a7-99d7-98591371db7c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1789a84c-fa1d-3a3a-b944-a9998558dfe2" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Declare local variable 'data' as const" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="HICPP-7_1_2-a" lnHash="1773312110" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1773312110" unbViolId="5fd2037a-c3dc-363d-8d93-82f1f4926cb4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe6556f6-3985-30d5-9af6-3de7ad7d98a6" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="JSF-132_a" lnHash="1773312110" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1773312110" unbViolId="39d90012-66a8-37ea-9723-c5562f6e46d9" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f88efbfb-c7ce-3ad8-ad46-0c577b579e99" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' variable should be commented" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="COMMENT-05" lnHash="1773312110" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1773312110" unbViolId="51ee15e9-55f8-3f89-a66e-18d8f7622834" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a5908d2-78a7-3185-9d6b-c891eddd3fb0" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Check the return value of new" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="MRM-34" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="3f5ccc06-c4e4-3760-bc40-e8e7bd7b775d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c33c8ba8-13bc-3d69-bcb9-d99901db79da" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Check the return value of new" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="1" auth="devtest" locRef="3" rule="CERT_CPP-MEM52-a" lnHash="1773312110" rule.header="Check the return value of new" tool="c++test" lineHash="1773312110" unbViolId="5962dd5c-0e63-3bbd-9b3c-ae35bef9b176" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d43ea8a1-0d00-309d-a743-027a3f64dc33" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Naming convention not followed: data" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="NAMING-22" lnHash="1773312110" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="1773312110" unbViolId="26f00756-8a7e-3ee7-87a0-1524b3ece536" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ae60555-634a-319c-b62e-eb93a2569153" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'prg' prefix" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-16" lnHash="1773312110" rule.header="Hungarian notation for dynamically allocated array" tool="c++test" lineHash="1773312110" unbViolId="aac5d7ff-2053-35de-b2ae-be4e836399e0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8aeb1e8-5c06-3ff2-bcc5-f0202ed61684" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-23" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="b7b3ad98-1a96-3962-8f4a-6ca6f19d5559" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d25e73e-b276-3027-bad7-2d9ba2d39e20" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-31" lnHash="1773312110" rule.header="Hungarian notation for int pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="ee8a7b97-a287-3848-8c5d-12cec4900441" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08c22edf-cdf6-3959-b7b3-acfa24afa029" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'p' prefix" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-34" lnHash="1773312110" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1773312110" unbViolId="20ab9926-c4ec-33ba-8037-779d22d7908b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2921d03b-11a9-3302-abeb-ccfc47510189" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="NAMING-HN-44" lnHash="1773312110" rule.header="Hungarian notation for word pointer, array, or reference types" tool="c++test" lineHash="1773312110" unbViolId="29c3638d-0c43-30b2-a00c-882a2ca1fcc1" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26c7675b-5485-38c5-b2ef-feb20781b0cd" locEndPos="7" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="MISRA2012-DIR-4_12" lnHash="1773312110" rule.header="Dynamic memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="6ec45eea-1a31-3f86-bf70-c3b3da57f6fa" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4ecaea5-4b3d-3617-8d71-be2bfcfd0518" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="MISRA2008-18_4_1" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="28a3bfad-00ff-37cf-ac9c-85f07fa2d2ec" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="869a943e-1ca4-30e7-a46f-89f56e75854c" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="MISRAC2012-RULE_21_3-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="2e014343-cfde-3487-8c86-a5870820cddd" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8ebf6f05-818c-3fd6-92b9-016c46a5356b" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A18_5_2-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="2b6729dd-9380-35df-b6b6-6ea195fa9a7e" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="850174e4-b847-3226-80b8-3109e4204684" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="JSF-206" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="dc0a6518-21a0-38c2-b129-d06919fc6e79" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4fb39707-80ca-36ed-813a-253f1cc633a6" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="MISRA2012-RULE-21_3" lnHash="1773312110" rule.header="The memory allocation and deallocation functions of &lt;stdlib.h> shall not be used" tool="c++test" lineHash="1773312110" unbViolId="a5ec5208-23b4-3ca7-bf43-9b22aaa3ecae" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="190e1810-a280-3a63-b9f3-cda2ab1ed542" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="MISRA2004-20_4" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="5cd83666-581f-37ad-bad9-d2f0a5bd44ca" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fad76908-4390-38f1-9274-e90c2458607b" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="'new' operator should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="MISRAC2012-DIR_4_12-a" lnHash="1773312110" rule.header="Dynamic heap memory allocation shall not be used" tool="c++test" lineHash="1773312110" unbViolId="669ce6c2-8cf3-36e6-bd27-f66698ec1f9c" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b970079-1f7d-3e2a-99c1-7f159bcaac18" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use vector or string instead of dynamically allocated array" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="STL-10" lnHash="1773312110" rule.header="Prefer vector and string to dynamically allocated arrays" tool="c++test" lineHash="1773312110" unbViolId="fbeb6389-c041-3c7c-88a0-fd279efa7407" locStartPos="13" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce187706-27f2-3d8e-b1a0-e27e26fa7aad" locEndPos="14" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="4" auth="devtest" locRef="3" rule="MISRA2008-3_9_2" lnHash="1773312110" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="4479b7f1-9bc7-3d1f-a4c4-448ec00a0c10" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2caf30c8-cb28-3019-8e67-b7fd2339d99d" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="MISRA-013" lnHash="1773312110" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1773312110" unbViolId="964e515c-015c-3c27-b39f-e2bfb556b94c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe66c041-1b3e-387a-a14c-3dcdb9d6847c" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="CODSTA-223" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="0cf929ba-c8f7-3bf4-a839-4c0611ea586c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1bb7559-80d8-32f9-b467-804019a024c6" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="1773312110" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1773312110" unbViolId="9eea0db0-9bc8-30b7-9cac-13a408586f6c" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="524e2512-b817-337b-abef-dfcdc7a64b67" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="HICPP-7_1_6-b" lnHash="1773312110" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1773312110" unbViolId="a8a6a50e-b45e-3957-a1d6-12e92ed6b28d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45f4a71b-96ee-34d7-bd9d-c78fcbc7d232" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="4" auth="devtest" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="0889d2e9-d8b9-30a3-8a6c-6cfe0cce08cd" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="347d1a98-5275-3836-96c2-4e209e184917" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="MISRA2004-6_3_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="e6281a45-9c44-3090-bc2b-db407c4d5d0d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fceecaf5-cac4-3520-9fa9-bd087795ca09" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="2" auth="devtest" locRef="3" rule="JSF-209_b" lnHash="1773312110" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="9bac4648-b1bc-3299-a5e0-761d8024772f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8667dfe-4be1-35d8-b25a-00fc5f3208f1" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="4" auth="devtest" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="fd3a620e-f7a4-3635-b6ef-a5ed631d484f" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99073e61-5849-31bd-af26-56a765ed2894" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="8" sev="3" auth="devtest" locRef="3" rule="HICPP-3_5_1-b" lnHash="1773312110" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1773312110" unbViolId="555d5610-1234-30f0-b686-8274599b91ba" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93316964-5ec4-3fd2-9641-78379f16b968" locEndPos="18" locType="sr" hash="1013754779" locEndLn="8" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="JSF-061" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="3bbf2e7a-a6ef-3652-888b-c7718eac72a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46db3528-ba7f-3c3e-96f6-4585dd936652" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="FORMAT-42" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="61835799-8785-3e0e-b088-422cf8063345" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0bda909-9c6f-3a97-98f3-5b8a1d65e236" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="JSF-060_a" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="616861252" unbViolId="d7b7d175-0089-37a3-b68a-f58809d6a20d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="753cd064-7391-3146-bd29-cefe9bf77fa8" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="FORMAT-43" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="923f3ede-3d8a-3489-824e-0a51b2147be9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8e17cee-662c-3133-ab74-e8ae9d27ac37" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="JSF-060_b" lnHash="616861252" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="616861252" unbViolId="fa9f1191-24ed-39ed-a3f6-52700bae245d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aed7961a-992e-3892-ae66-38faf5c98278" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="616861252" rule.header="Tabs should be avoided" tool="c++test" lineHash="616861252" unbViolId="bf28ecd4-77e2-3bff-9db1-b9afec3ec026" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64746eaf-7631-3a47-848f-69ff0cd5ee3c" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="684e93fe-31b7-3e3b-95db-9738512eecd8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d564e691-5451-3360-bcdb-8e59a5779aff" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="616861252" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="616861252" unbViolId="52b16c38-0dd9-31fd-9e9b-5f9d5321c1fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0de5537-737b-3a00-99e2-e1d8587de143" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="FORMAT-02" lnHash="616861252" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="616861252" unbViolId="e321e4f1-1344-31ce-83c7-8c02d7100d2a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="56a6839a-a2e6-3b3f-aedd-fe312172367b" locEndPos="1" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <FlowViol msg="Data obtained from a file (&quot;*pSize&quot;) is used in a loop condition" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Tainted data use in a loop condition" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="8" rule="BD-SECURITY-TDLOOP" FirstElSrcRngStartPos="0" lnHash="616861252" ruleSCSCMsg="Tainting point" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Validate potentially tainted data before it is used in the controlling expression of a loop" FirstElSrcRngStartln="7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2054996746" lang="cpp" violId="39752669-f3bb-3833-ba24-d9268c941f1b" locEndPos="0" locEndLn="10" goals="0," locStartln="9" sev="1" locRef="3" tool="c++test" lineHash="616861252" unbViolId="2c6fbe6e-323e-3616-9472-9e6c215b1d51" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Tainted data" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType=".C" rngLn="7">
          <Props>
            <Prop key="Tracked variables" val="pSize[]" />
          </Props>
          <Anns>
            <Ann msg="Tainting point" kind="cause" />
            <Ann msg="Tainted data: pSize[]" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType="." rngLn="8" />
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType=".P" rngLn="9">
          <Props>
            <Prop key="Tracked variables" val="pSize[]" />
          </Props>
          <Anns>
            <Ann msg="Tainted data: pSize[]" kind="var" />
            <Ann msg="Tainted data use in a loop condition" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="CODSTA-83" lnHash="616861252" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="616861252" unbViolId="18da72ff-1d99-3f80-a17b-6b4d62fc97af" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4cc83f54-ee34-3e65-aa91-c1b4ad5f92ca" locEndPos="2" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="4" auth="devtest" locRef="3" rule="MISRA2008-3_9_2" lnHash="616861252" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="855e89e6-d5b5-3c82-92e6-8a936a35c520" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="503b1550-8a6d-32a5-83f7-b3809bfc6e7d" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="MISRA-013" lnHash="616861252" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="616861252" unbViolId="f9dee600-5a9f-3f15-9040-bd59e84c3182" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b61eb88d-c8e9-3556-ae15-0c0a02ae5d15" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="CODSTA-223" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="325016e4-c78c-308f-b3a3-f32e1f0f4fb4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67ef8e83-00e0-3b5e-948a-cdde18b0fe57" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A3_9_1-b" lnHash="616861252" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="616861252" unbViolId="2557feb0-18b9-3fa0-b9a5-357d02394e95" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dec3b877-6069-3a00-87d0-b4809b3b6311" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="HICPP-7_1_6-b" lnHash="616861252" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="616861252" unbViolId="3bb7c155-5961-3142-84e8-f0c6d456bb6b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e85775cd-b2d1-3777-bc7d-1b8545519749" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="4" auth="devtest" locRef="3" rule="MISRAC2012-DIR_4_6-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="ea3c9d66-7bf2-3ddb-b3a7-4cafc25c3cad" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f644f22-11d0-3778-8b2f-f7cdda92ffeb" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="MISRA2004-6_3_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="4fa89dd1-b788-3c52-974c-ca5a09e6a21a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a1bc003-9592-3138-a33f-385379fdb1a0" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="JSF-209_b" lnHash="616861252" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="f306d336-ee3b-3ce6-87af-e052244f959d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2a81e34-8642-32c8-a195-e4a3cc318110" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="4" auth="devtest" locRef="3" rule="MISRA2012-DIR-4_6_b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="46864570-5314-3961-b261-f57e65228d1c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27291a27-0a20-3702-9134-3acab28cb405" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="HICPP-3_5_1-b" lnHash="616861252" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="616861252" unbViolId="af2fef84-60ab-341f-ad5c-1e0bdd6667b6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40a398e2-ba2f-35d0-8d06-82234ba05194" locEndPos="7" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A8_5_2-a" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="82c700c3-ebc4-3730-ba84-1a1938d6a44f" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16a4bd20-c946-3d60-a646-b0262c253cf3" locEndPos="11" locType="sr" urgent="true" hash="1013754779" locEndLn="9" goals="1," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="CODSTA-MCPP-38" lnHash="616861252" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="616861252" unbViolId="9dc79df6-7f1c-320d-8e65-3e1eee85f440" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15c604e9-4927-3529-acd8-58283391df53" locEndPos="11" locType="sr" urgent="true" hash="1013754779" locEndLn="9" goals="1," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="PORT-13" lnHash="616861252" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="616861252" unbViolId="1bda48c7-265a-3a78-bbd0-3560c251b70c" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20f436a8-9eb7-3abe-ae03-293979daa753" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="JSF-132_a" lnHash="616861252" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="616861252" unbViolId="89418572-956a-3826-9f42-632a42b102c6" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e278ee2-43b7-37e3-940e-97d8e841075d" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="COMMENT-05" lnHash="616861252" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="616861252" unbViolId="2b4be217-da60-357d-956e-4c30fe2e83e4" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a15e58bd-d41c-3b17-ac32-de6704e802cf" locEndPos="11" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="1" auth="devtest" locRef="3" rule="APSC_DV-002560-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="99dc28a5-5a23-3f55-a464-b8b88fac5430" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40df2b13-82fa-34b0-a44b-56d8b27c2f6c" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="1" auth="devtest" locRef="3" rule="APSC_DV-002550-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="43419323-6c02-34cf-afb3-ad24ba66fb16" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd3d7083-a0a2-365a-a668-efd34983662a" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="APSC_DV-001290-b" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="472d551f-d2c9-3002-b551-e8067f3397dc" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7710ad2-c5dd-3e96-b434-0a6a733170d2" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="SECURITY-38" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="d6ceafdc-0777-3c29-8d75-9985be9c488d" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2535100c-f2c2-34da-929c-b4ced0405b15" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="CWE-20-j" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="e7056b13-37a4-3d7e-87c8-e15a6049048b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2495f30f-802d-3da5-8be1-cfbd3d867e60" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="APSC_DV-002530-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="bdbc6c5d-ea4f-38f8-b653-7cf9d31b2321" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97ac09d5-f655-39c2-85d7-cee60d9a97f3" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="User input was directly used as a loop boundary: pSize" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="2" auth="devtest" locRef="3" rule="APSC_DV-002520-k" lnHash="616861252" rule.header="Untrusted data is used as a loop boundary" tool="c++test" lineHash="616861252" unbViolId="5fd18b73-64cc-38f6-a8e4-7316dc4b665b" locStartPos="17" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b6b4c2f-df53-301b-a2bb-c3ab1806bb08" locEndPos="18" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="9" sev="3" auth="devtest" locRef="3" rule="OPT-04" lnHash="616861252" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="616861252" unbViolId="f01b2ed3-871c-3ecc-ab56-a21615a26cc7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea866afe-c3e9-38c6-bc68-df36fd1b157c" locEndPos="30" locType="sr" hash="1013754779" locEndLn="9" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="JSF-061" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="da5d5627-e9aa-335e-9142-52b376e543ed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c90e7fbf-f7b0-391a-9a54-cb847b5ecbe5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="FORMAT-42" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="a0819f09-0a28-3f50-80f1-a7825152f16d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="625cc834-877d-31b3-bc37-fab3136190d4" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="JSF-060_a" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="700522989" unbViolId="29bbb8bd-ad50-3636-a9e8-644db126811c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cde81c34-74b0-3ecf-aedf-df2362db0ac5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="FORMAT-43" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="7122ac3b-b04d-3bb8-afef-ed4130e0b9b9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b42f1a5-e145-3003-aa7e-a80940140b8d" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="JSF-060_b" lnHash="700522989" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="700522989" unbViolId="4094e930-b7a3-368c-a4c4-ed92acd59d4e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="642b3404-d79a-3f38-8aca-869ed9379858" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="36a2ccc4-ed2d-343f-827d-0867414a093f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b0647cd-7088-3ab1-9ec3-bbaac987c98f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="b190e4b2-4d37-3995-8c52-ca7e8677eee2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf66a7c7-3773-364c-8d88-cc81403959de" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="4721411d-03b8-3513-8c60-f75fc7320592" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="307d1857-389b-3388-8ff8-ec9ba3a7c4cf" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="FORMAT-02" lnHash="700522989" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="700522989" unbViolId="df65ffa8-0365-3c5e-98d7-150236ece58c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef1c1dbd-deaf-350e-ac84-930f0f34cdd8" locEndPos="1" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="700522989" rule.header="Tabs should be avoided" tool="c++test" lineHash="700522989" unbViolId="2d65cdcc-464c-3b9f-b72d-8443b0ece62b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="086e7a2e-2652-3384-a459-1b6858358d87" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="549f3376-115d-3c4f-999a-6879a4c00bae" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9204e187-60ca-38df-8d07-012e24f58049" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="700522989" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="700522989" unbViolId="240fe2aa-bc5e-3ee0-a5c0-9d37b4623e6b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d3d2a7a-ecbd-315c-822c-f7a35cb9a2e2" locEndPos="2" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="CODSTA-23" lnHash="700522989" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="700522989" unbViolId="36b38e67-1b8d-3901-a444-c734948b05b9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f47b5ac8-e5e2-333e-adc8-f13cdb68aab7" locEndPos="3" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="MISRAC2012-RULE_21_6-a" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="4f919800-4b65-34b6-9c46-352530607846" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48bfff6a-15f1-36d8-9139-34062a66f6d7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="MISRA2012-RULE-21_6" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="249fe50b-cdb0-3a0f-b9f6-0b0e73bb8059" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="941df979-60f3-3589-b1f1-bf7d95f46cc4" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="CERT_C-ERR02-a" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="94d5fb47-7fba-3c32-bcd6-199ea121d04f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4950915-f377-3c9e-916c-4ee23d51270e" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="CODSTA-110" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="47d68f5a-9c7c-391a-a0a1-d7ae04abbedf" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5470caa6-28dc-3723-9878-a1b414869bb9" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Usage of 'fscanf' function is not allowed" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="CERT_C-ERR07-b" lnHash="700522989" rule.header="The Standard Library input/output functions shall not be used" tool="c++test" lineHash="700522989" unbViolId="0499bb65-94b5-3793-9cad-c543033fe34c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68a2bbb1-02aa-308d-a757-0ddf904fab83" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="APSC_DV-002390-c" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="a98c7e08-76a7-3f24-8deb-740f49ef1401" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="878b4301-af5f-3a7f-8a43-cb3a0bbaf5a7" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="There should be number describing size of variable in '%d' on position:1" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="SECURITY-14" lnHash="700522989" rule.header="Do not use scanf and fscanf functions without specifying variable size in format string" tool="c++test" lineHash="700522989" unbViolId="eba31571-e5a5-39ea-8cbd-6171c4543597" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c55980d-65b3-3a2c-8d55-ab43f259277f" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Prefer iostream.h to stdio.h" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="5" auth="devtest" locRef="3" rule="CODSTA-CPP-01" lnHash="700522989" rule.header="Prefer iostream.h to stdio.h" tool="c++test" lineHash="700522989" unbViolId="1437b0bf-422f-3187-9b1d-1ef8a6b0e618" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="403baafa-a1a0-305c-ae0e-4dde9cb4b8bd" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="1" auth="devtest" locRef="3" rule="CERT_C-STR07-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="9562f1b3-fc86-3c62-8069-5830d9c0d513" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2f4f075-5a25-3406-b4e0-8ee344fc2e04" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A27_0_4-b" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="59d52108-c3ca-3bd8-bc40-c8c5b9243b57" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cec9c288-7fa5-352c-9c76-8e3ad016d30c" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="CERT_C-INT05-a" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="ee26a629-7402-362d-9c88-7eab9b80c0f0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbc55e7b-2308-3429-9f61-61e158ef9251" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Unsafe string function 'fscanf' is being used" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="SECURITY-13" lnHash="700522989" rule.header="Avoid using unsafe string functions that do not check bounds" tool="c++test" lineHash="700522989" unbViolId="c123c0c2-30de-31fb-8f56-68e8a7b8245b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f8bea36-c94e-324c-a7d6-fdd49b284c07" locEndPos="7" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="5" auth="devtest" locRef="3" rule="CWE-798-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="6fffdb3f-ae74-3ce4-a53e-2d92e2fa025e" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbdfab48-0eda-322c-86c0-151af6b24907" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="5" auth="devtest" locRef="3" rule="CODSTA-203" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="2957485b-6e89-3e47-9dae-9a39d6e20492" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e504036-e9cb-342a-9366-cc51b712d49c" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="1" auth="devtest" locRef="3" rule="APSC_DV-003110-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="601b8a13-2fdf-3b91-bfd9-215f0eee1d86" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="446a7c13-8bab-3cf7-8fff-d8aaa6b5f0e9" locEndPos="20" locType="sr" urgent="true" hash="1013754779" locEndLn="10" goals="1," />
    <StdViol msg="The string literal is embedded directly in the code: %d" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="1" auth="devtest" locRef="3" rule="CERT_C-MSC41-a" lnHash="700522989" rule.header="Do not hard code string literals" tool="c++test" lineHash="700522989" unbViolId="7e7216f3-840a-3503-96a4-ff19ba454194" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c92e193-b6d4-3215-a7ca-4f3c0ef16d53" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-A27_0_4-d" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="9a2db08f-0275-30cf-a75a-b4591e4cf42f" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c5b23aa-3908-352a-bd95-17ff10501ab0" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="PB-76" lnHash="700522989" rule.header="C-style strings shall not be used" tool="c++test" lineHash="700522989" unbViolId="885f112f-263b-3e59-8ef9-f732f90795e1" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c176c1e-f761-3e71-baf9-cade711c4d2d" locEndPos="20" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="3" auth="devtest" locRef="3" rule="MISRA2004-17_4" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="6f7c2965-20ed-3713-8bba-29db440d345d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fbc5c83-e8d3-3982-9bc8-94ab73c0f137" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="MISRA2008-5_0_15" lnHash="700522989" rule.header="Array indexing shall be the only form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="63226a79-129f-3fea-9fd6-a1e28f3d613c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97762cf3-dd26-373a-8628-eeaeb207adc1" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Avoid indexing non-array objects" ln="10" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="10" sev="2" auth="devtest" locRef="3" rule="AUTOSAR-M5_0_15-a" lnHash="700522989" rule.header="Array indexing shall be the only allowed form of pointer arithmetic" tool="c++test" lineHash="700522989" unbViolId="5d3c75c6-78ab-34ef-bad7-44f636d78f7e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e5b3172-09aa-38e7-8872-2ee728befd07" locEndPos="27" locType="sr" hash="1013754779" locEndLn="10" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="2085e997-0aeb-3470-a9c5-29b32b9e4947" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d3096b7-888f-3ca2-a353-d34d62ab549f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="0bbe7967-007b-3483-a699-3e731532a5a3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51f3cb51-ed60-3e66-8dad-db6f7c42dede" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="4c375153-559c-3162-9fce-80b280f2f2ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b4732b2-da2a-3f64-aa00-f2d4de14ac8f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="222ba7ae-851e-36dd-80a5-07acbfbb17f0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10ba2193-c23c-30bb-874b-be8fa6945113" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="1c5a9811-114b-32a2-830c-63b0155f9303" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac983dda-e8da-39d1-8b27-ccfbe2fe1f23" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="13b6c74a-011f-3d09-9bcc-efa442a2078d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77e4fcaa-6c2c-3869-bbf9-5df4210c40a0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="-541829676" rule.header="Tabs should be avoided" tool="c++test" lineHash="-541829676" unbViolId="73c21dc1-773d-344a-971a-82dad8abca3c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaafcf0d-6fad-3cd9-a55a-d4e8c6c124c1" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="31e64b51-2e75-34d1-83de-1bb1d2f3a583" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e287103b-4afb-396c-a70b-c299f8991f48" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="-541829676" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-541829676" unbViolId="27ca53af-bce1-3ea5-b29f-10f09f60e1e0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9e689b5-97d5-368d-a4d4-e99bf62401c7" locEndPos="3" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="2" auth="devtest" locRef="3" rule="JSF-208" lnHash="-541829676" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="-541829676" unbViolId="edda63c2-f972-352f-ba01-a850200ae23e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4781ecf4-fe5c-3904-8a54-99d084b58ca8" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'readIntegerArray'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="11" sev="2" auth="devtest" locRef="3" rule="EXCEPT-05" lnHash="-541829676" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="-541829676" unbViolId="8a029d23-8fe5-3126-ad5a-02aa850e234a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e90dae19-5e08-3cbf-9230-1a005585c197" locEndPos="4" locType="sr" hash="1013754779" locEndLn="11" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="12" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="07e0369f-f70c-3980-9736-792b670bf95f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19c8267d-3912-3af5-82a9-07996ba660bd" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="12" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="5f1646fe-e211-3593-a030-5352b948331e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98de1518-8e41-338c-84a0-b34b6b2c599f" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="12" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="3bd55be4-f81e-374a-9a73-6e10eea5e220" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c72d0f40-3651-3466-b571-e564086769fe" locEndPos="1" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="12" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="347e664b-55d2-32aa-a35b-cd614d2a6b3b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b30b846b-ec92-3979-b7e1-fe8c289875d0" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="12" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="8df94ce9-0b03-3e57-b9b3-12b77df3c0a4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18172447-dc55-308c-8427-6024468cf2d3" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="12" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="f35711d1-d88c-3d6d-a00c-c9d8a4a3f385" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8a50ad3-5190-32ad-822e-aa03e29a8917" locEndPos="2" locType="sr" hash="1013754779" locEndLn="12" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="13" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="9c1f1fc8-8298-3ae3-ad1f-7028c94057f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="120938b3-f1ec-340c-bdb8-2d39d8b59a29" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="13" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="8cb6634f-0d2b-364c-a8bd-1dcd47081e79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1fb2deb-e086-3607-92d3-37a8ec8bab01" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="13" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="92807984-8995-3069-802e-4563364b2743" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4b92de0-5260-3bc5-bf83-91a64f6f5155" locEndPos="1" locType="sr" hash="1013754779" locEndLn="13" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="14" sev="4" auth="devtest" locRef="3" rule="JSF-043" lnHash="1006431594" rule.header="Tabs should be avoided" tool="c++test" lineHash="1006431594" unbViolId="425cf810-5d41-32ee-b5b7-c6cc4aa57a8f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f770fb46-c280-3a29-aa1a-2546c0f452f5" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="14" sev="5" auth="devtest" locRef="3" rule="FORMAT-01" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="c0019af2-7870-36f8-822d-6b91d3e67eb4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97bdb545-37c5-3578-a7b8-874b3ce23a54" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="14" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="14" sev="5" auth="devtest" locRef="3" rule="HICPP-2_1_1-a" lnHash="1006431594" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1006431594" unbViolId="b0ee8f81-9589-3b4f-94b4-da0767bbedbd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c725b4e-0fd8-31b7-95bb-764f1ea1718a" locEndPos="1" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="14" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locStartln="14" sev="3" auth="devtest" locRef="3" rule="FORMAT-25_b" lnHash="1006431594" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="1006431594" unbViolId="da940841-8e85-3c29-a7bf-e3f32d4ad5f1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b559519c-57c3-3067-8dac-9870cb7edf2c" locEndPos="2" locType="sr" hash="1013754779" locEndLn="14" goals="0," />
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="APSC_DV-002000-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1842545282" lang="cpp" violId="f42c06e6-3caf-3d2d-9865-7dde90a80f51" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="547c21ec-ecff-34d9-83cb-4d7c893956c9" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_0_2-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1331699030" lang="cpp" violId="0ad29ba2-f66e-3a7a-bcbf-4990fb2b3784" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="6eedf0a0-c046-3cce-a22a-7ff140113697" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="AUTOSAR-A15_1_4-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1332641371" lang="cpp" violId="ee51585d-225d-38ed-beeb-37477c7bd04d" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="787944b5-bed1-38a0-ad55-8e1b5cf2ce9e" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="BD-RES-LEAKS" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1151239445" lang="cpp" violId="61a9d32d-ff4f-3e48-85b7-99c63ea69ed6" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="12259291-3a0a-3e9b-9aa8-0b5c2d67a52a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_C-CON30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="103891581" lang="cpp" violId="a0f2c122-8bca-35f7-8a32-71e4e7c83e5f" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="6c3c7fda-26b3-3e32-aff9-4d2359356955" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_C-FIO22-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112344312" lang="cpp" violId="b5386e25-307a-3e1d-85e9-0d8997be5eae" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="e8ee5c54-712a-3304-be6b-8dce895f3bc2" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_C-FIO42-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1112174134" lang="cpp" violId="f81757f7-e816-3bd9-84b5-6c0ec2e75155" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="ec9ce403-ce01-318c-b2a2-43a2a3c6b656" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_C-MEM00-e" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116382779" lang="cpp" violId="6bc509e0-5b06-3693-bcf4-a122f2cb92ed" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="9c0b8790-818d-3744-b8e0-226c55c15e3a" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_C-MEM12-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="116285462" lang="cpp" violId="7b23f2c2-5d15-3642-802a-8dd2891342fe" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="2b2b4acc-ec19-3cd8-97f7-496acd3abee5" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_C-MEM31-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="114391825" lang="cpp" violId="090b9f9e-8bc1-3d96-9d5f-aeccd21377e1" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="ea44e093-385a-34b3-b878-0c18581a404b" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_C-WIN30-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1055995355" lang="cpp" violId="01aec18e-996d-3a89-8f6d-8532bb6a5600" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="9096cb15-b013-3e3a-9a47-9d61440d702b" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_CPP-ERR57-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1542295099" lang="cpp" violId="41a60ad2-cf72-32ad-9735-6e569c826d12" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="0ea79228-d967-3eda-a02e-6a902cf99679" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CERT_CPP-FIO51-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1119006820" lang="cpp" violId="033644a8-d3d3-3a74-81e0-c8a35fe922aa" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="3" locRef="3" tool="c++test" lineHash="125" unbViolId="8cc03121-e156-31ae-90cd-bca05f5f8f44" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="CWE-772-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2027493177" lang="cpp" violId="e0c33e59-add8-3603-aaa2-36cb13eaa1d8" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="9e7b0f67-37f6-3b36-b124-14788ecf3b4e" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="MISRA2012-DIR-4_13_a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1431710396" lang="cpp" violId="c06b055a-c17c-3f30-9238-d5365cafe53a" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="c68a72d8-8e48-3014-9557-0f923c9d3ed2" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="MISRA2012-RULE-22_1" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="All resources obtained dynamically by means of Standard Library functions shall be explicitly released" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1251621320" lang="cpp" violId="6d916ea5-3acd-3a56-81d3-1968e0ea08c1" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="769c7e2d-9d3c-347d-b82a-3e6fec11e58c" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="MISRAC2012-DIR_4_13-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="2127420791" lang="cpp" violId="73456151-24e8-33db-8591-1a8f7827ae14" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="4" locRef="3" tool="c++test" lineHash="125" unbViolId="c6918250-b4a0-3738-810a-c293dc74315c" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="MISRAC2012-RULE_22_1-a" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1043097931" lang="cpp" violId="6b311917-6608-38c2-85bf-6f07e5620767" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="2" locRef="3" tool="c++test" lineHash="125" unbViolId="dcdecfe2-cea7-3440-96b5-af0ed2c80af6" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Memory not deallocated: data" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ruleSAFMsg="Point where allocated memory is lost" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="9" rule="OWASP2019-API4-b" FirstElSrcRngStartPos="0" lnHash="125" ruleSCSCMsg="Point where memory is allocated" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" rule.header="Ensure resources are freed" FirstElSrcRngStartln="8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1966237325" lang="cpp" violId="b18c8b2e-061b-3a41-8ef8-2a4808d272b9" locEndPos="0" locEndLn="16" goals="0," locStartln="15" sev="1" locRef="3" tool="c++test" lineHash="125" unbViolId="f947c89c-4fed-3765-8d76-8a25b8a1e021" locType="sr" hash="1013754779" causeLocRef="3">
      <Props>
        <Prop key="Tracked variables" val="Allocated memory" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1844934654" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="7" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="7" srcRngEndLn="8" desc="fscanf(file, &quot;%d&quot;, pSize);" ElType="." rngLn="7" />
        <ElDesc lineHash="1773312110" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="8" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="8" srcRngEndLn="9" desc="int* data = new int[*pSize];" ElType=".C" rngLn="8">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Point where memory is allocated" kind="cause" />
            <Ann msg="Allocated memory: data" kind="var" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="9" srcRngEndLn="10" desc="for (int i = 0; i &lt; *pSize; i++) {" ElType="." rngLn="9">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; *pSize) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="700522989" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="10" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="10" srcRngEndLn="11" desc="if (fscanf(file, &quot;%d&quot;, &amp;data[i]) == EOF) {" ElType="!" rngLn="10">
          <Anns>
            <Ann msg="Condition evaluation: (fscanf(...) == -1) (assuming true)" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-541829676" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="11" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="11" srcRngEndLn="12" desc="throw IOException();" ElType="!E" rngLn="11" thrownTypes="throwStatement" throwingMethod="">
          <Anns>
            <Ann msg="Throws an exception" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="125" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="15" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="15" srcRngEndLn="16" desc="}" ElType=".P" rngLn="15">
          <Props>
            <Prop key="Tracked variables" val="data" />
          </Props>
          <Anns>
            <Ann msg="Allocated memory: data" kind="var" />
            <Ann msg="Point where allocated memory is lost" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="JSF-032" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="a3a91f8c-9d38-3215-96c8-4437bb217234" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="868454b1-0464-36a7-93b0-07dfdcb2ae42" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Not a proper header file (*.h ) is being included: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="PREPROC-08" lnHash="329732047" rule.header="The #include pre-processor directive will only be used to include header (*.h) files" tool="c++test" lineHash="329732047" unbViolId="0af6b8f1-d5e7-3591-8775-2e7d227aee20" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef4576f4-6e6f-30c3-8dff-dfd8487e1eff" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="2" auth="devtest" locRef="4" rule="PREPROC-09" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="8c3d9fec-973e-3bf3-bf76-0de6c90da9ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05d30aa8-a5a2-30e2-ba01-63ca0c7eca8b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Disallowed #include notation is being used: &quot;Shapes.hpp&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="2" auth="devtest" locRef="4" rule="JSF-033" lnHash="329732047" rule.header="The #include directive shall use the &lt;filename.h> notation to include header files" tool="c++test" lineHash="329732047" unbViolId="25f258d8-4ba5-37e0-afe7-c627be45c02c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1ee4694-4829-36c0-9551-58c0b0530b00" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="The assertion density is lower than two assertions per function" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="METRICS-31" lnHash="329732047" rule.header="The assertion density of the code should average to a minimum of two assertions per function" tool="c++test" lineHash="329732047" unbViolId="e98e43f9-e46d-3626-9aa4-504f2b538656" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24a90b27-89d5-3b9f-a11d-026fa790f0ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="The filename 'DeadLock.cpp' should be in lowercase" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="NAMING-03" lnHash="329732047" rule.header="Use lowercase for file names" tool="c++test" lineHash="329732047" unbViolId="861fa8b0-7b55-3005-811a-956b1ded1c32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8af2f1f-bb77-306b-aa9a-5fd0d0e6ee9c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DeadLock.cpp' should have the file name extension &quot;.cc&quot;" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="NAMING-38" lnHash="329732047" rule.header="Implementation files in C++ always have the file name extension &quot;.cc&quot;" tool="c++test" lineHash="329732047" unbViolId="3c39773b-16f9-31b0-b53c-f19a1de50a08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3990204-0225-3df3-9ecc-7a63a9f605e1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Implementation file 'DeadLock.cpp' should declare a local constant string that begins from characters &quot;@(#)&quot; " ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="5" auth="devtest" locRef="4" rule="PFO-04" lnHash="329732047" rule.header="Every implementation file should declare a local constant string that describes the file" tool="c++test" lineHash="329732047" unbViolId="73411ab1-f0e8-355d-9829-b1a8eac11dba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4350c54c-7c22-38b7-9c23-bcb475e020c1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="COMMENT-02" lnHash="329732047" rule.header="Provide copyright information" tool="c++test" lineHash="329732047" unbViolId="02c1ce9f-7474-3d71-a857-7ec1b3b1bedf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f4ea4ac-8d63-30e1-ada2-2a941808835b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the copyright information at the begin of file 'DeadLock.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="JSF-133_b" lnHash="329732047" rule.header="Every source file will contain copyright information" tool="c++test" lineHash="329732047" unbViolId="12739967-6238-34b5-9590-ff451ea6f5c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4051a25-17ce-366d-b8a6-3d464854f402" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="COMMENT-03" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="6f2c8527-a6d0-3dba-96ee-c5d638ede809" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40344499-fe80-34aa-bc48-b2efbc2e55b2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="Add comment containing the information on the file at the begin of file 'DeadLock.cpp'" ln="1" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="1" sev="3" auth="devtest" locRef="4" rule="JSF-133_a" lnHash="329732047" rule.header="Every source file will be documented with an introductory comment that provides information on the file" tool="c++test" lineHash="329732047" unbViolId="78274eba-3373-3d7b-83e9-c9d0dbddd042" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bca5f985-1fcd-3c8a-a6b9-b36c7ec1f6ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="1" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="3" sev="3" auth="devtest" locRef="4" rule="PREPROC-10_c" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="ca117502-f3c0-31ae-88f8-3302a45637dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62a8e635-b994-3c86-871a-48b9239823f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="3" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_e" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="4e1f7ead-f9d8-3375-aa49-797ca4f49eea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c1dcba7-cfb8-3872-bc9b-d10cd63c1e6f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="3" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-f" lnHash="-1674050737" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1674050737" unbViolId="0c348132-9746-3ffc-8e1c-2c3c6a63def3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac438518-7663-3f50-b312-5643a707eb56" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="3" sev="3" auth="devtest" locRef="4" rule="PREPROC-11_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="d1e76f17-4fd5-33ea-a5d4-f6f400c82da9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9318f926-099b-3c4c-986d-f70aa244b211" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="3" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="3" sev="2" auth="devtest" locRef="4" rule="JSF-026_b" lnHash="-1674050737" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-1674050737" unbViolId="d17fa694-69fa-32db-966f-2e334c058b08" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9bdfae6-af6b-390b-8782-2845d8598eb1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="3" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-1431583748" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1431583748" unbViolId="252fba52-f050-343b-89d1-14086f0cd5e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fef9cffc-3dee-36ae-91d2-e5a962acad87" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="12d6d195-dd36-31e2-80db-77507b192211" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6823433a-08b9-3cb8-a01f-fca8cb6f33ea" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="ea7e1fb0-bc03-3f7d-ae39-5c9d99c09aef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8e439d1-5bee-3297-ad43-7409ede703db" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="d8e4ab82-1405-3e84-822c-8de608eba929" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59eaa5cf-76c2-302f-bb84-20d8cf299229" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1431583748" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1431583748" unbViolId="3942ce0a-a0cb-3bd7-890e-82dfa55e9e80" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5840d69a-da83-3a41-95fd-3a99cbd94e8c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1431583748" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="df1f00bd-6c07-37bf-9441-a966ff343f52" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c99f4410-85e3-32e3-8971-bb9f1515ca10" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-1431583748" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1431583748" unbViolId="48b1600c-f9b0-3738-9d5b-0ac677d4eb28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8769d080-ee65-375e-8da6-a7f947b85136" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="7" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="7" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-1431583748" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1431583748" unbViolId="f55b3ecb-fd59-3844-82de-ea6e97d751cb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb036159-fc75-3227-a382-650e3c8c87ea" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="7" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-823604806" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-823604806" unbViolId="f7939008-9691-3051-b8d2-8a33d9359540" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e33e653-50a5-3000-9909-39e9df8df9ca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="104244d6-4d54-3278-9490-c86dda46e659" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68aa0368-584f-3194-8bc1-1b14d1debc90" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="3e0cc43f-b27c-31aa-8085-c646a980e2f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da098fb5-498a-3e42-8970-21c8a33c20fb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="958fc97d-5f69-3a4d-94e1-0ec1e0aa5649" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9afd15f6-6604-34a5-b7c3-b3557b45ea51" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-823604806" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-823604806" unbViolId="083b1734-19b8-32d2-8996-929993254850" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ef3ab78-31ee-3593-816c-785705c5364f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-823604806" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="2ca68409-28e4-3f04-a75b-a06669ca71fe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fb526e7-0f13-3fc2-b848-018d66732631" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-823604806" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-823604806" unbViolId="861d60a2-d860-3c8a-b0d3-c8d50b9f679c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c4e079d-a2ff-365f-be26-704c18ec7ab6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="8" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="8" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-823604806" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-823604806" unbViolId="e3994440-e778-3e4c-a241-5756a460c00b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9870e3b-fa40-33c2-9bd9-9a1556342dbf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="8" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="371252460" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="371252460" unbViolId="00af5a9e-f3f0-3c06-a8e6-4d7eb6b64ee1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="321ba6ad-ec82-36a2-af55-03cca8dccb8c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="105719ed-dd8a-304b-b5d7-da3cc189052a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bcd8490-9dbd-373b-82cc-72abb03f1376" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="81ccb4b5-28fc-321d-a578-eab184a5a76d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="459416a4-10f4-36b6-ad5e-7abadb240706" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="371252460" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="371252460" unbViolId="15c73b97-a14c-3635-9300-19775a8d63f1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a8573d0-e8e3-332a-8991-e0a12f5ced84" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="371252460" unbViolId="acc9545d-bb0e-3ff0-afea-6e357e92dbe1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="763ec952-b739-367a-86e8-94cb19c5543d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="371252460" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="371252460" unbViolId="4c6c28e4-b779-3fab-9218-bbb49e0af041" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d887e8bb-6a44-398c-b414-af9eb93bed04" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="30d35930-e366-3a8c-bcac-fa025f797e58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6db0d27-68df-3615-929d-05c9c890edff" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="371252460" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="371252460" unbViolId="52e83061-bf66-3ac9-9ea2-171df2e00d59" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23682077-9b28-303c-9008-809f30812174" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="371252460" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="371252460" unbViolId="812837f4-e64e-3c85-b309-ad7109ec4439" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ef23e53-edf9-3273-bff8-2155c7da672a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="caab7529-852a-3d70-be4a-d622f9709466" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ad42ffe-e35d-37ec-b925-26f2564580bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="c91b6d90-9bd1-3f09-8326-23c81f838890" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bac825b-df85-38a0-bd3c-1c9be8ff8f18" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="e0d28b4a-4a7f-3e46-95aa-f9394ed0d235" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78886eb2-a3eb-3d31-9fd1-5d5b88248aa9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="371252460" rule.header="Avoid using macro definitions" tool="c++test" lineHash="371252460" unbViolId="0425f5e1-af8b-334e-a757-328366a4775b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6581aaeb-1b3a-310d-9d23-048b53e10685" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="371252460" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="118f1637-d346-3427-8e57-4ea75cc8f4c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d2f0693-4a62-3957-895c-b1b5fd705dd7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="371252460" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="371252460" unbViolId="05e3cfad-aabf-3f2f-b446-829d65510de4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc6e2827-e2b7-3414-8e2b-7a4eb3cb2492" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="371252460" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="371252460" unbViolId="f006afb4-c9ea-3d23-9f24-7af098686e34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d74eb18-de88-3dad-8298-44b4f219866c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="df023326-13e5-3732-a35d-862f63369077" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d74e96a-878e-39e3-b028-607e76cf2132" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="acf5684b-61da-3308-8c4f-a702597bdf93" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf38b382-ed24-354f-80e3-f77d809407b5" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="d8e6184c-d95a-33a8-be36-80de345ad89c" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcc1d756-97b2-3390-a68a-9a053dbb4c8b" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="e661f641-9417-31d6-b576-104014a03da5" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3471a80-dbaf-3d4e-be87-b045166974bb" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="44e6cb74-000b-3fd9-b6a8-1e0b8c7f7c64" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="519c30d4-cab4-3c74-9d1b-13cf3b4f0753" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="54e66be4-8c0b-38b4-bfe1-86aece6bcae9" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e0cf2f0-12f7-3784-8b4b-2bd0e7807b6e" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="9f347cb6-bf8f-3e61-89a2-00eb342aeb8e" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9bfe4170-395c-3afe-95c7-c082a17fd751" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="371252460" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="0a546fa0-21fd-3a99-b00f-6af0e485db8d" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64983c02-e8ea-3e62-8773-a212c73511b4" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="371252460" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="371252460" unbViolId="85d35623-665b-330e-83df-c291437a0d1c" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ea9b330-0d8b-35f4-b4c9-1358d00fd941" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="24816613-3f77-353c-84bc-2186e0f2db0a" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5aaca94-331c-341b-8799-6691b4430776" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="1aea5a1c-c1ba-3f15-9dce-fc07de429326" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03c2b9c8-bb2f-320f-855e-baad6feb135a" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="9" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="9" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="371252460" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="371252460" unbViolId="b09888ab-c9fa-352b-b967-d3f74e4f8a58" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96291e9b-8fca-333e-98df-b02db912e5e8" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="9" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="1036666232" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1036666232" unbViolId="519866f5-9acd-3a50-a503-da996be74e0f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c7705ab-2fc9-3144-b4bb-8887955a97c7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="7134d3ef-bdbf-3a45-8070-130e35b3edc4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51eae51f-74bf-37c6-a060-f8942c51799f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="e020482e-0d52-3f20-a4e3-cbda2e8883ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2de1ed0f-3892-3cf2-8d7f-b303736b729f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="fe613789-4ed6-39f6-83d6-045c9ce69d71" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8dbb3894-689e-365a-b52a-182f9be5be1a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1036666232" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1036666232" unbViolId="ba92ccd2-f428-3a1e-b11d-fb3c7eaf46db" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1990c78c-f72b-3c80-a6a3-863b28d22462" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="1036666232" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="59b861ee-606d-3dc5-9236-bf80d1c33c36" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb6e2db1-eed9-36e7-bd5d-d0c4a7514898" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="1036666232" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1036666232" unbViolId="5c991e6f-8635-32d8-a2c4-a70e5154b6f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a9a605c-c4af-3097-9905-b5f8b4c34dc1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="11" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="11" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="1036666232" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1036666232" unbViolId="fa9a6b5b-3347-3ee3-a961-a396fee4afe2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9947171a-4851-3fb1-9901-b215164c6967" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="11" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="-632529940" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-632529940" unbViolId="abe6bc59-a5a6-33a1-9c9d-39f4ca3f9f66" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9846c859-51c9-3221-ba51-b2fa3a4423c9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="c98a07fb-c7be-306c-8409-48d77c3a137b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c316d7b7-57fc-35bc-b9e2-c9e2f56f142d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="61d1d81d-94f9-3098-90ef-7b231541f7f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="179796b2-a0c0-3a00-b1cf-ae3ce681bd5b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="-632529940" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-632529940" unbViolId="e94b0c08-3559-33c9-afe2-9c65d98e6b55" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51ef8cb4-148f-3985-8f9b-252373b7139b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-632529940" unbViolId="4881c93f-ea49-395c-9eec-e9feae04ca23" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18969a15-adfb-3605-8e03-9eb439840ef2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="-632529940" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="f7ce95d5-ba0b-39f5-ae7a-4e02ef31d0ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2fa3472-34cf-360e-8e87-212c94f10381" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="659a5e7a-fc17-38e2-8526-3f29ba2d795c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc09a501-5008-3122-ab0e-c3a3f2326731" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="-632529940" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-632529940" unbViolId="e5762be5-3375-3f60-b986-d568a3eef553" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08c9e84d-8c1b-3f0c-bf85-36c3e3b1ff6f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-632529940" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-632529940" unbViolId="ded1d7ff-f10b-3cf3-9380-a831caee9b75" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2f5976a-606b-38aa-a483-8c00c975bd99" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="4acf9f51-6323-357a-a62d-8db6310deffc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59f31613-d950-318e-9a07-bc79fe6dd20e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="27131aed-11de-319c-991b-01ad74a05ed4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39dd6b33-f269-37c6-a313-24828a4743e4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="71b0e145-0092-3c85-b555-7a640a4d2ce7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88970a94-e2b8-3b39-8e9c-2c06e1a25765" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-632529940" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-632529940" unbViolId="d5a269b0-c818-3db0-b1b2-7aca2f892a8b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc607a2b-3824-3a13-a17d-c4e32305199c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-632529940" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="b4e5f3c6-e46c-3942-ab30-25f21ff0f133" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47417904-bd03-3b31-804b-0bc86fc3154a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-632529940" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-632529940" unbViolId="df88338f-296e-3b54-b41c-eb4d8c52b949" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a7242cb-b641-3eb9-bf1b-faf7cc35c9b4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-632529940" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-632529940" unbViolId="ee8759c0-1aaa-38c6-af1f-dad1808f39f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3168c8b2-824f-3a30-9430-4c3f7a5f2045" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="0466b5ce-e59c-319c-aee3-fcf56326a372" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8778fdd1-b2a8-3e5a-834d-5013796f2436" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="-632529940" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="ddc70ce0-1d2e-3e4b-97b5-fb430da5380d" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a799130c-d3ab-30a8-95b1-e6eee8d5b440" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-632529940" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-632529940" unbViolId="5b717885-9b96-300c-b14e-47e5e8a86f05" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fa307b2-78ee-392a-a796-c854dea77edd" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="93844734-601f-3ae9-a78b-3ea4619f7c54" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f37c0642-16c0-3bb2-b531-9a937de429ea" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="7abc77f2-ef4d-35c4-8e95-efe4030fe9f8" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="434dde16-fdce-35b5-94c4-34e0362db4ab" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="12" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="12" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-632529940" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-632529940" unbViolId="5d895f0d-ac4e-3e02-bf89-b40fc8249411" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b678a8bc-b891-3b36-bc51-f0680d521842" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="12" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="1552981372" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="1552981372" unbViolId="916ec681-e92d-36c8-8b8e-e18e893a90bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1704088a-20b4-31ec-bfea-2cb4a1da0c67" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="4c97d6fb-2881-3849-bcc8-419018272865" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="207ab165-3042-3142-a955-8cb31a844a0a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="2448fcde-5552-3b99-8e6e-2bd4df9edc76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f56973a-fb83-3822-8f59-1093440e5a23" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="1552981372" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="1552981372" unbViolId="523f917c-6734-3db2-ba27-e2dae02ed6b3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99ca9369-d020-3049-b3d1-d9ff7b5b50ec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="1552981372" unbViolId="e177be4e-7e57-3e90-9a2e-e63ea6b08aa5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49c0fbf0-bd3a-3fda-b103-c55280fa6635" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="1552981372" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="e5cbe284-e9c7-32ef-975f-232f6b49d385" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54f00607-a469-33ae-9c76-414163aeb700" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="2c31ef0e-d14b-3c23-bab0-52172a6cbf3c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c7c1293-ca41-3c61-b43a-baf70f3de117" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="1552981372" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="1552981372" unbViolId="54b16cde-3eba-3805-ad57-389ec4da866d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c26e01d0-fdc3-3bce-be69-3d0d00a18f54" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="1552981372" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1552981372" unbViolId="ec105c00-8caa-39c2-a9ec-8a26788f706d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="003e86d1-5a0d-3559-9b20-0b8344218013" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="5a272cf8-c3a9-3f6b-ab3d-6ee3e678df7c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="392bc997-b32e-3b13-9bf3-74bdf2bc9885" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="e2956d6c-db7e-3524-87ca-011d4a111683" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bc24377-62bc-3ca7-a9ef-d3b635219de5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="1731a4b0-a23e-3e39-acff-738b924f8ec6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6520528a-cb21-31f1-8ccf-7e69e2d19295" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1552981372" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1552981372" unbViolId="4ef66dc1-e4f8-3c6d-9815-7557e5e40ebc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="564b1ba7-388d-35b9-a59a-c90d2133fcba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="1552981372" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="bb7be966-45ee-3702-87bf-92b3ec8c474a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="787cf0a3-2d5c-37b9-9b94-8091fb5522b3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="1552981372" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1552981372" unbViolId="f18c7ab2-23ca-3ab2-a437-a81fbaad449d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e8c5305-0ca8-32a4-a383-b065a51d3cfb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="1552981372" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1552981372" unbViolId="5cd951e7-7def-3704-9bf7-598ffc68dd5b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab41276c-b43a-367e-9421-553a835ed2a0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="70c1c782-2ff2-302a-ae9c-361881406121" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="104a5f89-d442-3ddf-b54b-887ed3e0cdf2" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="1552981372" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="466494a4-56b4-35cd-9b67-6ccf1c287834" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6ea3f08-7848-3d1d-ad0a-3686228f01b9" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="1552981372" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="1552981372" unbViolId="21d10fdb-e8e6-36ad-b92c-7d020331d4db" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31822472-6921-3d13-af77-44915f55a87d" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="7ffae7f3-acc4-3035-9c3a-23a39cef6c05" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="811ba27c-ee56-369b-8df1-09552fdc229b" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="e4a3c9ec-bd04-3680-a225-c41d89327c0a" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0bd3c11-add4-3092-87a2-c9d52165c782" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="13" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="13" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="1552981372" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="1552981372" unbViolId="7a6195f8-2df0-3b06-b1ab-95b158592a0d" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95d78d0d-9229-3858-ab1a-2ae47d797429" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="13" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="-477159842" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-477159842" unbViolId="7b2520cc-05a5-3cf5-b185-145271fb74a7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50888abc-b37f-31f3-84e3-9543d27342d3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="50eba24e-93e4-3a6d-82e9-67881e679a4a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ee64c22-54ea-3e88-a8e6-e5bf17eb7646" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="a908fa0c-bbea-3d9f-8268-1956c95484df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c91a7fd9-f647-32b4-b046-f45427ae7c69" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="-477159842" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-477159842" unbViolId="46c2c4d9-2494-30e0-926f-f0e3c1be3e20" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5ebc969-3b5c-35a3-99ec-8f130ea12593" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-477159842" unbViolId="2f693122-27d0-32a3-8620-b5c8a68e900a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="818d8b48-cf40-3df9-ac4a-f4e6f40ce2c2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="-477159842" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="4e88dc34-e520-3d49-a224-8f0fccf0bfac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9c74c93-5813-3b2c-b832-64ef3004c546" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="dde67b96-3974-3bee-8f86-184182cbd671" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3086f20f-7e99-3df9-a038-fca6509f66a2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="-477159842" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-477159842" unbViolId="4197dc31-f1ec-325e-b7f4-3cfba2fd4e6f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ae663d4-459a-3893-8cb2-d64b2d0897b0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-477159842" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-477159842" unbViolId="f8ee56f2-295f-35d7-907d-efba44ff036e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75ccc87c-9f5d-30b1-b7bf-b5f1050b7170" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="1f0213b5-07ca-3264-acd0-bbdf78dc71ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33f4c62b-4a4b-3950-9d45-22e87a555e51" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="44dbdef4-b35d-3c60-b74c-c799cf227cac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f558434-da66-3f01-9739-280426d93aba" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="bd2bb817-d594-3ab8-bffe-4a269945cdbc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aabdddb0-c962-375a-94b0-bd0a3c0fadbe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-477159842" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-477159842" unbViolId="393a20e0-84d0-34c0-a8c5-f9f0d9831208" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="275ef60e-6775-301c-936a-0e8bfe0ac181" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-477159842" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="11273340-e967-3911-962a-71e21d32e649" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d3f2811-2954-3245-9914-79b36b6293dd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-477159842" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-477159842" unbViolId="dd76b7cd-9e50-3e1c-a5b5-2b0ecdd8707c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d1cb54f-be9f-36cb-915d-af7808b63804" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="15" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="15" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-477159842" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-477159842" unbViolId="7893c621-741c-35d7-b51c-abc56e80a3f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf591545-afb9-3330-8425-38ace6402e84" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="15" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="17" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="f5eccbec-a0ea-31d7-9345-8084c369a108" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95396a68-eef7-31ab-a7bc-1bdf34f385f3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="17" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="df19318e-95d2-3667-825f-787e1b030ed7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="177f216c-0ee6-3a19-927b-97cdc4550fe1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="17" sev="2" auth="devtest" locRef="4" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="a89fba9f-42b1-37fe-8645-6bd97b172810" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e85e9a20-cb88-3b48-a983-8fa5a3898415" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="17" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="17" sev="3" auth="devtest" locRef="4" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="c4c6025b-b93c-32a6-9e51-9edb45741301" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a950e199-73e9-33a0-82a0-bd43a216605a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="17" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="3" auth="devtest" locRef="4" rule="PREPROC-10_c" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="8f7a61d7-2360-3a17-bb7d-95a2867eb436" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82497fd6-84b6-3115-bf33-14a70661c5bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_e" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="20494937-a6c3-3634-a9f9-4741afabcd4e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7fa1606f-6e5f-3404-9edb-47f8a097695a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="#if pre-processor directive should not be used" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-f" lnHash="-343784077" rule.header="The #if pre-processor directive will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-343784077" unbViolId="94afd7bc-8955-38e0-9fb7-d24866803df6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ede7e5aa-13e7-3176-9835-6fec5cee03a8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="3" auth="devtest" locRef="4" rule="PREPROC-11_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="f967bece-bb9a-3307-955f-c105d884a154" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecbdea43-ae42-37d1-a0b3-7cb701617367" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="The #if preprocessor directive is used" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="2" auth="devtest" locRef="4" rule="JSF-026_b" lnHash="-343784077" rule.header="The #if preprocessor directive should not be used" tool="c++test" lineHash="-343784077" unbViolId="f526de85-c2e0-3d45-abbb-7d6ce09ce6c5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a63e0817-ad5e-3590-af66-dd62eeb8612b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line has over 79 characters" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="3" auth="devtest" locRef="4" rule="FORMAT-04" lnHash="-343784077" rule.header="Physical lines should be less than eighty characters" tool="c++test" lineHash="-343784077" unbViolId="da72a76f-60d3-3654-b120-0ea8d428f731" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="313a8f74-49e9-33da-9217-37e045a6ad76" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="3" auth="devtest" locRef="4" rule="JSF-041" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="054c33cc-93b9-31c2-8951-6cd321f0a3d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75b84839-06f4-3f2a-a5ac-9811b0ed1021" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Line contains more than 120 characters: 302" ln="19" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="19" sev="3" auth="devtest" locRef="4" rule="METRICS-26" lnHash="-343784077" rule.header="Source lines will be kept to a length of 120 characters or less" tool="c++test" lineHash="-343784077" unbViolId="d680fc91-bd5e-307e-be46-eb6a2d468ca0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03c04723-34db-3469-b90a-cb685ddca950" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="19" goals="0," />
    <StdViol msg="Do not use platform-specific multi-threading facilities: &lt;pthread.h>" ln="21" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="21" sev="3" auth="devtest" locRef="4" rule="HICPP-18_1_1-a" lnHash="-1671860853" rule.header="Do not use platform-specific multi-threading facilities" tool="c++test" lineHash="-1671860853" unbViolId="9ec155ff-28b0-3089-b0a0-b0923f852b67" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8b94d02-6a98-39f4-bf49-028c30e7bdc7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="21" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="24" sev="3" auth="devtest" locRef="4" rule="PREPROC-26" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="9d17308f-7fc4-3fd5-b169-f82449752d87" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3542a87-7b36-3d7a-aca8-f8ec0b599e33" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="#else pre-processor directive should not be used" ln="24" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="24" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="35439580" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="35439580" unbViolId="b1344b92-cb54-3e85-8661-b26e33f4c4fd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7b251cc-e159-36d3-89c9-e91eddbf8f21" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="24" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="b482d6f7-f84f-3c21-8eaa-96ad8be03aaa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca40217a-3d07-37e2-90c9-19bd5f112d7a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="24" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-c" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="8aa180d3-d12f-33fe-a459-a5fa5acd0c14" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b420ad39-ed45-3d2a-b450-747fa81bf5ec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="24" sev="2" auth="devtest" locRef="4" rule="JSF-026" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="b70c86c8-ec75-3e64-80ae-6c3981bdd9a1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28e4a7cd-d267-3481-8132-6fffff7c72da" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="The #else preprocessor directive is used" ln="24" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="24" sev="3" auth="devtest" locRef="4" rule="PREPROC-11" lnHash="35439580" rule.header="The #ifdef, #else, #elif preprocessor directives should not be used" tool="c++test" lineHash="35439580" unbViolId="25f5c4a9-df8d-381d-8947-990041723e27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd2658cf-2ca2-3fbd-a7f8-d37f6c4f88d0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="24" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="ad1e0751-59fe-3b9c-938c-4c5d95be8f89" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ad4a046-f891-391a-8e72-49cff1ced06b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-770959773" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="a5790a53-dbbe-3402-b2d4-de4306bbda28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf1a9956-901a-30cf-8472-592bff20c828" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="-770959773" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-770959773" unbViolId="a2770c0e-5778-3b5a-9ce3-d9bc2cc7bece" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcd92d0f-616c-3a6c-9527-45a4efa944bc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="3f3b8d5a-a88b-3908-a7dc-30411d7b9c0d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78a1e192-3179-364b-822c-54a70185d8ec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="86565a5c-98c9-386a-abee-a4965a7556c1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c7d881f-5fee-3930-b942-4a8631045cc4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="-770959773" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="9dfd6766-0112-3a30-8e65-a30ba9e992c2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f29e64ef-93cc-3231-9f70-661feec6826e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="03db5694-a0b8-3769-bacf-c884398512af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69faa64e-d0bd-37d5-bd31-497796430a7b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="-770959773" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-770959773" unbViolId="0eb4c749-dabc-32da-b1bd-46da88c9a5af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccac36d1-58c5-386b-bdc1-450fae0a2e9c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="-770959773" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-770959773" unbViolId="3a294b1b-386e-3603-9f6a-4819800a20f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb3cd51e-7237-36b8-a28c-167e68a09f0b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="30" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="30" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="-770959773" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-770959773" unbViolId="ce049cab-d59d-3280-a419-509b15b89ed7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="847e0a5e-8649-32d9-97c1-2b242ad6bde3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="30" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1338521823" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="0ae16951-891a-364b-8109-3929fcccceb5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57090376-43cd-3900-b3ae-0cc9acfc31e2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="-1338521823" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1338521823" unbViolId="2143c3a8-4309-3e18-a8dc-c276961a96ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5fd95d2-0791-361a-a448-df252dd302f0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="d6eb2914-abdb-3d9d-8ade-9dcec751fa95" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c55c45a7-c519-3650-826b-9b6916f48863" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1338521823" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1338521823" unbViolId="c243f161-4fd8-3fa8-89ac-8e5fb5e48df5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af25791e-28eb-3a43-a255-c547390a0b15" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1338521823" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1338521823" unbViolId="4d4930b5-4009-3ffe-abbc-79ecb541e159" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8698372-2d25-3c8e-a765-9080aebf70a1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="1aeb8607-9ea4-3734-9dfe-b941e746c06d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="540412de-b08c-325c-af93-ebbedb44884a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="b5d95a8d-723f-3bd6-a19a-ca3aad1589ca" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc4db03b-0894-37bc-a1d9-cc99fa5b7369" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="-1338521823" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="4d2a8fb9-906c-3390-8e86-63843aa09f83" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a202677-89e4-3328-8abd-e87e3c9abb7e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="5cfe900b-95c7-34e7-bbac-285a659e73ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b99cc986-ab07-309d-8f0e-b98334d51702" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="35" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="35" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1338521823" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1338521823" unbViolId="35db9f82-bc2c-375f-aa7d-c081b999ce53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="390f8606-f7d9-344d-bea6-1072d6bbb6ad" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="35" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="c91e0154-71e3-3c7d-b2b4-ce6e3ffb96c7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c0ef50e-8d89-3d6b-9a30-5599790b36e4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-529470406" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="074105e4-90dc-31d4-932c-b0f7f2886641" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c43dc299-443f-37af-b4b5-d1dac694de4d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="-529470406" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-529470406" unbViolId="6dd6b481-edd8-3deb-bb46-a4dacbec8bfb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97e094ee-90ae-3fc4-82fc-6fd3796a3f5b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="9527660d-2d26-3bb1-85ce-0249f7583343" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dba73e53-ccdc-3bdf-aebb-490469074262" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="2e21cc7d-c96e-3e49-b839-c5822c5f3858" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="196ce42b-0e8a-33d0-b88c-4c99c5943ff5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="-529470406" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="8312726a-b76b-33ba-81ed-6b799dc3f8ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfc25102-411c-3055-a7d5-19586056d42a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="d7b164d8-40fe-37ba-b525-047e70658607" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dea14041-bdf7-3906-9f5d-87a0d3eb4873" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="-529470406" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-529470406" unbViolId="9bd7a573-97c0-31d9-87a6-e389f39a3654" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db6417f5-1d29-3bce-b9a8-f2ab82f64d9c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="-529470406" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-529470406" unbViolId="544039ff-1bc2-3f53-b209-2adeffa618dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="19ba391b-2149-338b-b603-c8de133eeb20" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="37" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="37" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="-529470406" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-529470406" unbViolId="ea790c17-12dc-362c-9159-3afa1e670e05" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe4dbb42-3fd8-3a9b-b1b0-b02c5232c656" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="37" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="-962720826" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="1028d898-3b34-39fa-b3cd-0ea007f9abfb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a37d10d-d3a8-3790-a59e-208d1dde4d32" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="-962720826" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-962720826" unbViolId="3965a39b-45c0-38d6-96a8-b680d2845338" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4bc6fd4-1a36-3de9-b855-1bdb6da4e88a" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="6940f4c2-0527-329e-9a2a-5d0c097cf7bb" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2efd88e3-7e66-3113-89aa-8883a6ef572d" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-962720826" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-962720826" unbViolId="c9ec05dd-7a5a-3d62-902a-be3fd0846d82" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d354fdb-4279-3651-941e-854542bfe23d" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="-962720826" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-962720826" unbViolId="c32c0926-e080-31a0-a2a8-e1b16489b44b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="589bbe02-a69f-3e0c-a383-5db6d9cb2b0f" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="29e1c6fc-03eb-3b7e-a9ef-f8aa211a045c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2543343b-1c1d-3ca1-8644-2669a0f85f0e" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="7fbd5108-e613-3474-aed3-546468b24095" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b195ec58-cf9e-3f11-a09f-3710f0d3b57d" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="-962720826" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="3e737e58-a22d-3d1a-956c-a7006c36d48d" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fc23cf1-194b-3f38-a1ea-9e3ede6be824" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="5eb83097-93a5-3f09-8f54-88f8c256e0fc" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab392a29-5ac2-3ca5-865d-cc5f8a7a2ecf" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="39" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="39" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="-962720826" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-962720826" unbViolId="e8c4e042-a274-37d6-b1b8-2279578a5fc8" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4a3d8c2-1151-3d07-8cbf-9488e877f955" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="39" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="41" sev="3" auth="devtest" locRef="4" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="bdd2c52a-08c1-38f6-9211-cae5d81dd4f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40c84e2c-e74c-36c6-97a4-000269c16664" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="41" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="973a3569-ef03-31cf-81f5-8a9504caf02c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71342d1d-d0a5-3cc0-81be-c976f6e9cfb6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="41" sev="3" auth="devtest" locRef="4" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="b791a4c5-a8d6-35ed-b51d-e098284ccc62" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f98895a4-8ae3-3406-815e-65c2abacaf9f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="41" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="d2f7f548-0b79-3e6a-8c27-01698b3098bd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2c51c15-778b-3b32-b89a-46447e939de6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="41" sev="3" auth="devtest" locRef="4" rule="PREPROC-26" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="ecac3edb-5bc9-3acc-be48-b72b6d29c8b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dad7e97f-350a-3c0e-8658-5f8bf9bde026" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="41" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="41" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-a" lnHash="1098672373" rule.header="The #ifndef, #ifdef, #if, #elif, #else, and #endif pre-processor directives shall only be used for conditional file inclusion and include guards" tool="c++test" lineHash="1098672373" unbViolId="00271839-3d21-3a4d-8cb3-cf30623c65b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="162baca4-fd95-3a7f-908a-a54d1bb1b5ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="41" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-1234653797" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1234653797" unbViolId="37aedb1b-5a62-35a4-9385-f2e7c3734d38" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a20730f9-1693-39f5-87e2-a3a73f72cd49" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="5ebbc593-ef1d-3a2c-ad55-a6b4775f6404" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6e74696-c401-3299-9519-1d35d2c29a61" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="014a96de-ac16-3c44-adca-a0d37dbf529e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee3c600f-c50c-3f69-a0c7-31beadcca241" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="e2f9792c-d61a-39a8-9577-77d5392a39dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abab72d9-75b0-3e4d-8cd0-c8f323a4564a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD'" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1234653797" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1234653797" unbViolId="9d72db49-eb20-38f4-a954-49e9fdbf96d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bc652f1-e9d5-3c15-9db7-a400e492ef8b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1234653797" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="72b5dbae-3882-3c62-a854-d0d7ab744e9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a7e0d7a-0b40-3d93-9670-af4509757b15" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD'" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-1234653797" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1234653797" unbViolId="28a5b4b8-ccdf-39b6-a0dc-45dcbd7e18d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4f6cbda5-c30b-32f1-815f-93b884a16c7e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD' is enclosed in braces" ln="43" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="43" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-1234653797" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1234653797" unbViolId="ce5e4f5e-c177-3179-a96f-d74dfa1029d3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d271efa-6f11-33a5-9b92-cd19be070699" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="43" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="1590150764" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1590150764" unbViolId="4feefe90-46e8-3081-bc27-809d8a980a0a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32c8b20f-1af9-362e-b9ca-69b73c5afc05" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="8c6bc5ab-f8d7-306e-9bc9-82bbcb1b627a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6bfa8dfe-37ef-31a7-a9b4-e3a2fe6dad4d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="d2c6bf49-338b-3bbe-b7ee-453c2ef9896f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3f4b45a-26ff-3676-a699-893c908ee939" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="141b9c8c-a6f3-33a5-b6a3-41ce59e46f68" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f59a3e29-fd23-3fba-b2ba-c2d587af9341" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_RETURN_TYPE'" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="1590150764" rule.header="Avoid using macro definitions" tool="c++test" lineHash="1590150764" unbViolId="91a1bf1d-fc9b-3f71-8f50-7714189dc02b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d955cf93-abb9-35b3-8fde-753f32052d0e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="'THREAD_RETURN_TYPE' part of statement" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="4" auth="devtest" locRef="4" rule="PREPROC-04" lnHash="1590150764" rule.header="Don't define part of statement" tool="c++test" lineHash="1590150764" unbViolId="d5ce075b-05c3-308b-95ff-b7875e424e76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0967082-23b7-353f-8911-a321da20ed89" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="1590150764" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="18e262c2-b918-3b8f-8774-a310705768ac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2d76a4e-a04b-3910-95f6-2f27afff388e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'THREAD_RETURN_TYPE'" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="1590150764" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="1590150764" unbViolId="5a4b0ba0-e475-36ba-80fb-2e9a59315fba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0462ed6-4f4c-3505-a0ce-7b54bbf6c360" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces" ln="44" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="44" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="1590150764" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="1590150764" unbViolId="151a018c-2ab8-36d9-8b97-3f14d500f68c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3411f32f-0a6a-3301-8e05-372edbb71739" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="44" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="-1763822430" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1763822430" unbViolId="70df954c-6fb4-3326-82bc-c425c5b8a5f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90b1bd3d-2d81-3580-8c3b-f50e9e5ecbc9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="965a8a2a-2148-3da6-aef2-0183e128f471" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="050b180f-e129-3196-9145-8179bea03284" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="a1dc7c97-c674-3286-9c85-4dcb67e13b5c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b388155b-14a6-35c5-9c09-8b2afc0994f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="-1763822430" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1763822430" unbViolId="15a10dcf-1aa6-3227-97d1-893eef6f6b3d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="910ea278-5806-3d17-8901-1d739c61276b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1763822430" unbViolId="0a26bc67-68a0-3f7c-81dd-3506a7ba422f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b566f538-255a-3de8-9ef5-366e29a9c66f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="-1763822430" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="2a6274ec-a23c-3621-9ba4-fd15cd3b6e1c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9bb74aa-6297-34ea-8b0c-0c66f12669e4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="a01ed650-9990-3cff-a1b7-a7b437e766f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a23afa9d-2e54-3cbf-b15f-87073d9c508f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Body of macro 'THREAD_CREATE' is defined without parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="-1763822430" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1763822430" unbViolId="86f043bb-63b1-3025-9b2e-c1293ed25e0e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1672156c-042a-3038-baa6-1deb1db0a0ad" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-1763822430" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1763822430" unbViolId="db061b87-b32b-3f74-9eb6-b5daa7c6edde" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7ebbbd6-b4e4-34de-9865-5ab031a8458a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="20ffec3e-9e59-31b9-82fb-5ab4fdfdf7e2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aedb5f32-b17c-3927-a085-d6181a12586a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="3b77223c-c1ce-3cd8-8cd0-70804dcb71ac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="855da539-c987-36dc-b878-8c09e4b92d43" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="a90ab1a0-864c-3039-a169-0a2d785f2547" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57fd106d-a0d8-3d24-b5cd-71041dfadb19" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'THREAD_CREATE'" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1763822430" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1763822430" unbViolId="a595b463-d795-3584-9491-855569682dd3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31881df3-12fa-395a-8aa9-47362c381c85" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1763822430" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="f9661023-ad39-33af-bd13-341f573522fb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="718cd4b8-06b7-36ca-8d3f-f6155662cbb5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not define function-like macro: THREAD_CREATE" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-1763822430" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1763822430" unbViolId="593b1987-2af5-3f16-bb71-48633ef6a179" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1c1af47-37cc-34f8-a4fa-ecdae5230025" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Not all body of macro 'THREAD_CREATE' is enclosed in braces" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-1763822430" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1763822430" unbViolId="fbec29e1-dee8-31fd-b09c-0d7a3348b456" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a624d7c9-c4b2-3dbc-b9d4-1737d9e24c8e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="83d4a912-6f7a-384c-924e-4db7fef83867" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d84755d4-0410-3001-b0ed-89ea76c738e4" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="5569e9c9-e2d0-3c02-a474-42e342955364" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a891aa90-e6a3-35cb-8ff1-75dd9909df5e" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="f234802c-4410-37bf-a512-d3a3e89014ac" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="719166c3-ae02-3782-85d6-e815f7aa9b0d" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="09146e4c-026b-3c61-a2be-6d62e934b4d6" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b199a5e2-30e3-36b4-b024-6569b6e7e088" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="d5d9f088-80e9-317b-b5f8-20b024893839" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="647b894e-4e7b-3e10-ac5f-23d7f0152cdb" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'thread' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="a946ef76-01d4-3ba9-b5c2-5ac8cfecb8f4" locStartPos="52" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="121c7f05-41dc-3a5e-9a2e-54f0f65d283d" locEndPos="53" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="2702be72-d9b5-3c16-a566-1a98563c23d3" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e4de1e7-d192-3473-95b3-d39fb1540f46" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1763822430" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="36073249-3905-3736-a04f-e86e2d5b31db" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="698b641c-710c-3ea2-9725-a5c3465f645c" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1763822430" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1763822430" unbViolId="180d398e-6fd8-3fb0-8466-769f4bcc9736" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13aa4ae2-cb7e-3068-9444-44fbde1bb1a6" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="ecc3eeb0-b786-3071-9ae8-0bdc4f004e2b" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3606fa52-4eb9-3237-a2ca-b97a56240a19" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="87926c32-7990-3e28-8b7f-f8d72e03aa4e" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b4cbab2-b668-3b77-be22-60545f9c6ed3" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Each instance of parameter: 'func' should be enclosed in parentheses" ln="45" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="45" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1763822430" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1763822430" unbViolId="bb5b4d04-175d-3f04-9b36-fdb62f847b4c" locStartPos="64" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e79402d2-b9c9-3d29-a9eb-5011f2fca501" locEndPos="65" locType="sr" hash="-1769734618" locEndLn="45" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="810266428" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="810266428" unbViolId="3de9e8d6-897a-3022-9c21-95194cb43121" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54e1c88d-3fb3-3201-a9e6-be2a2c28c6d4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="c782a38d-b9e8-388e-a646-c8b0313c05a9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd916bdf-f19c-3586-844c-ed5c12656afb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="5588a624-29cc-3a5b-b752-8054152f7b88" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89b8e15a-8d5e-3097-8a07-271412bd4682" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="29ce1136-00cd-3f45-8247-3669ce97fbb0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abf6d41f-b583-39f2-b6d0-2d9447f5a3ca" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK'" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="810266428" rule.header="Avoid using macro definitions" tool="c++test" lineHash="810266428" unbViolId="ad68a147-5478-3fe6-9e17-2ba14be42281" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d87b4127-f5a9-3651-9730-c79f6e833d98" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="810266428" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="842f31b6-d81b-3df8-aecb-539b6273f6f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="187e4ba1-ac24-37de-8e23-6cbcc6c0d3a6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'LOCK'" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="810266428" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="810266428" unbViolId="e73f83ee-8aa1-3035-866b-df918706a9ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab41a986-1429-3135-999d-4c68bba6e3cb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK' is enclosed in braces" ln="47" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="47" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="810266428" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="810266428" unbViolId="a4d52fa5-e3d7-3bb9-8642-ff7a757a22ff" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04c44936-f321-3d97-ac2a-938ecacff321" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="47" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="865954250" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="865954250" unbViolId="ae29507d-79be-3188-9e44-16e12ab3679e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="056a5a8b-c881-39e1-a7f7-e75c62c7c62e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="81782a76-b9e1-3e08-876e-73a75e0dfe5d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6107f199-cbaa-3b31-84ee-e8156ce8ef3f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="f78024a4-d478-344f-8bf6-e1cbc7d98718" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7b8fd9f-9652-37a4-895b-f37ed62d9f48" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="865954250" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="865954250" unbViolId="7902b6d8-54a9-3bd2-8bbc-09d5be730b63" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5e52687-3b71-3256-80a0-04891df225f8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="865954250" unbViolId="38d58b22-60bf-30ee-bfa0-fe881678f648" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e8a5343-a4b0-3cc3-8e74-25e2f8f143a1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="865954250" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="865954250" unbViolId="fcbcdf9c-8674-34d9-a25d-f7999015c46f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b574bec6-c512-384a-ac7a-1054f2e45684" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="11ce3fa2-5d87-3ca9-bba4-a336750189f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ebe3d94-0958-3959-8a74-7a0753c381b1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Body of macro 'LOCK_ACQUIRE' is defined without parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="865954250" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="865954250" unbViolId="2e447cf8-03fc-31a0-96e3-38e4866f308f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a8c589b-1037-3388-af6d-82ffe0a11ad1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="865954250" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="865954250" unbViolId="c71a5198-82ff-3ab2-957b-c041eace500f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6188baf1-ab4f-388a-a228-7c771254d2cf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="fd4b206b-e59c-3226-87e2-ac7015ac239f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c770d2e-5cb4-3b4f-9cc8-3d306e5fb161" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="c119497b-8bcb-35ba-bbcd-35336f955c75" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14094c7b-ca70-327c-ad0d-f956d3e9813f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="c03ea94b-72fc-3d5c-ba48-1ea7a21b911e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55bb27e0-530c-3114-87bd-8fddee7a8362" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_ACQUIRE'" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="865954250" rule.header="Avoid using macro definitions" tool="c++test" lineHash="865954250" unbViolId="a00e6f0d-2ffb-334a-802e-abcac86ecaba" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5acf62c-a07a-3229-bb3d-aaa925b6371a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="865954250" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="73c4dc98-8dfd-3b50-9203-9eb1f2af0648" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1538b097-f182-32c6-a2b1-5acf59c8d0a0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_ACQUIRE" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="865954250" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="865954250" unbViolId="495d55f9-f7e5-338e-bc83-0c151e79ff28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54bf22f5-d980-326d-8231-8890fa87240f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="865954250" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="865954250" unbViolId="df36ea7b-3086-3211-8846-303ec6d29dc0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c3dd0b73-b7a0-3add-a4fa-cf1636ee160c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="35f69a8e-9c9d-3a19-8123-84866ae778ae" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f12d7b97-9385-35ae-a155-c2c6d0cd8413" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="865954250" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="ff6cc3a1-a2f2-3227-9097-dbf618cd358c" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5107c221-fdb2-3589-81bc-d9db26584778" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="865954250" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="865954250" unbViolId="595a9353-312f-37e6-b119-1398b925f424" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd65bd5e-b153-3b89-931c-111ed6258fff" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="9379cfc2-5095-3eab-a9d1-6d97f8501f2b" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc0cfd73-2420-3456-a3b8-e325868a5e2d" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="e317c0a9-d706-322c-8545-0100ea72923c" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d3410d9-b621-3095-95ff-5f4b26e94225" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="48" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="48" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="865954250" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="865954250" unbViolId="6e54ea0a-cd66-3071-8509-2fc8f243500c" locStartPos="47" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3104c49-583d-3ce3-9f95-68525cc11141" locEndPos="48" locType="sr" hash="-1769734618" locEndLn="48" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="-1510788286" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-1510788286" unbViolId="dc71cf8e-0da6-3583-8a0b-1eff5125b680" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3f49a7a-c0ac-3f9c-b623-8851c17fd6b8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="d3896589-7538-308f-b778-7efb68dbcb02" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e66d4a99-da51-3ce4-81d4-3d74afc632b9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="eb902d7c-62a4-3574-af79-d089c6ea8f76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc5f94a9-3130-3e36-b119-5ed718874f68" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="-1510788286" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-1510788286" unbViolId="33a6d56c-9483-3438-862c-5b07e80a6426" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b863a109-0be9-3bfe-86f9-cfd22968c4c6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-1510788286" unbViolId="06b09fde-4145-3c18-af4c-a8e19fba2f2e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5264c6c8-3cc9-38d3-9228-693269a043eb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="-1510788286" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="e8bb542d-8233-3fae-8a5b-8af9c0c00821" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1cf2e36f-8dec-3d82-99c3-a5a99aab6039" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="da239de3-2e4d-3b7a-8255-417a79acbd0b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b807894f-4d35-350b-9a08-6d6fa08ec830" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Body of macro 'LOCK_RELEASE' is defined without parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="-1510788286" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-1510788286" unbViolId="b7741d7c-7698-36b2-b735-71cfdcbbe9f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aec4546f-a710-3ce9-b4a1-8efc2388b5b5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-1510788286" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-1510788286" unbViolId="0cdda73d-b85a-38cd-8640-c50eecb4fca1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6fe1f2f9-3085-3921-bfbb-ac4e9abf91ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="147d82fb-ae70-3609-9742-ec58647d0171" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6fd343b-8a11-36b1-836b-7d64ca406c34" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="7b85319c-7a08-3e30-b64d-11ca7572109b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3bcff68f-6878-338e-baf7-814a5ed99f78" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="c34576af-0166-36c9-94a7-c79f9b652acc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4f7185b-21fd-33ac-8f7e-6661bcc50178" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not use the macro definition 'LOCK_RELEASE'" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-1510788286" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-1510788286" unbViolId="ace90982-7743-3999-9088-bb5a1360376f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77774f19-9502-3ec0-b862-5bf0acf53520" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-1510788286" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="561c8a4e-218e-3f89-8c90-4cb2e1605cc4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73486b91-de32-3be5-b7f0-81373d462c46" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: LOCK_RELEASE" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-1510788286" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-1510788286" unbViolId="db1da0ed-d1a0-37c6-b330-d0a9ae6eec93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1424e65c-7108-36a6-8e24-97f952a5a984" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Not all body of macro 'LOCK_RELEASE' is enclosed in braces" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-1510788286" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-1510788286" unbViolId="47d3b51e-4b55-33ec-b1ce-6bc5ba6ec09e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07dcb606-5d7d-3c0a-b293-7fff818fe7fe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_10" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="faab78b6-15ab-36fd-9381-c78bef3c955a" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f01db7d8-06e1-301d-9ea4-2ff823e3b3ed" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_6" lnHash="-1510788286" rule.header="In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="a3a63d48-894e-3e07-96dc-da15f106c984" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c751269-4643-33b9-ba39-da5373c5f631" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-20_7" lnHash="-1510788286" rule.header="Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses" tool="c++test" lineHash="-1510788286" unbViolId="56033c8f-b3b8-313f-9421-89bf06e8029c" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cfa059b-d944-30e1-a5d6-674877c689e0" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M16_0_6-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="26d5894f-06d7-3e78-ae0f-e689ed2a7a67" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="377628fe-6695-37ca-a5e1-6e7dabaa48ab" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE01-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="2f9e2973-abe0-39ca-ab66-9312b64086d7" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f85c7a6-9c10-3abf-b5c4-dafbb0b76796" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Each instance of parameter: 'lock' should be enclosed in parentheses" ln="49" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="49" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_20_7-a" lnHash="-1510788286" rule.header="In the definition of a function-like macro each instance of a parameter shall be enclosed in parentheses unless it is used as the operand of # or ##" tool="c++test" lineHash="-1510788286" unbViolId="934ceb99-2881-39d8-b722-3df7384785e4" locStartPos="49" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2b172e7-b0b7-3c16-bb8b-a49c0b1e8f52" locEndPos="50" locType="sr" hash="-1769734618" locEndLn="49" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_0_4" lnHash="-541803970" rule.header="Function-like macros shall not be defined" tool="c++test" lineHash="-541803970" unbViolId="73fb4813-96f0-39b7-a67e-2cc476754334" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcaa9d4f-0f02-3b81-9926-cf0edf2918cc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_9-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="f3d5aeb3-4da7-342b-b4fc-600496bcf31f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc046c45-3544-3f2b-98b9-c893ee089beb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="MISRA2004-19_7" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="dcd643b8-9105-300d-8341-a8877bee9e4d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="453f46f2-2a9b-37e6-829d-81d010eabf47" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="2" auth="devtest" locRef="4" rule="JSF-029" lnHash="-541803970" rule.header="The #define pre-processor directive shall not be used to create inline macros" tool="c++test" lineHash="-541803970" unbViolId="83082eeb-001b-3970-a53c-1b26308ef59e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f0a6702-6c02-3375-87b2-e2dd2aa0ccc8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_9" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro where they are interchangeable" tool="c++test" lineHash="-541803970" unbViolId="85f9a0f7-b76f-3069-a1e7-1d778737cdb6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f2cf85c-dcb4-3f7f-b303-297b5ecc8f7b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="CERT_C-PRE00-a" lnHash="-541803970" rule.header="A function should be used in preference to a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="b18a13ea-c8de-3a2e-ba0f-b09c37cd1094" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67d78fe6-c25f-3e53-81a5-59e76a580bae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="MISRA-096" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="dcf5d605-7f9f-39ec-a0c4-2762f91a0a32" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90163721-f24e-3e8d-91dd-72262563ab42" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Body of macro 'SLEEP' is defined without parentheses" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="1" auth="devtest" locRef="4" rule="CERT_C-PRE02-a" lnHash="-541803970" rule.header="Enclose in parentheses whole definition of a function-like macro" tool="c++test" lineHash="-541803970" unbViolId="4dcf291a-e813-3a11-9d0c-c2737d7d7763" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7e36b4c-aeef-3ffc-9f92-5eeb7962658c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-541803970" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-541803970" unbViolId="f7dff020-7841-3459-a78a-c7130294aec8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c337799-49ca-3d01-a106-0b13c7750e32" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="7fc0a1d9-a8f7-3192-b3c5-a699d779ca6e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4553da89-3046-3fce-a884-0e4a78403ca1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="5bbd521a-47f1-3bbb-85ba-3692e78f4ad8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e61dc079-2d56-3d3b-8851-060a391097be" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="e09aba03-cac2-3206-a3b5-69dcbf9c3d1c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9080561f-37e6-3763-a0f9-676feeddc42e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not use the macro definition 'SLEEP'" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-541803970" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-541803970" unbViolId="62ad82b8-9841-37e7-a50e-fdad3329129c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a507937-862f-3643-9689-6e307f8db43f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-541803970" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="f3f159ee-aa6b-320f-a64b-dbce3887c050" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d20a7cc-f0c5-3328-9260-e1735dd3f51b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Do not define function-like macro: SLEEP" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-541803970" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-541803970" unbViolId="77549959-7cd3-3961-b238-b74a8c4d65ee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="999d7427-8be0-372b-a8e9-13b87e5c756d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="Not all body of macro 'SLEEP' is enclosed in braces" ln="51" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="51" sev="3" auth="devtest" locRef="4" rule="PREPROC-14" lnHash="-541803970" rule.header="All macros must expand into complete syntactic units" tool="c++test" lineHash="-541803970" unbViolId="5c5eeb04-5cdf-3d89-9a60-aa264f1fd897" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9e2432c-877b-3077-8a14-19610e5bdf85" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="51" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="53" sev="3" auth="devtest" locRef="4" rule="PREPROC-10_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="f1a86e8f-956d-3ad1-88eb-b6e4add2a0db" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="350a50d6-c48f-3660-9500-dc5a95788d46" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="53" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_d" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="c14ca8cd-1df7-36d2-bfd0-5d578bacdfb7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="046ba5a8-0c57-34f4-869d-cd8abea5f974" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="53" sev="3" auth="devtest" locRef="4" rule="JSF-028_b" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="87e770f1-3806-3f50-82ab-88a5e7e5c6e0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cac54c45-cd99-3409-93b2-2caa587996aa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="#endif pre-processor directive should not be used" ln="53" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="53" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-e" lnHash="1098672373" rule.header="The #endif pre-processor directives will only be used to prevent multiple inclusions of the same header file" tool="c++test" lineHash="1098672373" unbViolId="6687104d-710f-3607-bf87-dae80cb1882f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de29bbc3-9944-3dee-9767-94731ab62d0d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="53" goals="0," />
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="2" auth="devtest" locRef="4" rule="JSF-030" lnHash="941979080" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="941979080" unbViolId="65ac9361-3556-3469-bf7e-e55eb8f6fc93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89d8c3ff-94da-3a52-bffd-5851b3cc9045" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="3" auth="devtest" locRef="4" rule="CODSTA-03" lnHash="941979080" rule.header="Do not define constants via #define" tool="c++test" lineHash="941979080" unbViolId="a49ab10e-c3fb-3b15-8449-8df3681b46e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00831aa4-fd33-3497-ac32-168eb5c7bc0d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="941979080" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="941979080" unbViolId="060c7834-70e6-3de2-9902-480a99196acd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52d9194d-bb98-383e-bcd6-e89d586061a9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="249e3025-ff9c-3c7b-971c-501d34da6812" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21569929-76f7-300f-aeab-81ea979a4ae4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="ba4392dd-4b44-393c-bb08-fcc36f711c86" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f271d71-ad64-3df7-9028-3a4169754836" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="da8f33c6-4822-3cf9-8a18-b555be25738d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9e8b1c2-5f10-3332-a0c8-dd4c3dc52d03" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use the macro definition 'MAX_OBJECTS'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="941979080" rule.header="Avoid using macro definitions" tool="c++test" lineHash="941979080" unbViolId="898f41b0-5012-32f8-b1cf-d590891927ad" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae5ce8af-8dc0-3914-a6b7-1385ac0755b5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="941979080" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="741ea515-7eea-36b7-b180-292cdb41d02b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2c5640a-c363-3fbd-bf6d-1facd0084c8a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'MAX_OBJECTS'" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="941979080" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="941979080" unbViolId="5aab6b6b-36d8-3741-8f7c-a8329f07e7f8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="74a04051-7e82-3190-a8ec-f05c61edec30" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Replace the 'MAX_OBJECTS' macro with a constant variable" ln="55" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="55" sev="3" auth="devtest" locRef="4" rule="CODSTA-37" lnHash="941979080" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="941979080" unbViolId="044e4ac7-e619-34e8-82eb-bfcf5a9b14ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30940259-48f3-3a63-8976-ecf940a52247" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="55" goals="0," />
    <StdViol msg="Replace the 'STEP' macro with a constant variable" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="3" auth="devtest" locRef="4" rule="CODSTA-37" lnHash="-326464112" rule.header="Prefer const objects or enums to #defines for simple constants" tool="c++test" lineHash="-326464112" unbViolId="a888eb41-57f0-34e5-ae3e-8e50398b23e1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="144180aa-9566-3a60-a31c-91a0dc0df0a2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="2" auth="devtest" locRef="4" rule="JSF-030" lnHash="-326464112" rule.header="The #define pre-processor directive shall not be used to define constant values" tool="c++test" lineHash="-326464112" unbViolId="db81bd7d-9ae6-3204-b923-daac6011a821" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5fdba426-69ad-3e5f-9c74-7a87fb4cc5f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Define constant 'STEP' using 'const' or 'enum' instead of '#define'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="3" auth="devtest" locRef="4" rule="CODSTA-03" lnHash="-326464112" rule.header="Do not define constants via #define" tool="c++test" lineHash="-326464112" unbViolId="443b2817-4915-30f1-95a2-ccfeb711409f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01eb15f2-73a3-3ae5-b490-35f4ad0f0d49" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="3" auth="devtest" locRef="4" rule="JSF-031" lnHash="-326464112" rule.header="The #define pre-processor directive will only be used as part of the technique to prevent multiple inclusions of the same header file" tool="c++test" lineHash="-326464112" unbViolId="014275ca-4459-386a-9524-6833e3243eb0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d01a5d34-59b4-3953-a002-2dbd744bb4de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_1_a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="345f6bce-e9ee-3cea-8647-7f79f0a4d32b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e23d9eba-6e4e-3c01-91e8-0120671fbe54" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="3" auth="devtest" locRef="4" rule="HICPP-16_1_1-a" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="d1d294bc-03e2-36e0-b221-8eed2c474a76" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c53df399-cbc8-3c7b-9991-e590d4c68885" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="3" auth="devtest" locRef="4" rule="PREPROC-01" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="c7b4434d-2956-30f1-a947-d0dd1dc56524" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4848eb4a-397d-31f4-b140-e6e3c999e874" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use the macro definition 'STEP'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A16_0_1-d" lnHash="-326464112" rule.header="Avoid using macro definitions" tool="c++test" lineHash="-326464112" unbViolId="f8e63c0f-b814-36a7-b5de-1cce77355db6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f7e8ffe-f768-318a-9656-b8d0f8c486ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="2" auth="devtest" locRef="4" rule="MISRA2008-16_2_2" lnHash="-326464112" rule.header="C++ macros shall only be used for: include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="52f66899-0fdf-393a-862e-475973187f9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e12407e-bb45-3012-a913-2af637d2a744" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="Do not use #define to define constant: 'STEP'" ln="56" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="56" sev="3" auth="devtest" locRef="4" rule="PREPROC-12" lnHash="-326464112" rule.header="C++ macros shall only be used for include guards, type qualifiers, or storage class specifiers" tool="c++test" lineHash="-326464112" unbViolId="14c432c8-cd8a-352e-b596-08c45c466081" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bd3385a-1306-353b-b4d1-24e1c0f85146" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="56" goals="0," />
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="3540d248-72ec-36b8-93fe-11b842edae46" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dfd446e-0aa7-3aed-af43-4f6001090d01" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="7847623e-e8f7-3ba4-99c5-f3c8338cebb2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="996ced49-6023-312a-9d33-08f6c91dcccf" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="COMMENT-14_b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="61a845e9-07c8-35a4-a718-c3bb09b7c46a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70a8b32e-fa7f-3922-bc76-2503379ef12f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="1429237719" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="1429237719" unbViolId="c03fad2d-6be1-38b5-9442-571dc2f36dcd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a02a741b-b8c9-3fd4-a152-9ab681fbe9e5" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'assertion'" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="FORMAT-28" lnHash="1429237719" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="1429237719" unbViolId="ff2abca9-fe6f-3158-a404-078107620798" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="996a18de-3e89-330e-ae49-7aaddb944d29" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has Cyclomatic Complexity value: 2" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="1429237719" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="1429237719" unbViolId="2e536b99-3c3a-3e59-964b-f7b815669506" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be923d6e-7e19-37ac-a4d9-76d40a834f5b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has Essential Complexity value: 1" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="1429237719" rule.header="Report Essential Complexity" tool="c++test" lineHash="1429237719" unbViolId="df27e44e-0b24-3248-bcf7-a43b5407dc9b" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04f220f5-7ab8-38fc-91f0-1eda8d4a9461" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Naming convention not followed: assertion" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-17" lnHash="1429237719" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="1429237719" unbViolId="a1d26cf6-0f91-3bb8-8b75-226bee6b26fe" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8171ebc-0558-3685-9a29-a44dce50063b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="9803af47-4a79-3e96-831d-17c83fd0632e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="536a3ac4-e3ce-377c-b88c-b61bda835e4f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The definition of the 'assertion' function is not preceded by a comment" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="1429237719" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="1429237719" unbViolId="a335f127-a244-3d1c-b90b-332f5fa98cc8" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39035bfc-c71c-394e-9d39-70b9aebe2ec9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="c331d8e2-eb47-3a07-8056-85552ec7a015" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af20c966-3ea9-387c-bee6-d53766cf277d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="40eabf12-6fe6-3150-aa1f-0c2e57c0e8c3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a449fa85-9a37-3995-9054-17ae02b6761d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="1429237719" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="1429237719" unbViolId="ea2598d5-094f-3692-86bf-3ac2bb89bd65" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="292b141d-fe62-3245-9978-f2f606666741" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="d2f3b926-5aca-397a-b0cf-9ec5e4b4a035" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="383bfe64-04a5-3f46-9e06-5af03fc177c4" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="dcbb1417-c630-35e2-89c0-2fd03cf81e77" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db5aa773-1160-3f0e-bd1e-14b5ce14ad62" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="13a4c6da-48a2-3b87-827f-8297756e1919" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e85798a-a721-383f-b069-71e809403645" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Function 'assertion' has external linkage and is not declared in the header" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="1429237719" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="1429237719" unbViolId="ba00a013-6b35-3bca-a775-ebf952f87ffa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9358d2f1-b13c-31e2-8fc4-0e20fc17950b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="1429237719" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="1429237719" unbViolId="af255003-9213-3509-adf4-291dc3b0f2ea" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd1fdb05-d4b8-3d7d-bb62-5947f4422e94" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="628ac9a7-28f8-3e1b-85a9-5335e43a2323" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d578ccde-02c8-31f4-8472-6b1c393788c9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="1429237719" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="1429237719" unbViolId="45a63baf-be37-3d22-a26d-960bdc937430" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff055ea7-4e72-3e56-808f-bc0401aefa0c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Global function 'assertion' is declared in global namespace" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="1429237719" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="1429237719" unbViolId="4cb4c5fd-ab4e-3184-9824-a41d71024351" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6acc37a-5c89-38f5-a8da-765697a40704" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="d8b43b5f-c12b-3e42-aa58-94397c6dfe19" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64c8e927-4083-32e0-ad1b-17276df72904" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'assertion' function should be preceded by a comment that contains the '@brief' tag" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="1429237719" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="1429237719" unbViolId="bc91d162-bf54-3cb8-8dd2-ba8e2bb450d9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02d106ff-d136-3a20-80b2-e979369cbc39" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="5d437f45-643d-3f38-ae5a-2d0de5b6f5e2" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93e945e1-bc95-3e26-b54a-02a07dba876a" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="26b121c0-2c4a-3e2e-987a-645cb4ed5acd" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46486d9a-a330-3bcd-b2d6-d3e1b968db3e" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="85d23115-50c2-37c6-bc5b-52438ca55d99" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6995c64a-85d8-300e-b209-2c3f0e947566" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="8f0421d3-98b3-3a4d-87b7-7ee8412c1682" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b00c776f-7a5f-345d-b72f-7f42e8e9fc93" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="1429237719" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1429237719" unbViolId="dcd17608-296d-36c0-afae-e40799fcc04f" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="616056a0-700b-3d84-8b75-73b436dcae0b" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="d30af6bb-4f3d-3fae-8055-a5fdad8be3b3" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fba55066-bfe5-3bf4-9835-bb1a265f8d55" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="61fca7aa-e2b7-3404-8732-54fa28ae710b" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bf401cd-9110-3edf-8cde-4301ccd77647" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="1429237719" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="3d77c96d-4870-3d49-90d3-cc839add1666" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f739f4b4-a06f-338e-ac88-8c45b9c27d59" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="a4f3b1d4-36dc-301a-bde5-070193028e41" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e6ee6f9-b8c0-3882-931d-51c9658aa84b" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="1429237719" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1429237719" unbViolId="324dd19c-3e84-314c-93b2-5ac67f841221" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb6dd471-9861-360e-80db-482d5202aabe" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="'condition' shall be declared as unsigned int or signed int" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="PORT-13" lnHash="1429237719" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1429237719" unbViolId="b98091ce-5f03-3baa-b4ec-46880d13c737" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e78ad3d6-3f89-3fcd-98db-c829792e46e6" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL00-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="72ef531a-c12e-31d0-b6f1-625facda5a0f" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f3b3b8a-8d85-3c14-a34f-4d8e7c7a7da3" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="36aa0cc0-2595-3300-925d-202f1fc047f4" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17fb81d8-e512-37b3-bb8a-ca7ce58a031c" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_1_1" lnHash="1429237719" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1429237719" unbViolId="31c14c79-e614-33ec-b3c6-182670f6854d" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="053c7c5c-6399-31ac-8453-704b75583e49" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-53" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="28672847-a772-36c1-9a7b-32f399cff310" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7bfcba1-d750-3e2a-bf62-b96cbf4c2b04" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'condition' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_2-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="d5e3ddab-faba-3045-9602-54b1821c7306" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="905d9c9a-6ea1-3622-be70-84bf16f88463" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-22" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="6cc92f04-5726-36b4-8be2-0907761da383" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86a1e2c8-6ec1-3767-abae-d6e95b242b40" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-30" lnHash="1429237719" rule.header="Hungarian notation for int types" tool="c++test" lineHash="1429237719" unbViolId="80988bcc-d0e2-3332-ab5a-0a4a9e89f35c" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b67372d-7de5-3797-b080-e652d6b770df" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-43" lnHash="1429237719" rule.header="Hungarian notation for word types" tool="c++test" lineHash="1429237719" unbViolId="2bae807a-05a3-33eb-8b75-b2e73254a5d0" locStartPos="19" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="220463cf-cd84-3bed-bb64-973625f84998" locEndPos="20" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="FORMAT-47_a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="21600e62-a5a6-316c-af5b-21a724756a74" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="39448cd6-296d-3584-9738-51ca8033d65b" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_4-a" lnHash="1429237719" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="1429237719" unbViolId="a42868fd-1068-30ef-8471-7551ae3a60f0" locStartPos="30" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="456351dd-a8e7-30a9-b7ba-b0635a519cf3" locEndPos="31" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="790fe4a4-9af3-38c8-9dfb-342f2c7a9c71" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e846c06-756d-3580-9b5a-13a73c561d98" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'char' basic numerical type" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1429237719" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="1298fd42-b217-3bd1-9135-7267dcb0e084" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a42971d2-8cee-385e-a643-955053981ae9" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="1429237719" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1429237719" unbViolId="059632c8-cd11-359c-8979-fe94cba72b2a" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7dba7815-0eb6-377b-9467-da2be8d27def" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The basic numerical type 'char' should not be used" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="1429237719" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1429237719" unbViolId="3d8f550c-cb8b-3e23-96f8-d10f7f414aa4" locStartPos="36" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13ca2725-861e-39bf-bad7-853bd28db1b5" locEndPos="37" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL00-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="4db0e3f1-6e2f-3b9f-9bf9-e8edf709bfb3" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b93f22b5-63da-36af-b70b-bdee5437aba2" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="8c350905-213d-35c6-85d9-543b29ef2c90" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97c0614a-e37d-368d-b662-69e9de213fc2" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_1_1" lnHash="1429237719" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="1429237719" unbViolId="3b742828-cbdf-3fef-8170-b09dc4e7b63f" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f14120e4-663b-32af-8882-020a35ad2024" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-53" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="6ba249b1-73a1-3180-8721-30b804ec79a6" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82d5a07f-6ea0-3324-9fcb-ae3db70c0136" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Declare parameter 'message' as const" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_2-a" lnHash="1429237719" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="1429237719" unbViolId="58881953-cd61-3a9c-b66d-eb512fd3db5b" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a4ec4c8-7c08-3927-bcbe-fec542adcee2" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CERT_C-API00-a" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="c3b23ffe-3c34-3d28-acee-ee9842a06cd7" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0b4418e-cc36-33f8-8d9f-8fcdbf646d04" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Parameter 'message' is not validated before use" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-86" lnHash="1429237719" rule.header="The validity of parameters must be checked inside each function" tool="c++test" lineHash="1429237719" unbViolId="aadb676a-f0f0-3c4f-87c3-9b1a65de852a" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a7cdce3-d950-3062-81bc-0bd132db2e08" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-05" lnHash="1429237719" rule.header="Hungarian notation for byte pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="61ec54e7-eab3-35ea-af7a-cc3019943b41" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59156f8b-b1d4-3cd8-82ee-1ddd54809277" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-09" lnHash="1429237719" rule.header="Hungarian notation for char pointer, array, or reference types" tool="c++test" lineHash="1429237719" unbViolId="d8c69654-4b6b-391d-9a25-5c55d8904aca" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14b244da-d67d-3003-953b-6b86114e0ba6" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-10" lnHash="1429237719" rule.header="Hungarian notation for char pointer or reference types" tool="c++test" lineHash="1429237719" unbViolId="07921478-84da-3af9-8a42-f1312322605e" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12402b19-24b4-3afd-8d82-91e145d84b87" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The 'message' identifier should have the 'p' prefix" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-34" lnHash="1429237719" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="1429237719" unbViolId="1c029f57-4c54-3a91-8cf3-c3b9690bb321" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc4595c2-a62e-3c97-8e8c-5b98ca916c7e" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: message" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="1429237719" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="1429237719" unbViolId="5e738ca6-eb50-3b4c-ba60-8f92f8f3f235" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ece222dd-7b48-38b5-8de3-9bbc02e56122" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: message" ln="58" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="58" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="1429237719" rule.header="Do not declare pointer type" tool="c++test" lineHash="1429237719" unbViolId="f181f9ba-08c5-3e2f-8a3f-10301226a611" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2ba4ff4f-4d7e-3a01-9402-1da8718b78f2" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="58" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="59" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="59" sev="3" auth="devtest" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="6090ae4e-0df6-36a6-a2eb-7c5bd189758f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e5e11e3-ae7e-3f15-803d-e5b37396e380" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="59" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="JSF-061" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="a8752c20-fe3d-3c42-a5c0-1734efef3c46" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0115b9d-7fef-38cd-be0d-b2079e3a53ef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="FORMAT-42" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="0fc3bd90-c1cc-3b89-93c3-752be3764b48" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5d5b388-fd81-302e-bbe8-1d6f373ce064" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="JSF-060_a" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-600547524" unbViolId="d6a0c09d-b30c-3829-ad83-be815ec6a095" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aecf9939-1bf4-3259-bb51-631918f4c52c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="FORMAT-43" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="182efbee-dadd-31ea-b3f9-632a9afeb895" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d49995c-f810-3c2c-90e4-244f76f465e8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="JSF-060_b" lnHash="-600547524" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-600547524" unbViolId="7f19b32f-59c1-3228-b686-abd73a4d24a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22cf6f02-323a-3609-ad02-7356a86de98e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-600547524" rule.header="Tabs should be avoided" tool="c++test" lineHash="-600547524" unbViolId="81ac7c4f-78a8-3731-afbf-4853658b2962" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71c888f5-8249-3758-9c9a-c85f2efc7f9a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="fa97f813-8892-312e-bba0-640af2d3db6f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49ecadb0-8eb1-370d-abd8-e81edc5135fd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-600547524" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-600547524" unbViolId="45464634-d9d6-3533-a12c-ec37a641d2cf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8efc938-a7a0-36d1-9aa0-009f910b4863" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="FORMAT-02" lnHash="-600547524" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-600547524" unbViolId="acd5cb32-e2ea-397b-b1ab-e327a9da8ad5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8e6930b-a3a5-3cd9-8e96-e03f483f3405" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The 'if' statement doesn't have an 'else' clause" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="CODSTA-23" lnHash="-600547524" rule.header="All 'if' statements should have an 'else' clause" tool="c++test" lineHash="-600547524" unbViolId="1d607ab8-ce7c-3054-8205-ec20b2469241" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4df52896-9dba-3f3b-8078-ab7ae6af93c4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-67" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="c92c9434-1531-3375-a0e4-0e0101cdd62f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="740758ce-bde0-3921-a9c5-9ffb9b0a7836" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="ed238f81-e796-3c0d-a806-3827a33d6ee3" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a8e7062-c92a-3611-9f6a-97a10e0b5f94" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_3_1" lnHash="-600547524" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-600547524" unbViolId="d4c3c5f4-6edd-3c3b-b61d-c41c2984cdee" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="769e60af-8963-3f25-9af5-e2135e8baabc" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="In 'assertion' function use positive logic rather than negative logic whenever possible" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="5" auth="devtest" locRef="4" rule="CODSTA-46" lnHash="-600547524" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-600547524" unbViolId="80f2a5ce-a1cf-3b0d-b1c4-1d8ccd18a7f7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5de259b-14c6-30dd-9d41-c61101f24cd0" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="60" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="60" sev="3" auth="devtest" locRef="4" rule="MISRA2004-12_6_a" lnHash="-600547524" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-600547524" unbViolId="6a1556c5-77d5-3810-bfe2-2a2982b70926" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f6e1bd1-fe03-30bc-b5ea-12759cc121dd" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="60" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="e2cdc0ed-551c-36a1-ba00-709e8e7fa6da" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b49431e6-a84b-3ef1-b312-ea9b894df1e2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="7c1d74b3-7f44-3a1c-b504-290c8e870818" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04f58d55-34c1-38a2-81fb-9034cbb89cd2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="b5bda9a3-1b0f-305c-a642-99db86e1b408" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e592c81-dfc9-3091-a30c-59c50adbce3b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1274881582" rule.header="Tabs should be avoided" tool="c++test" lineHash="1274881582" unbViolId="dc2a6267-194b-39eb-a705-d2044d7d2cbb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc658e79-48fc-3501-a337-27dc7aabad7f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="451cd3ee-6e86-320b-9db1-11390c53d74e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ace12405-10ef-337f-a4c2-93cb29967517" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1274881582" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1274881582" unbViolId="bfe77062-4a5d-3162-bc6b-bf7f880270b0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01cf12ea-1514-3081-85db-0a3588b39fb8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="3" auth="devtest" locRef="4" rule="HICPP-15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="42837943-11d5-346e-b1ec-fe28a0fb6037" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96ed4121-334d-36fa-9551-b6e87aeb92a1" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Throw only instances of std::exception" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="4" auth="devtest" locRef="4" rule="AUTOSAR-A15_1_1-a" lnHash="1274881582" rule.header="Only use instances of std::exception for exceptions" tool="c++test" lineHash="1274881582" unbViolId="57414ac3-61a6-39e8-bef9-1cfba3363e30" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="198f142d-d04b-35d0-af3e-826097fd363b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="2" auth="devtest" locRef="4" rule="JSF-208" lnHash="1274881582" rule.header="C++ exceptions shall not be used" tool="c++test" lineHash="1274881582" unbViolId="e7887908-236e-37fe-a8cd-e90c92ddbc52" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe208024-5635-3c84-b5a9-b532dd29c594" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="c++ exception handling structure is used in function 'assertion'" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="2" auth="devtest" locRef="4" rule="EXCEPT-05" lnHash="1274881582" rule.header="C++ exceptions shall not be used (i.e. throw, catch and try shall not be used.)" tool="c++test" lineHash="1274881582" unbViolId="d492b4f2-eb1a-31e8-a2d2-b7ab847b6b51" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b8a07f7-7892-34e7-83d5-948754321a20" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="4" auth="devtest" locRef="4" rule="MISRA2008-15_0_2" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="bceac7a3-b545-357e-bc8d-5aa189cfd74a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="badd030f-de20-362f-a81b-d485056ed383" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A15_1_2-a" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="a1d2d112-2871-3c2a-b15a-eda7ef1f3637" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eea77b67-59bd-3cfe-ba52-5b40aac773c2" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Exception of type 'const char *' is thrown by pointer; throw by value instead" ln="61" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="61" sev="3" auth="devtest" locRef="4" rule="EXCEPT-09" lnHash="1274881582" rule.header="An exception object should not have pointer type" tool="c++test" lineHash="1274881582" unbViolId="851b2218-ded6-346f-9225-25c16efab560" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="05e5e8a0-0f56-3122-b53b-a238f763dfad" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="61" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="62" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="dfce66fa-7ddf-3e9e-ae4b-7ced4ca0f824" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c56f2d9-dbaa-333c-afb6-49f32d4148a9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="62" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="6d3b16b5-91ba-3a05-8ddf-fdd579a94d93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b36232c8-6380-30a7-a64a-9030a2d85a33" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="62" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="62" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="262c7f94-3560-3080-8457-fbeab9a725da" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e14de1c3-aa28-3007-af2c-dd4d215d2850" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="62" goals="0," />
    <StdViol msg="Pointer variable 'changePositionMutex' uninitialized when declared" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="136478104" rule.header="Initialize all pointer variables" tool="c++test" lineHash="136478104" unbViolId="50adf0ea-47ac-350e-b6a3-0ac7d710b200" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec65ae42-eb65-32ce-a456-5973a53ea256" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="'changePositionMutex' should be encapsulated in a class" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-18" lnHash="136478104" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="136478104" unbViolId="d2be068c-c2a4-357e-b940-cf959a06fea7" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40b1e0e2-a1f8-35a8-8573-bf3acc74462f" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="HICPP-7_4_1-a" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="55dffe75-67c2-337e-9cc4-2f84e5658ef1" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9edd4743-a03c-3180-906d-8ebf63f00dfe" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'static' keyword is used in 'changePositionMutex' variable declaration" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-50" lnHash="136478104" rule.header="Do not use static keyword except inside functions and classes" tool="c++test" lineHash="136478104" unbViolId="3ba1ab95-8035-34f2-8ea8-0ad4f3e2cc14" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32ea16e7-e65c-3616-bc67-675086c298ab" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Consider encapsulating 'changePositionMutex'" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="JSF-207" lnHash="136478104" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="136478104" unbViolId="34098611-ec99-3b68-8b47-8f4e42825640" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17172f8d-938d-39bc-bcd0-359464b63fdd" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Consider encapsulating 'changePositionMutex'" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-82" lnHash="136478104" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="136478104" unbViolId="8de91906-e6d0-3e86-b1e1-66aa39755c4a" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb77c50c-6946-3542-aac5-3fcf8710bee8" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="136478104" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="136478104" unbViolId="c003e05c-1ef5-3050-a753-9715330db115" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16da4e87-8366-3d47-b8d8-5a6e61567d40" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' variable should be commented" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="136478104" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="136478104" unbViolId="e497da95-6d9d-3000-b664-271f231c1f79" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80acf94c-d71e-3de2-afa4-630d181141e0" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Use of variable &quot;changePositionMutex&quot; with static storage duration is not allowed" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="HICPP-3_3_1-a" lnHash="136478104" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="136478104" unbViolId="23983ae6-b738-318f-a3ec-7d4c71b375b0" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5427694-b77a-36fe-9f4d-ac17e7d0810e" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="5" auth="devtest" locRef="4" rule="MISRA-022" lnHash="136478104" rule.header="Declare objects at function scope" tool="c++test" lineHash="136478104" unbViolId="2bcb61da-260c-363b-aab1-4c86c7ac4bc1" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="013c9186-e406-3872-af69-0a8704a4c254" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Naming convention not followed: changePositionMutex" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="NAMING-18" lnHash="136478104" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="136478104" unbViolId="ca559ee3-d119-3179-a896-632aedd33a7a" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cf49cc1c-02e9-3cf2-ad8c-8daa9cff5265" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The 'changePositionMutex' identifier should have the 's' prefix" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-38" lnHash="136478104" rule.header="Hungarian notation for static variables" tool="c++test" lineHash="136478104" unbViolId="be8c1e5b-0a14-3663-936b-cdf46241c6ef" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5d80876-31fb-337e-9248-b63d43f4181d" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="c583a9c9-03ce-3569-ba64-3d707f415f58" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5d7383e-7f59-3e0b-bd5f-059cff5c2f5a" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The name 'changePositionMutex' should be composed only of lowercase letters" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="136478104" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="136478104" unbViolId="b825ffd2-9f67-3169-8102-a704c3b7e521" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ffdd24a-3e3e-3556-9bce-6e6c98e20a6b" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="136478104" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="136478104" unbViolId="718a1c43-be89-33e1-9af8-1bc2370538b9" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d98228c-eb57-3c77-b82f-0687daa79946" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="b6b877e1-e47d-3f50-ae19-321f1a059c86" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7429d957-70b0-3c53-935e-6d0204e8f643" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="136478104" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="136478104" unbViolId="126fa26b-0301-3620-86bd-9ce8b7fb5b1d" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb167a39-1a8b-3d6a-808f-62f85f644af1" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="Global variable 'changePositionMutex' is declared in global namespace" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="136478104" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="136478104" unbViolId="23cd6988-e7cd-3c7c-ad04-7c061514abef" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55fc3ae7-e5b1-3133-959c-c5150ff91118" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: changePositionMutex" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="136478104" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="136478104" unbViolId="9e81b610-1377-3985-a99e-2e8f7d2db4ed" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="00b8cdd8-3ff3-3af5-82cc-f071f8feeef7" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The variable of pointer type is declared: changePositionMutex" ln="65" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="65" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="136478104" rule.header="Do not declare pointer type" tool="c++test" lineHash="136478104" unbViolId="7f826ad2-fff8-369c-95d7-b3305a7f4457" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cec85927-f3ca-31a6-8a03-a1bda7a2cda4" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="65" goals="0," />
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_2-a" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="2ce90edf-02e4-3b51-b0b5-4541a4c3ad24" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d41ea41-2b25-3a11-b9d5-b76b524039ee" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The declaration of variable 'ring' contains a non-constant initializer" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-32" lnHash="893639642" rule.header="Static and thread-local objects shall be constant-initialized" tool="c++test" lineHash="893639642" unbViolId="757adaee-0c88-3947-9dfc-65dcd6d1776e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3cb9471a-f111-33e7-8cc4-486ee24d21ea" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="a2e40e7d-77de-3c30-8241-667d5c6cf6b6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ecae95d-d402-3a9c-ae27-90a9c98f61f9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The definition of the 'ring' variable should contain a braced initializer" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-38" lnHash="893639642" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="893639642" unbViolId="0e6235be-b088-3664-afd2-bd197bf60b81" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f334de70-6eb6-3c16-a0dc-ace698b9ad11" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="0ead4759-920b-3ca1-b079-3520a3f1862b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d80a6e8f-d744-3d72-a300-3915a608a448" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="d847856b-d9d3-3d23-9bde-1139c033eaae" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2d9ed582-7320-3d1c-9756-61bc516a4f40" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="893639642" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="893639642" unbViolId="92eca474-c597-3d21-ab9d-57de5101b385" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2802273c-8e60-31a6-88b9-3d9c65849df1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="6e61e871-7cae-38cd-b47f-1dfd2bb618fa" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40afa5d2-6ac0-393f-9b89-32a9c1690aa7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="5e677c94-8f23-3ee8-9540-b765d80738bb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e314c53-4ecd-3081-b8c2-8b5099ccb522" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="d5006237-f44c-3912-a79f-bc731f8c8ae5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0caeef75-876a-34cc-96f2-63614a4f90cb" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' has external linkage and is not declared in the header" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="893639642" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="893639642" unbViolId="d893c73b-fc70-3ee6-be33-209543eb4fc0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c31258e0-3d21-3a69-a478-09a130e7ed15" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="893639642" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="893639642" unbViolId="dbec2053-cebc-32a1-bf05-a9a6dace9db9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f628b32f-c170-3b6e-afc7-567d226a66e5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="9e6acff3-4efc-3c43-a440-0e08f30d1f34" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a16bcf04-41af-304e-8676-dd98d8847691" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="893639642" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="893639642" unbViolId="ae60ef5b-65d0-3598-9860-05d18d0ef5ea" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d95f084-96b5-3e8a-aa44-4791ae4ce157" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared in global namespace" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="893639642" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="893639642" unbViolId="4ee5c046-281b-3bc9-90aa-cc2c15d88a51" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd73c8af-4a32-3a27-8ade-1a74ff666959" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="'ring' should be encapsulated in a class" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-18" lnHash="893639642" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="893639642" unbViolId="7ea38f45-4b9b-373d-8e42-5aad3f09578f" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a629722-dd5c-3b7d-9b0c-3c653049542d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Consider encapsulating 'ring'" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="JSF-207" lnHash="893639642" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="893639642" unbViolId="d77e2345-d1c1-3947-9aec-866eab1d5f09" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9131142c-3d00-3c68-a48a-463c862dcd0b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Consider encapsulating 'ring'" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-82" lnHash="893639642" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="893639642" unbViolId="aa953eec-efe3-3b6e-b10a-c94ccd61c705" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23d790c8-c189-3a4d-9769-8d1a71dc0b0c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="893639642" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="893639642" unbViolId="d39528e5-adda-3c70-bdab-4ef9867c19b2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f9bbb2c-1c4a-3812-a808-25658bf5bc93" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'ring' variable should be commented" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="893639642" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="893639642" unbViolId="ee73a318-bc14-3ae6-a8d9-0778b9d355ac" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16448803-5068-3152-940b-d6e9ec78dd94" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M15_3_1-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="9a2f2d44-3e59-3153-a29e-12b75f365cd0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52e7e59e-5e95-3c9c-b0d1-fc1dc452ab49" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="CERT_CPP-ERR58-a" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="4a83ef61-cb61-3baf-97ef-fc407354e9dc" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb44aa8d-e032-3b1d-aa72-784f45aad738" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="MISRA2008-15_3_1" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="f673f606-5569-33a9-b20b-73478f5be308" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14461a00-6741-3ea7-9df3-f6049e78b3c3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A15_5_3-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="69fe9b40-cd99-3132-9436-99ff11da3122" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="504c0160-43a4-357b-8c0f-aa2a567740aa" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-ERR50-f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="3b8b4577-744d-304c-9f4c-378bb314991a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7194a52e-8d29-3274-9955-5b0fcaf35450" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="EXCEPT-08" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="c83f5227-cd16-31c4-b879-d54e009bbce5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb635964-db29-3d51-8565-d9274449edc8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="MISRA2008-15_5_3_f" lnHash="893639642" rule.header="Exceptions shall be raised only after start-up and before termination of the program" tool="c++test" lineHash="893639642" unbViolId="210f1818-f403-37f5-bb16-c51985980147" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a29b4ac8-4979-34c0-a46e-d4c5a67a81dc" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Use of variable &quot;ring&quot; with static storage duration is not allowed" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="HICPP-3_3_1-a" lnHash="893639642" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="893639642" unbViolId="1d0cc401-912c-3f07-bd9a-d146d5e96694" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f219319-c524-32ce-a8a6-a420a7ea8697" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Variable 'ring' should be declared using 'auto' specifier" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_8-a" lnHash="893639642" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="893639642" unbViolId="caa744ee-b240-3c7f-bc8a-3350d1daa6a4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd09ec21-f6d4-36d9-83f9-c4a3275d5db5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Global variable 'ring' is declared" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="5" auth="devtest" locRef="4" rule="MISRA-022" lnHash="893639642" rule.header="Declare objects at function scope" tool="c++test" lineHash="893639642" unbViolId="27e756cf-da7b-3f90-91d6-c28da1af8182" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="352cbe16-3694-35ac-9f9d-5a4f79b47ccf" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Naming convention not followed: ring" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="NAMING-18" lnHash="893639642" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="893639642" unbViolId="52633a24-4702-3f3a-809e-cf7e7fe72ee8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40965ac9-7b33-3ccc-9284-c8a08f8d71fd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The type 'int' of function argument number '2' does not match declared type 'double'" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="PB-11" lnHash="893639642" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="893639642" unbViolId="56f87e21-868a-345c-bb0b-08dba18776b1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd5f7828-156a-3ad0-a196-2c3d397cec35" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Argument type conversion from &quot;shorter&quot; type to &quot;longer&quot; type" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="PORT-16" lnHash="893639642" rule.header="Avoid conversions from a &quot;shorter&quot; type to a &quot;longer&quot; type in function calls" tool="c++test" lineHash="893639642" unbViolId="23467058-3da3-375a-8c38-edc92cdf921d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd7aeee5-1c26-35c4-8753-f367855c8ded" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_0_5_b" lnHash="893639642" rule.header="There shall be no implicit floating-integral conversions" tool="c++test" lineHash="893639642" unbViolId="993897f6-c37d-369d-bb27-8693cfb883b8" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e179f382-1c4a-3b44-aa5e-ce5feeafc53f" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP39-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="3730b0b3-bc0c-3389-a629-f21bf90dfc64" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4b77e81-55bf-301e-96a6-0c35d569af7d" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_0_5-a" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="97bea2e4-2b11-3562-89fa-2f795c708722" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fbc3b117-a7d0-3af2-8820-350eac7dbc7b" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="Implicit conversion from integral to floating type in function's argument" ln="67" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="67" sev="3" auth="devtest" locRef="4" rule="MISRA2004-10_1_b" lnHash="893639642" rule.header="There shall be no implicit conversions from integral to floating type" tool="c++test" lineHash="893639642" unbViolId="61a942c5-4ba1-309d-a7de-5f34017b7fd1" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17f0a78b-ad83-3a49-b2f5-f976d94214ab" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="67" goals="0," />
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="JSF-062" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1054095129" unbViolId="2ec8a8cd-a4a7-3f3d-8752-b4f514fe77a4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e498eb86-fc75-32d8-aeb5-45c70ad5aad7" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The operator '*', used for 'participants' declaration, should be directly connected with the type" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="4" auth="devtest" locRef="4" rule="FORMAT-32" lnHash="-1054095129" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1054095129" unbViolId="f12a7542-89ba-3a8a-ae4a-0ae8adcfc0c6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="174ab425-97fb-389a-8d69-034c0e407433" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="'participants' should be encapsulated in a class" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-18" lnHash="-1054095129" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1054095129" unbViolId="1eda86a3-346b-35bd-8422-714f6c0788c6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91694961-70fa-3af0-8d16-5a0a687a5ddd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Consider encapsulating 'participants'" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="JSF-207" lnHash="-1054095129" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1054095129" unbViolId="0597023b-e342-386c-9387-a49f631e9b4a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b14fd23e-ac70-385f-939d-54fbb3857263" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Consider encapsulating 'participants'" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-82" lnHash="-1054095129" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1054095129" unbViolId="0fe79436-8bbf-3942-a055-8fde4fac9b3c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84b7e271-f865-360e-ab3d-325798a44297" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1054095129" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1054095129" unbViolId="84438592-70fa-3dd3-8de1-420d99026d42" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de9070d5-15d5-34a2-9346-92f1a32402fd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' variable should be commented" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1054095129" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1054095129" unbViolId="cf7d4686-7265-3302-bf2f-e4c79b3ff4b7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31ba194f-3358-3d04-8050-d35c41be4a31" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Use of variable &quot;participants&quot; with static storage duration is not allowed" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1054095129" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1054095129" unbViolId="7ec2f99a-5cd3-351b-b24e-64dcfc0a1b59" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfbda1e9-21b9-3acb-9932-6c9ac2f245ca" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="5" auth="devtest" locRef="4" rule="MISRA-022" lnHash="-1054095129" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1054095129" unbViolId="b45687fa-9b1c-3f72-bc97-4ba9f744f204" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07782387-5987-3596-8f7d-da5150f5fefa" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Naming convention not followed: participants" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="NAMING-18" lnHash="-1054095129" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1054095129" unbViolId="27b52b1d-3f79-342b-a284-1ca507645907" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d56dbd4d-f7f1-383a-a516-39b7503f6291" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' identifier should have the 'rg' prefix" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-01" lnHash="-1054095129" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="-1054095129" unbViolId="2ab28ca0-c2fd-39ec-a0e2-f2be49c58b1c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54fb1f47-2ba4-375d-9df4-b3318d9ed255" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="adf318c4-cdf6-3df8-b81b-b940c4537803" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02957691-7b50-354c-a95b-1aec8a8fbff4" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="01a31e9f-a45e-35ba-b362-cfbb33920c95" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22010f5d-7d5b-3c9c-b6e8-26474500ffee" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-1054095129" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1054095129" unbViolId="cf8abd02-19ee-31e3-ad0c-4b986cf40127" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8e73ca8-38b9-3e8f-9170-4839275dd264" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="1e7f259d-1108-3e9b-96d9-1ea7d81a6b39" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f077800-69ef-3a00-b0f0-52d7aecb8aab" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="ba24e97e-f912-30e3-a68e-6aed498e1aa4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="115cde94-c56b-396a-b384-e4141084d059" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="d72f9e73-c7a7-3e2d-ae25-2f3a53f9fbd8" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7af0ddfa-4bcb-34f9-8f16-503305066193" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' has external linkage and is not declared in the header" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-1054095129" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1054095129" unbViolId="a2930de2-93f1-35d4-991b-3d2399daf7d9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e50b82b-5c37-3f5f-b73a-3824b3384636" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="STL-37" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="fe5f1f42-4732-363c-9995-0d08e3717e7d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a498db2-1776-367e-8142-87239d2993d0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The 'participants' array should not be used" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A18_1_1-a" lnHash="-1054095129" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="-1054095129" unbViolId="d0ee01b7-7d5d-3c04-a73b-2bbb853a82b6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28f118cf-b78c-3401-9dcb-44951e9149b9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="-1054095129" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1054095129" unbViolId="2388d7bc-290b-34f4-87d5-83a741c3f9c2" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69dad319-0e5c-35cd-ae72-2df1464d6e6c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="ebc27a53-32eb-30d3-a3c2-aee7c523006e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3604bd6-fec1-3541-b6c7-fe7b493e4d01" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-1054095129" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1054095129" unbViolId="daa36dc2-1773-3cf8-93e5-477ac756c168" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f6a23f8-2a8e-3fed-b515-b6bbc724354e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Global variable 'participants' is declared in global namespace" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="-1054095129" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1054095129" unbViolId="ab08978e-e150-3197-9e52-e57caa966bcf" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50a4d6c0-0c95-347d-9891-e75ff29d939f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="HICPP-8_1_1-a" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="44f6d147-1666-3bda-85b8-c6a7792e20e9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="566341b5-6944-32f7-af8e-97ae90db4caf" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="Declaration of variable 'participants' contains more than one level of pointer indirection" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="CODSTA-89" lnHash="-1054095129" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="-1054095129" unbViolId="6c77087e-1950-377c-8edc-93b19fb663ea" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd160f53-de3b-3d30-a5a8-dccff073341a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: participants" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1054095129" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1054095129" unbViolId="b72aedad-43aa-3683-8cbd-94bf97af1c92" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3911d747-76ab-311e-a75f-d8e0394d2606" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The variable of pointer type is declared: participants" ln="68" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="68" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1054095129" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1054095129" unbViolId="eec8877c-9196-3ee5-9a8e-6fcde16fba20" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d0bb355-c6fc-3780-b89c-63e65bf598db" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="68" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="-1146363747" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="97ca9302-b7a4-3d27-a3d3-99d2123163d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="affb72a2-27d3-387f-8d1a-503cf4f2ba57" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="-1146363747" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-1146363747" unbViolId="08314a7e-c4d6-3d84-a820-7504deceffe3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bf631bc-953b-31dc-9ce7-f7d4c7d0ef0a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="854662b7-fe41-37cc-82c4-a0e7ec6e34f9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="978f600d-a87a-35dc-933b-d1907c4545ae" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-1146363747" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-1146363747" unbViolId="baf2fa75-469d-3790-a452-9f33502385d1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38e4c98f-58ce-3e1f-a2ad-828960546c19" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="-1146363747" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-1146363747" unbViolId="732db2f4-58a4-3183-bde6-9124e9e4e698" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21e86474-8242-3df6-ba28-d25dbf60270a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="2a96d223-c86e-35d1-95bc-b57a66c6a03d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21a20449-567c-3c12-85c0-b5b1b2645d4a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="046049c2-2693-3b51-afd7-cfbd9ad89899" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1351ab46-a471-3318-acf3-16ef77c69b04" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="-1146363747" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="be1db9e1-5245-332b-9de8-85b1967b4c22" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="684642a5-3e20-39c5-b69e-a74364990a50" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="f97c22a4-964c-3c24-a962-35c797aa1477" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03a796d2-d030-3115-b357-3e85b5665277" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="-1146363747" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-1146363747" unbViolId="1279e61f-cb04-37aa-be0e-d4bebd1b1a7d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d495830e-6c99-33d8-859e-0ddf5b79c36d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="'participantsCount' shall be declared as unsigned int or signed int" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="PORT-13" lnHash="-1146363747" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-1146363747" unbViolId="5ed210af-a647-335e-9b95-b594d5807fd2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9422a604-2356-3f53-8afe-0781a672624f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="'participantsCount' should be encapsulated in a class" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-18" lnHash="-1146363747" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-1146363747" unbViolId="56a95f3d-d276-39be-91c9-8dc5c17ebb1d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ba82b0c-fbed-33b6-b020-3e0a95bbca79" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Consider encapsulating 'participantsCount'" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="JSF-207" lnHash="-1146363747" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1146363747" unbViolId="c912e08b-4eb9-3d10-9aaf-7d65fbf2f0a7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4490900-419d-3819-a6cf-b3db4ca590cc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Consider encapsulating 'participantsCount'" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-82" lnHash="-1146363747" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1146363747" unbViolId="63d00745-07d4-362c-8ee8-4565e631d3fa" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b935574-ebcb-38dc-8b34-4ace1aa92790" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1146363747" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1146363747" unbViolId="5309ad78-a56e-3177-bb31-122ab8abef21" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f597c283-401b-344c-93e7-0424779126dc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' variable should be commented" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1146363747" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1146363747" unbViolId="1685495a-2599-35c1-a211-756f9cdb86d8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04bb9445-6e9a-3096-b25d-0aa0c6c563c0" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Use of variable &quot;participantsCount&quot; with static storage duration is not allowed" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1146363747" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1146363747" unbViolId="4d1dad6d-951f-332e-a455-7b80b5a905ac" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8920e546-ef91-3708-9002-cf2283d89641" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="5" auth="devtest" locRef="4" rule="MISRA-022" lnHash="-1146363747" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1146363747" unbViolId="ed89fe51-8795-33b8-8520-c4e73b1c4109" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5af44f2a-e588-3f78-8dca-c27bfdd1a630" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="NAMING-18" lnHash="-1146363747" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1146363747" unbViolId="878fcbee-d2e0-3d97-aedf-5a4f20c21939" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fdadd02e-89d5-3553-82a7-08d97f3a371a" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Naming convention not followed: participantsCount" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="NAMING-19" lnHash="-1146363747" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-1146363747" unbViolId="2ea631c6-634c-3c58-9086-7a4f63af0369" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7518b3f4-0789-3bea-b79a-dea389c379c4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-22" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="163f00c0-14ba-31ba-bc7e-3e405521057d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3792b91-c6c9-3991-ae90-4b6fc339a720" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-30" lnHash="-1146363747" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-1146363747" unbViolId="5cac2831-d7ca-3008-ac73-6016c04d77d0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe5e9c6b-b8f7-3492-9c6b-33ae59f8e319" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-43" lnHash="-1146363747" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-1146363747" unbViolId="7f3cc978-c417-3e9c-adf9-ff064f63bf05" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b22c712e-eba7-321e-8087-bd6d17b5a2f3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="2" auth="devtest" locRef="4" rule="JSF-142_b" lnHash="-1146363747" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-1146363747" unbViolId="92879d77-7f79-384e-adee-5cd3cb80d2de" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a46e8d9b-591b-3078-a9f9-3cea0add9cbc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The variable &quot;participantsCount&quot; was not initialized when declared" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="INIT-03" lnHash="-1146363747" rule.header="Initialize all variables" tool="c++test" lineHash="-1146363747" unbViolId="a25df9b2-ad18-3bc2-810a-41569b69a971" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb5ab942-8fae-3112-aa99-8bc1e702dc87" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="fc96d11d-8478-3708-9668-d4d0648402da" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bb120e7-274f-32cf-b77b-52a6a2955bc0" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="a5405e19-6776-38b3-b827-8ee037868a3c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6755b14-4f21-3f18-b8ba-6a5cdfc1913a" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-1146363747" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1146363747" unbViolId="4888d0c1-8a8a-3f4e-8a79-a11b2d7f4890" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7482b9d-da97-3a0c-ad79-9dc07778e5b3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="6f4391ec-dd5a-3147-a1a5-b8d63f35e074" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ce15ac0-8fcd-3cb9-88a2-655739e459e1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="9b8bd82d-342f-364b-b4ac-bc536fcec958" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1692ffcc-4596-3e52-b312-6b6aa4fdaf45" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="f2d544bc-d9c2-3aff-ab17-aee5a8fb4c86" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68e842a2-ed40-31f9-bf8b-38117c10434f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' has external linkage and is not declared in the header" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-1146363747" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1146363747" unbViolId="28db7d5f-3f2d-38f7-912a-0fecc69bdec6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb06f3f3-3c8b-3e9b-989b-5144315bd0ab" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="da95c047-eac6-3572-9fcb-ca7964efbfc0" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="895db6ba-53c7-3f21-b757-055fe9af90a3" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The name 'participantsCount' should be composed only of lowercase letters" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="-1146363747" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1146363747" unbViolId="348688ea-9e59-3cee-8bb0-45a59c008137" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bff22c8-d8e4-3fda-9745-8b1db5a8e9df" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="-1146363747" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-1146363747" unbViolId="b968dd4b-236b-31b6-bac9-5eecba1d439a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2daf8cc3-edf8-3be6-b9ea-1e39b786aebd" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="9a1453c2-fc66-3274-8eaf-2d4107a8b9f7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e14530da-c4db-3f06-94e2-80fb3f0ea3de" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-1146363747" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-1146363747" unbViolId="b362c66f-8e6b-3b65-b014-afaf451fb57c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69b92878-2f08-35c6-bba0-c9ab119bd6dd" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="Global variable 'participantsCount' is declared in global namespace" ln="69" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="69" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="-1146363747" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-1146363747" unbViolId="a618c6b3-5588-30cc-bc4a-54cac18bde3e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bb4ea51-2060-324d-83b0-b51213ec25b4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="69" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="-807048934" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="ec12fee5-9184-32bd-a706-bb9df1ab74b2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aeac6b1f-20d2-3e4b-8074-b2fcc3fa84f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="-807048934" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="-807048934" unbViolId="739559ca-8c00-38b4-a2f9-62b9857afbe4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91a621d2-1e69-3c8e-9af4-beeb863bd5a3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="a8cef63d-0839-3cf1-974b-9644f1d96fd1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83136c42-c9e1-34f7-8079-f5d9a64dc8bb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="-807048934" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="-807048934" unbViolId="5e9d5787-d74e-388e-a935-a186caba9438" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28a0b5a8-3875-3ada-b71b-65d340913c68" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="-807048934" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="-807048934" unbViolId="11779baf-fa33-3310-88a9-2bcd4c15a1c8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76bbf2cd-d946-3122-a984-9d4ce97de318" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="eea41c69-9211-3fd2-8952-a18c9e846c3a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="792b84c9-56d7-37c4-9f6f-d3a24f6ae286" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="3e527d65-7eca-3363-bf2a-808cfe370c9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec580d52-7405-3c38-8e9c-81a39e203194" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="-807048934" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="a1bbfa1f-2299-3a7f-9ea5-4a9a163564d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f34d33e-9a6e-3199-87ec-11647f9edfec" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="a028ff24-5bff-30fd-9983-fdc29e8b3b4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eb3484d-ee89-33d7-b6ea-018ea55de878" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="-807048934" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="-807048934" unbViolId="1d322c51-de7d-3985-8c1c-b94afcaa8e6d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dabcf4da-8b2c-3a63-9499-20fa8c16490c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="'exitGame' shall be declared as unsigned int or signed int" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="PORT-13" lnHash="-807048934" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="-807048934" unbViolId="10467c80-66b3-3176-8f8b-e5a2396da346" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="947da7fc-45b0-34d6-bd39-0d6c7f203919" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="'exitGame' should be encapsulated in a class" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-18" lnHash="-807048934" rule.header="Encapsulate global variables and constants, enumerated types, and typedefs in a class" tool="c++test" lineHash="-807048934" unbViolId="32231510-875d-37bc-afa9-27fb6834a6fc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1af5cd96-f322-3150-8589-023e18498f50" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Consider encapsulating 'exitGame'" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="JSF-207" lnHash="-807048934" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-807048934" unbViolId="a69fb637-478c-34ca-83b1-e052f4a76b4f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9a43aeb2-6acd-3510-8f17-6076797ca748" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Consider encapsulating 'exitGame'" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-82" lnHash="-807048934" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-807048934" unbViolId="23cd3c95-d1b5-3f77-b6a1-a45c55f25b98" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3041b46b-6f34-32b9-9ffb-5401fc26620b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-807048934" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-807048934" unbViolId="a7d10323-5ad8-3568-8c79-28284fd05104" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faee7a62-5164-3085-930a-abb57dc06d78" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' variable should be commented" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-807048934" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-807048934" unbViolId="7d6f443e-0898-31df-8df0-5c159d442e50" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f50eb1ce-7569-37fe-9cb9-61023097fbd0" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Use of variable &quot;exitGame&quot; with static storage duration is not allowed" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="HICPP-3_3_1-a" lnHash="-807048934" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-807048934" unbViolId="1e82d3c1-621d-37d8-9df3-6b546631eb0e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d65b2819-e3ca-3bbb-b68c-029e4b0d4c9e" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="5" auth="devtest" locRef="4" rule="MISRA-022" lnHash="-807048934" rule.header="Declare objects at function scope" tool="c++test" lineHash="-807048934" unbViolId="a4fe0609-d706-303c-9a5d-f4211920dee4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b60b119a-2a0c-350f-90b3-718880bb143d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="NAMING-18" lnHash="-807048934" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-807048934" unbViolId="e16366bf-551b-3e26-929b-81b6d1d49693" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5d1e71b-923b-3a53-bab4-a74ab8e2a9eb" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Naming convention not followed: exitGame" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="NAMING-19" lnHash="-807048934" rule.header="Begin all integer type variable with 'i'" tool="c++test" lineHash="-807048934" unbViolId="dddb94a5-a2c2-3d12-93b7-fb3a88457c28" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e31ea7d3-5b19-3d7e-818c-c0fa89cb311d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-22" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="7229124d-ed7b-38cd-adbf-d1fc4f93e5dc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b51e9e4-0272-36fc-a80d-9f565efbd450" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'n' prefix followed by a capital letter or an underscore" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-30" lnHash="-807048934" rule.header="Hungarian notation for int types" tool="c++test" lineHash="-807048934" unbViolId="d9b68a40-3878-3fbf-a156-86eede37a75d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="79f8015c-d0a6-3d45-8091-58bd6dc7bdc1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-43" lnHash="-807048934" rule.header="Hungarian notation for word types" tool="c++test" lineHash="-807048934" unbViolId="c24bea0a-a2d7-3d6f-ad9e-a8fc77862c47" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d528f54-936b-3023-83b9-c7ea220a5607" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="2" auth="devtest" locRef="4" rule="JSF-142_b" lnHash="-807048934" rule.header="All variables shall be initialized before use" tool="c++test" lineHash="-807048934" unbViolId="5b500dfd-3b4f-3c73-8396-ac3d9a2ff389" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80667116-0d35-3ac0-b8ef-2e1c6b19ca64" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The variable &quot;exitGame&quot; was not initialized when declared" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="INIT-03" lnHash="-807048934" rule.header="Initialize all variables" tool="c++test" lineHash="-807048934" unbViolId="cefe2fe4-8857-34e4-9d25-298c72577760" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42a13002-177e-37af-89d2-eefc306b558f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="97f4d07b-27ce-3219-b812-3d1fd9dedabc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75c7ddbc-dad8-3434-b2f2-a47bf2e851c8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="55f4f229-266e-3575-a161-b9175fe9d1c9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86d9808a-b643-3cf6-b811-e449397dca4c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-807048934" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-807048934" unbViolId="fd336019-a9ab-3838-b52d-41aa2aaef294" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a5c581ba-d3eb-3448-aa48-a492ef6c947b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="128abb84-182c-30b4-ab95-251c218d98b4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8d42c89-fbe6-3f1c-b549-af9ae44272b4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="0261ae5a-ed1f-3e0a-8e8c-5f322179f26a" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cae6a043-38ad-312a-97a5-89355522a819" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="fdf4706a-be48-34d7-b7a7-f59d6798543e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9216b45-bc27-3817-9569-c32ad7cf7d9b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' has external linkage and is not declared in the header" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-807048934" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-807048934" unbViolId="97a16a20-41ef-3aa1-afe9-4084b0428c5b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6ecabf6-259a-35fe-88b1-29c39c5ca51e" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="6fd4b917-3909-324e-b28b-b46505391851" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d309dfac-c286-3bd4-8083-e6199ccd12f8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The name 'exitGame' should be composed only of lowercase letters" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="-807048934" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-807048934" unbViolId="84e84f63-000b-31e7-b378-fbe96629482d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20a4791c-b871-307e-9008-c1143ff44f47" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="-807048934" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-807048934" unbViolId="1bf9ec0c-e318-3e40-838a-d59e65ba9457" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ac63523-1735-33bb-958f-1bc96d98a765" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="b322492b-d393-34b1-929b-59a52ee74859" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="461cd311-c574-36ef-bd95-bd792ef0f4e2" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-807048934" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-807048934" unbViolId="a1a19db5-60ba-302d-a359-49ef3b8b4c14" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60d6210c-6297-31e3-a1c3-57d6460d17b1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="Global variable 'exitGame' is declared in global namespace" ln="70" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="70" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="-807048934" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-807048934" unbViolId="55c51bd9-bd5e-33e6-b1da-55557d76608c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b94d925d-4614-3d6b-b6e3-f8b038cbe123" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="70" goals="0," />
    <StdViol msg="The return type of the 'GameLogic_Thread' function should be declared as 'auto'" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="CODSTA-MCPP-08_b" lnHash="-105532398" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-105532398" unbViolId="11081585-fff8-341e-a236-92132a26badd" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e79df4f1-4d06-3c4f-8798-ba6510d42837" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="31d5c42b-1f13-38fd-9407-a303f9070741" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09dcbcb6-5872-350a-8e6c-6156bf04f904" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The definition of the 'GameLogic_Thread' function is not preceded by a comment" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="-105532398" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-105532398" unbViolId="3d269a9d-3047-3e97-82af-fabe3560c905" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f914f6c2-8e2f-3ee2-a5d4-0493d3d11ee9" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="4087b4fd-8153-35ec-bfbd-870da14f75db" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96cb6586-0263-3210-9d46-0be40172ff15" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="9bde32ae-51c3-3581-a8fa-da3bb143a79b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c0776c3-a63b-37b3-b09e-bb7a28e26e06" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-105532398" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-105532398" unbViolId="b7d267a1-685a-3a9c-ad24-0fa298e8e066" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="978a5935-0b0b-36a5-bbab-2747470afeb9" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="d4819fd5-58b8-33fe-b354-e81ed27b95ad" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f917b329-e6a7-38d1-9250-aec209a03dcc" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="582ab86b-862a-3113-b8c6-ccca0298f03a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2296366d-9c7f-3292-810a-a9c6150ac4c6" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="987251ce-3fd0-34a2-9fa6-9bbd6e7e55d3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e9f137d-328d-3b3f-a49d-1353451ef82f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has external linkage and is not declared in the header" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-105532398" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-105532398" unbViolId="bf4a0ab4-8770-3a03-aa77-8cc1d26400d0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b418b5f-aaa6-3860-aa20-4bcf52945d70" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="32f401f7-b38a-357d-aea3-cadc7cc0c5d3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d35ca040-db6f-30bb-ba58-e20c873911eb" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The name 'GameLogic_Thread' should be composed only of lowercase letters" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="-105532398" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-105532398" unbViolId="03ff1a9a-0937-3675-8718-9a01436bda3b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6488d7e9-5a96-34bd-a186-6962f4015775" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="-105532398" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-105532398" unbViolId="904037f7-2393-3057-b750-1899abcfd3fa" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59451ac9-3a94-3f4d-90ba-eaf448634202" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="bf50e6b3-26c0-35f0-8944-42f63ac8ae3f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5419bb1-4078-3cca-8630-2b93df32899c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-105532398" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-105532398" unbViolId="c4c75f79-bbfe-380d-af5d-9a5024626c59" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9492f8e1-9793-3100-8177-93195350adff" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Global function 'GameLogic_Thread' is declared in global namespace" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="-105532398" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-105532398" unbViolId="dbd65346-bb5c-36c9-b32f-21b7b2326609" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7113b06d-9b17-345b-a0f3-c4cafcdc942e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_2-b" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="33c6dd1f-ea9e-364a-ab60-fdb80800fc79" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a36f4c7-7a5e-3556-8b03-228902ce89ff" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'GameLogic_Thread' function" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-105532398" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-105532398" unbViolId="8198ff61-b98f-332d-a7b8-6bfae637317f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f65b165-9cb6-31bb-99c7-92daff47e364" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' returns a pointer type" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-105532398" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-105532398" unbViolId="8a7e18bb-198d-3af6-9141-6cd8f2e03870" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8a4ce7a-1f58-3522-9c9f-4385138410fa" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' returns a pointer type" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-105532398" rule.header="Do not declare pointer type" tool="c++test" lineHash="-105532398" unbViolId="9952558f-1aec-396d-af2e-f6a09afaf9a5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90e2ba3c-cea1-32c5-8cea-9c7401c15ed5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="cdc4ecfa-84a9-3f52-a0c8-40f2d5221d1b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f5a5307-f097-3904-90ee-05d11d1d308f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-105532398" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-105532398" unbViolId="c2ee09db-4b85-3ebb-8c5e-150e807ae623" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3893fb74-d792-38c3-a88f-eda088f94473" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="COMMENT-14_b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="050cb045-f34b-3b32-82c3-649be20811c3" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6507925-4a8d-3cd1-aa3b-a30071e5bdb5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-105532398" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-105532398" unbViolId="87d841f4-69af-30f7-8a43-735690248ce4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4bd6377-c08d-3e40-aa7e-d0c152e9dc54" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="510d890a-8872-3001-a098-c0acca49f660" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0af92615-070c-31b6-b9a0-e8371ae74c8c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The 'GameLogic_Thread' function should be declared 'noexcept'" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-09" lnHash="-105532398" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-105532398" unbViolId="cdb6333b-bdf4-35fd-8909-eb539eb05b35" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba3c4489-9c66-337b-b22a-008eb683f858" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has Cyclomatic Complexity value: 1" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="-105532398" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-105532398" unbViolId="9784d97d-0a0d-3bf6-8f7a-853f8641a30a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14197015-b3f7-3334-9b1b-43b1699659ea" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="Function 'GameLogic_Thread' has Essential Complexity value: 1" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="-105532398" rule.header="Report Essential Complexity" tool="c++test" lineHash="-105532398" unbViolId="192f26e6-e872-356c-9d7c-ad3201106ad4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29dbc2c1-3023-3e59-abc1-751452e2e791" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The incorrect global function name GameLogic_Thread was found" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="NAMING-34" lnHash="-105532398" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-105532398" unbViolId="393f4924-9e6b-3e3a-b067-71d98747bbaa" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7264066f-851b-3ff8-a1e6-fb518a02e13f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-105532398" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-105532398" unbViolId="f1170e35-e567-3f67-b620-e257905c88ae" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2c04c87-aa20-32bd-8112-cb551f456339" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="72" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="72" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-105532398" rule.header="Do not declare pointer type" tool="c++test" lineHash="-105532398" unbViolId="0d0cdfc3-4cbd-3ba3-a615-eb1b83f82557" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e8b3db4-2cb7-3371-919e-083a2a80ffbb" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="72" goals="0," />
    <DupViol msg="Duplicated function: 'THREAD_RETURN_TYPE GameLogic_Thread ( void * ) { return (...'" ln="73" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="73" sev="2" auth="devtest" locRef="4" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="2143d357-f978-3b41-aadb-b5e0fc99eea4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="f4457c4a-6d07-3606-bb7a-4b0d520cd4a5" locEndPos="1" locType="sr" urgent="true" hash="-1769734618" locEndLn="76" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="73" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="73" srcRngEndLn="76" desc="[Line 73] Duplicated function in file 'DeadLock.cpp'" rngLn="73" />
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="79" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="79" srcRngEndLn="82" desc="[Line 79] Duplicated function in file 'DeadLock.cpp'" rngLn="79" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="74" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="937420148" rule.header="Tabs should be avoided" tool="c++test" lineHash="937420148" unbViolId="a5e1836f-fdc6-32e8-b991-d28f05b7593b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cdb81967-bf89-3b43-a0dc-d83c99e6c348" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="74" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="624bb5bc-bdd6-3c8a-8283-a7ff9f2aa245" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d50acc0-fd8e-3d44-b5b4-7c2d4304666c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="74" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="74" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="937420148" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="937420148" unbViolId="0a30ff6e-4b70-3f78-9890-3c429cf4be00" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a222305d-077f-383d-b908-aec0d7e3f061" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="74" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="ca03cd38-3015-3be9-8539-31d52c4afd53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="108203c1-6404-3d86-85cb-e4037aa4f294" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="5db0a7bf-5697-37bd-8bcd-bc10898523cc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27ed768a-8cde-31f8-bbbc-e725fee55213" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="1ae9d6ed-f25e-3220-b0ec-19427c66d233" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="390835c9-9372-362a-b461-adf4979a06b7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <DupViol msg="Duplicated code: 'return (THREAD_RETURN_TYPE)0;'" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="CDD-DUPC" lnHash="466607007" rule.header="Avoid code duplication" tool="c++test" lineHash="466607007" unbViolId="e59370f8-4dad-3b43-abc0-af42163851fa" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="3e5c9c92-de2d-36e5-9a89-eb5845a9c55d" locEndPos="30" locType="sr" urgent="true" hash="-1769734618" locEndLn="75" goals="1,">
      <ElDescList>
        <ElDesc lineHash="466607007" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="75" srcRngStartPos="1" srcRngEndPos="30" srcRngStartln="75" srcRngEndLn="75" desc="[Line 75] Duplicated code in file 'DeadLock.cpp'" rngLn="75" />
        <ElDesc lineHash="466607007" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="81" srcRngStartPos="1" srcRngEndPos="30" srcRngStartln="81" srcRngEndLn="81" desc="[Line 81] Duplicated code in file 'DeadLock.cpp'" rngLn="81" />
      </ElDescList>
    </DupViol>
    <StdViol msg="'return' statement should be used with parenthesis" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="9cc64532-168e-3c3a-9ba6-61d792bbba80" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc44093f-6945-3b5b-8ffa-2518d5097b9a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast is used" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="00ed8588-d010-3fa9-aa62-d3ac9ef6e0f0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6c579ca-2175-318d-b8f8-42a95c047cf5" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast is used" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="b1cc43e1-5704-3d9f-a053-799ea70260e9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce3cf0ad-225c-37d5-b13f-7d1ae2c542ed" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="2" auth="devtest" locRef="4" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="15e0e6c6-63bb-319e-8407-f791a3213d0f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a16baa19-b6e5-3cd3-a19f-44c31e271ece" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="beecae61-373a-3f70-8495-8d72ec5a93e0" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bea11c71-2573-369a-9917-cbeaab395246" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="b275c928-3c34-31d9-b107-e4ca41cfb5a9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9baa3a61-ed10-33f4-aacd-a7ca2bf713e1" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="8fb8dfe5-dffa-3a8f-b186-59d82f78e2e8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a7474ae-33a4-33a4-a144-1f4a41f2ff41" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="3469ba91-8092-3f27-ad23-84f8ab5ec504" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="159684db-02a8-3170-a239-6dfe0f91d337" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="4" auth="devtest" locRef="4" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="029b59a9-bac2-34ab-8de9-1e0775a30f5b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="451e5918-a0ce-3bdb-b9d3-879c5fd9928d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="de7da549-7553-3480-bdf3-bcaa10930323" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16c6c657-0ea9-3fbe-af19-2542c30e8005" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_2_8" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="28040935-8c24-31cb-a5fd-3a57ac27c837" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b8962c0-ba77-37e7-a7ae-cda82f86fa64" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="3" auth="devtest" locRef="4" rule="CODSTA-65" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="74ddd750-f981-3a67-b86e-6a14d4799a3f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42aef188-efd8-3a5d-8693-09630a67e45c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_2_8-a" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="a84ae2b1-6478-3808-b2ae-514b9b77406f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f07cc389-faf0-3cdb-883e-9edc8757ee2e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="1c68b0d8-afe5-394d-b88d-fe8828d8a1df" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acdccc4d-17e0-398f-8bfd-1223e60fea0c" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="0abedecb-6f8a-3909-8e64-9aca37d10891" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b75a2c96-8229-342d-86f1-7a879a50e3d4" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="75" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="75" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="5c68b9c5-d1c3-306f-aa7e-edcc653f1248" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8f22514-a570-30be-a383-38cc06e1e11b" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="75" goals="0," />
    <StdViol msg="The return type of the 'Controller_Thread' function should be declared as 'auto'" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="CODSTA-MCPP-08_b" lnHash="-391064646" rule.header="Prefer 'auto' to explicit type names for function return types" tool="c++test" lineHash="-391064646" unbViolId="ba0ffe46-fae5-32ea-b557-41b3c5df277c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d75ec4f4-9c77-3a8f-81d8-4a90ac6c796c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="f4d616f2-f93a-3196-905a-b08e59cf19b8" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1e0e028-e922-3cc5-b22b-5fc707c1881f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The definition of the 'Controller_Thread' function is not preceded by a comment" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="-391064646" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-391064646" unbViolId="81faf00d-0088-3581-be92-a3565f717a32" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b43ee480-5043-3937-8599-84bd227b2da7" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="7c1301c7-8cce-31f0-bd8e-7157cb0477bc" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5915d8cb-34e5-3422-9f50-0a7f42929268" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="666d6612-d5a7-3ec3-902c-bff7aa1f3386" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f06384ef-b3eb-308f-a4f0-3f8274eb2d87" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-391064646" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-391064646" unbViolId="eeed280a-ab76-3344-9b18-f96d1d46c0d4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70f80d8a-5166-3007-9b92-57900f5c4c7e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="b2d774be-5895-391f-90a2-81d648d10357" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83ca8a10-2a3d-3e5c-91d0-6b8b8b60f624" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="1603aa80-b70f-358a-8d66-54cea51a4980" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de42c0f7-aede-3dc7-a9d5-a9c742f1216f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="dc5508c5-b535-3249-adff-6859c6e90b78" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aaea1b24-b9ad-385a-8aad-79a9d704964d" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has external linkage and is not declared in the header" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-391064646" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-391064646" unbViolId="5d9311fb-5707-3be5-ae02-cb277f7ec981" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce0b028e-9ce3-37ba-aafd-1bfc18376c58" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="c55bf006-7eb0-363b-94b3-2637dd4051ee" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8769812f-b0b8-36d7-949b-407953b9ca60" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The name 'Controller_Thread' should be composed only of lowercase letters" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="-391064646" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-391064646" unbViolId="0a313f2e-e308-3371-852a-458aa535b047" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87219311-62b8-338e-8746-5cf890ecaeeb" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="-391064646" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-391064646" unbViolId="96573b46-b463-3dee-a594-30df151e1f8c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="880a7e66-b854-35c4-a303-f9815663e10b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="cc34aa8e-1046-34c4-b57f-7b27f83237d2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="803100c9-e91c-36c9-91fc-eadb38a7d22b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-391064646" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-391064646" unbViolId="b467d1f9-17b6-33c2-9376-822ead739f71" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47cc37e4-d230-324c-b81d-510ab6374441" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Global function 'Controller_Thread' is declared in global namespace" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="-391064646" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-391064646" unbViolId="c3628177-40c0-36ee-abfd-c6a1cc0e449a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="315480f7-d812-3c0f-9a64-4a29953679ce" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_2-b" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="cbdccc79-2050-3e1e-9bad-0a442f9b730e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95af34ff-7283-3231-8464-0bc265292da0" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Consider using 'constexpr' for the 'Controller_Thread' function" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-11_b_cpp11" lnHash="-391064646" rule.header="Use constexpr to declare functions whenever possible" tool="c++test" lineHash="-391064646" unbViolId="19fe7df1-88e5-381d-9062-8da61a129e83" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2df2c034-36c8-33fe-ac43-0a6ba32fc7d1" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' returns a pointer type" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-391064646" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-391064646" unbViolId="cf9eb944-6c17-3af7-adcc-36e8f05edbf5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f69db9ec-bc6d-396e-b9e8-49f4e67fa4d7" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' returns a pointer type" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-391064646" rule.header="Do not declare pointer type" tool="c++test" lineHash="-391064646" unbViolId="4863ef94-1f7c-35fa-926e-7fbab4c26187" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="312028f1-4481-3892-afd4-41b798190ad6" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="f9c94889-64a1-3bbf-9c2c-3af802e34ef4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba377fc1-e51d-3be7-a041-c6b729de3a4b" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-391064646" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-391064646" unbViolId="5b555785-25f6-3ae6-9c2a-17c6deeec8a4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="061adc78-21f8-33f1-b7d8-9d61b738efa7" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="COMMENT-14_b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="c328760b-de55-32f0-bbbf-cba6b9c203a7" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c579b0-a5da-3a7e-8133-33443337d2e5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-391064646" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-391064646" unbViolId="30b21f5a-ecf7-34b2-9abc-905f73361b88" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6a3c568-1b82-338f-8975-3750e5ed949f" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="647b1e58-dde2-3253-a6fb-3ef04e77199d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5677304-127e-3698-93c6-569ead53dcd6" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The 'Controller_Thread' function should be declared 'noexcept'" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-09" lnHash="-391064646" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="-391064646" unbViolId="87e81fe5-67c9-3b01-ad56-aa21e4a5235c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b4177d1-da65-37be-a859-32c57e65ef0c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has Cyclomatic Complexity value: 1" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="-391064646" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-391064646" unbViolId="00595041-a977-3856-8e1a-86338b883809" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0a87bf0-81ac-3da9-8bbc-e47a59e086a0" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Function 'Controller_Thread' has Essential Complexity value: 1" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="-391064646" rule.header="Report Essential Complexity" tool="c++test" lineHash="-391064646" unbViolId="05257317-c0bd-3e88-ac3b-9c83fa8c9f82" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d07343a-8967-3b8b-a816-4c2a641bb9d3" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The incorrect global function name Controller_Thread was found" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="NAMING-34" lnHash="-391064646" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-391064646" unbViolId="ddb9b598-5cc2-3f41-bd56-3a8ad58f3c9a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef17cb47-af83-32ce-8bc7-644e33bbbe01" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-391064646" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-391064646" unbViolId="6210de82-3e6b-3a1a-aa1e-093148b8e0ff" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c304ded-e081-3e7d-a57d-977471811cf7" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="78" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="78" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-391064646" rule.header="Do not declare pointer type" tool="c++test" lineHash="-391064646" unbViolId="f6c8e1d5-5f01-369d-b565-a15af6547981" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8602647-7a67-3ea1-822d-b54b93c60887" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="78" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="80" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="2111304760" rule.header="Tabs should be avoided" tool="c++test" lineHash="2111304760" unbViolId="5ba05fe0-a059-387f-9aa2-5ff7ef38895f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae26eb4f-340f-3596-b400-ae8f1cd72b12" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="80" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="2f1ab90e-9b3f-313c-8453-56cea79e01da" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="69f7381d-7f42-34a2-9656-371ad59d78cc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="80" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="80" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="2111304760" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2111304760" unbViolId="38f13418-80cb-3a4f-87bf-6a450bde75d2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9efa7a1-c5d0-34ff-9910-00a01c411dee" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="80" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="466607007" rule.header="Tabs should be avoided" tool="c++test" lineHash="466607007" unbViolId="b10900d1-c83d-3e33-a30b-dd23eb520a67" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0eac1e50-0f06-3cb1-b7f9-0ce9e94df5bc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="7eb9c9ec-471a-35a3-be4f-cbf5824c04aa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="455efd12-3dab-3f60-b292-802b0824547c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="466607007" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="466607007" unbViolId="6bacbe72-c3a9-33c5-87c2-00fae4411537" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97f1db1d-675a-32f7-a3f9-927195eaed6a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="3" auth="devtest" locRef="4" rule="FORMAT-25_b" lnHash="466607007" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="466607007" unbViolId="bff2f9cc-49e0-3053-93d3-1c2895805173" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2741b380-be85-341e-9776-d87b38d9d6c9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="3" auth="devtest" locRef="4" rule="HICPP-4_2_2-b" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="f49ae052-8357-3cac-a497-cef29bc3b44e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1643f040-7eaa-3d6e-a9e0-b1e9af295b7a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="4" auth="devtest" locRef="4" rule="JSF-183" lnHash="466607007" rule.header="Every possible measure should be taken to avoid type casting" tool="c++test" lineHash="466607007" unbViolId="d85a2157-edc7-3b25-a33a-55ad9c083c9c" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="854cea5e-1e5f-32d4-b208-4b8aa9c83aec" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Cast to primitive type should not be used if possible" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="3" auth="devtest" locRef="4" rule="CODSTA-31" lnHash="466607007" rule.header="Avoid explicit type conversions (casts)" tool="c++test" lineHash="466607007" unbViolId="725c72e6-09b1-30f6-973b-483f1f8a6553" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88c361dc-b90a-3fe7-b3d9-32b9fa478e1d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_2_8" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="679e8b81-7af5-3c8b-a553-363513b3178e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b811088-30bb-37a3-bb46-5dc21eb5dbbe" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="3" auth="devtest" locRef="4" rule="CODSTA-65" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="fedcfce4-d037-39d3-8a33-1d24e3584bfe" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cd2d6e5-1a26-3de7-b051-bf9bf9baf69a" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Do not convert an object with integer type 'int' to an object with pointer type  'void *'" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_2_8-a" lnHash="466607007" rule.header="An object with integer type or pointer to void type shall not be converted to an object with pointer type" tool="c++test" lineHash="466607007" unbViolId="7f8dcc97-77ea-3c83-8a27-a0be00467aa3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cba22204-a2b3-3684-85f4-01189721d7cc" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast is used" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="3" auth="devtest" locRef="4" rule="HICPP-5_4_1-a" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="ed557747-30bf-3915-857f-5342c2a08023" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb0231dd-f32e-3cd2-8d10-35c9ced9070c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast is used" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-11" lnHash="466607007" rule.header="Prefer C++-style casts" tool="c++test" lineHash="466607007" unbViolId="55b0c9a5-6bad-30ea-b0cb-dd41b6ffc523" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a80a9146-e788-37d1-9628-dd51aa846a56" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="2" auth="devtest" locRef="4" rule="JSF-185" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="5417131e-6d2c-3f70-a5af-7552f74b6701" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0334ae0-df36-39c3-8ec0-d8db9d7004cc" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A5_2_2-a" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="21d657d9-b2d3-397e-af38-c475ee5f1091" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e0a94ce-069c-3ab3-8b56-a6a0c2b80146" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_2_4" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="a18a77d9-9002-36dc-b823-6be3d596b690" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9b8938e-94f7-3893-804c-a799eeec7d50" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="C-style cast to 'void *' type is used" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-66" lnHash="466607007" rule.header="C-style casts (other than void casts) and functional notation casts (other than explicit constructor calls) shall not be used" tool="c++test" lineHash="466607007" unbViolId="3d360fc2-53fd-3191-8d21-9df18753989d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6f8a4b7-eef1-33dc-847d-62da54cd011e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="f270a0ff-e8f6-3a84-b60b-1085f69f5752" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="51927cf8-e440-3aab-a4af-2ac2935c1d37" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="130f1cc3-0a5b-36dd-959e-22c83b03e76d" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc822cc4-f4b8-3157-a2aa-614d336209bd" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="81" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="81" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="466607007" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="466607007" unbViolId="0285b97b-54b0-3cd6-af43-a61deae19c76" locStartPos="15" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ed71d2e-ba3c-3908-abbd-b6668c8c4400" locEndPos="16" locType="sr" hash="-1769734618" locEndLn="81" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="348867655" rule.header="Tabs should be avoided" tool="c++test" lineHash="348867655" unbViolId="7bcf3bc6-f17a-3f41-99aa-75f174bcf77a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8753e8f-2ca0-3d88-85a6-13a5dda86880" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="d24dd85c-959a-342f-a4f7-146e5d3da0f4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c273c3d-3649-3762-a3e0-150041c4752f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="348867655" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="348867655" unbViolId="207783ad-e5dd-3f19-8d54-db246f95201f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3326df31-18b0-3f30-869d-57e583b167a6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="JSF-062" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="348867655" unbViolId="fdfcc89d-01e7-3938-8b26-70aee053071e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01726747-c829-319e-91df-31842d775efd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The operator '*', used for 'velocityArray' declaration, should be directly connected with the type" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="4" auth="devtest" locRef="4" rule="FORMAT-32" lnHash="348867655" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="348867655" unbViolId="669623fd-82a6-3979-9f7a-d716b84a6dc7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="745bb0a3-db6a-3fb7-aee1-1d2d6da40109" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Consider encapsulating 'velocityArray'" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="JSF-207" lnHash="348867655" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="348867655" unbViolId="c8849b06-3fe9-3a88-8d7b-e7dbfb844a2b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b72a34eb-c55e-3207-b3c0-a9dd1e52f901" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Consider encapsulating 'velocityArray'" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-82" lnHash="348867655" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="348867655" unbViolId="0f4e3539-a341-3895-ae2d-482a065563cb" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4af5ec41-3ad8-3bd9-aeb8-ebebfdcbec0d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="348867655" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="348867655" unbViolId="524dd535-bcfa-3b75-991f-74f80b5e9362" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e3f25766-297c-32b0-bc76-c36c8095db64" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable should be commented" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="348867655" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="348867655" unbViolId="70ebeaa1-06e3-3897-a12b-2f8e2a3befc6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef1741b0-fa7a-39ce-93b5-42650a8274ef" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Use of variable &quot;velocityArray&quot; with static storage duration is not allowed" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="HICPP-3_3_1-a" lnHash="348867655" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="348867655" unbViolId="3ebb243b-10f7-3026-a5ac-ad231f3d10a9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8df1e5f-9f93-3037-a7da-1591f0230330" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' is declared" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="5" auth="devtest" locRef="4" rule="MISRA-022" lnHash="348867655" rule.header="Declare objects at function scope" tool="c++test" lineHash="348867655" unbViolId="806a8469-1532-3875-8767-73f0172da4f6" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6939f10c-adef-3f60-bdb7-517d695b76ce" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Naming convention not followed: velocityArray" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="NAMING-18" lnHash="348867655" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="348867655" unbViolId="4d60ab0e-dc59-3926-9e25-f146ee0c781f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6841984-a9d5-3ec0-be87-b9a43baf07e8" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' identifier should have the 'rg' prefix" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-01" lnHash="348867655" rule.header="Hungarian notation for array variables and parameters" tool="c++test" lineHash="348867655" unbViolId="de53f572-3b01-3d52-9e31-10c06a387356" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a463e0f-ed85-3aa5-be81-f66f53c28f3b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="baadfcef-91b0-399a-9678-ba288636acb1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ada1f604-b2af-3c1b-832d-c48064bb3250" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="2e15e44c-ae7b-37db-a505-55ae134894f1" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c5ce41d-d5c1-32d8-8953-d8a507970234" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="348867655" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="348867655" unbViolId="0d1d7b9c-32f1-341e-b87e-3829fc371fb4" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd82e643-8486-35d2-841c-2c1a1abe6e3f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="fe0a736a-f978-3368-8902-19a8c0c9f945" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb71b63d-e720-3d84-b9a9-5c47a4716a9f" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="65959c09-7e82-3958-a740-717117e2c5a3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42a3b571-03e4-3e25-b4e8-2cb244bbd3e8" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="5484b6d5-3835-38c0-83c8-45bd336d9c09" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93c6e4e9-41df-3251-9efa-660cef5c99f5" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Global variable 'velocityArray' has external linkage and is not declared in the header" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="348867655" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="348867655" unbViolId="2294f2d0-ca6c-33ac-afa7-a07f8efcb134" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edbf8510-931f-305d-9191-9c17de913fc8" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="0c8cfc48-642f-39ad-a082-288ae5d0bbf3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="52af4520-034a-3104-81bb-db7f7e01c319" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The name 'velocityArray' should be composed only of lowercase letters" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="348867655" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="348867655" unbViolId="262ee87d-9cf2-3736-9a75-3cdcad8599cf" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2eb4ca81-c8f3-3271-98f7-f014893d6034" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="STL-37" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="e8877929-de44-326b-8bf3-e3f3dd7af44d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b07bb02f-56a9-3cf0-a9af-9fc12f26acee" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' array should not be used" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A18_1_1-a" lnHash="348867655" rule.header="C-style arrays shall not be used" tool="c++test" lineHash="348867655" unbViolId="5d303a25-68b4-3234-b1d2-be440c14e28b" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="204790ca-8102-3a53-a7db-010f530a3be0" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="HICPP-8_1_1-a" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="33a7c556-9e52-3de4-a67c-f9ed733d3562" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a66460ce-0566-35c2-8080-66cdbd6a8f8d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Declaration of variable 'velocityArray' contains more than one level of pointer indirection" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="CODSTA-89" lnHash="348867655" rule.header="The declaration should not contain more than one level of pointer indirection" tool="c++test" lineHash="348867655" unbViolId="64b4270d-2181-31bc-b7ca-fe0a580caac8" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67529ade-10de-3e23-b70c-9aecd81cf777" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: velocityArray" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="348867655" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="348867655" unbViolId="16c875d2-863d-3bf8-9c7e-5d50449ec114" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cea33244-ab68-3034-b05d-b9f6aece1bf3" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The variable of pointer type is declared: velocityArray" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="348867655" rule.header="Do not declare pointer type" tool="c++test" lineHash="348867655" unbViolId="b633d69f-8b30-39de-825e-ebd1efc6ef3f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66013936-5fd3-3671-b17c-968799a9005e" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="898c72d6-dee4-3611-a751-073c52a9f7ff" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a0d3632e-39a7-38f9-b035-3be97a040f40" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="5303d0e7-c000-3501-b5e6-8b783548c24a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="20d06c08-d042-3b6e-a015-5edb659e4a5b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="The 'velocityArray' variable has only one use" ln="86" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="86" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="348867655" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="348867655" unbViolId="e070a8d2-cbbc-3892-b845-433f6e223ede" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="7ed2557e-d5ba-31ea-a7f5-d496d0adb5d8" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="86" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="465702038" rule.header="Tabs should be avoided" tool="c++test" lineHash="465702038" unbViolId="c9351e12-ddbb-3dc5-a1b6-d91d8cb73b8e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cebd1150-15f6-3688-a9cd-f1fe7a8edf85" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="06b61a66-9691-382d-b5c6-e7bd121c92d9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3973554b-e7e2-3a70-a458-dc75c8c06fd2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="465702038" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="465702038" unbViolId="a0963e40-843e-3f4c-98d3-9e24db47e212" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba0be60c-4fe6-30f7-ad4f-d87f9621e6d3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="COMMENT-14_b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="8342cb0d-c83d-36b7-9c6c-683f17e8ee96" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18121706-a8ea-347b-8448-1016ba9eb7dd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="465702038" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="465702038" unbViolId="80c2da72-87ee-37b9-9a92-7c74ef56f19c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f7d9b87-7b34-3f39-a1c5-c95d7797a26b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has Cyclomatic Complexity value: 3" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="465702038" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="465702038" unbViolId="57907821-f808-30cb-bc87-b3909561711d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9452b112-d412-3aac-b1a5-e17464860ec7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has Essential Complexity value: 1" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="465702038" rule.header="Report Essential Complexity" tool="c++test" lineHash="465702038" unbViolId="ee775550-9310-3bd1-b68b-9aaa92bf950d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50908aac-56a2-3858-a09c-388172f87b7e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The incorrect global function name Physics_Thread was found" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="NAMING-34" lnHash="465702038" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="465702038" unbViolId="d78b6c37-ceb5-311e-9ee6-b809423c7334" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="45cecd17-fa04-3391-9623-707f0e10f1f3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="99c75fb6-3b24-38b2-bffb-8a8b00d9beae" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="530f26ae-b91c-335d-a5b7-289cc01d4f7b" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The definition of the 'Physics_Thread' function is not preceded by a comment" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="465702038" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="465702038" unbViolId="f396a5bc-7760-3844-a572-1d72550870ea" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63e24a2d-c2b6-3635-bae1-fad864587b94" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="a6a64b82-7548-35da-ac74-e03cb0ae758e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa972570-48a4-38e9-97b8-412237e2ced7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="816d28e1-6437-3c7f-a543-f5d1f36b3b8d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16fc8b85-1ddf-320e-ac1e-d025a164130f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="465702038" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="465702038" unbViolId="93f39d3b-e29b-3452-9678-d97447f23dbb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a1fc77a-4400-3f1a-baa6-0907627bbbf5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="09fff6c0-f5ba-31ab-b085-60bf8c03b36e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16eab4d8-c20f-3e4a-93bd-7219970353fe" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="d11c1769-dd77-3e9a-ace5-65420435921b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce0b629f-8df3-3b19-ac94-b12b7f1ca600" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="d8397522-f09e-31d3-a3c1-a785bb6636fb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0de0f8f-ab39-3c68-b37b-9c08fadae89e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' has external linkage and is not declared in the header" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="465702038" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="465702038" unbViolId="6eb65094-98b0-31c6-b916-9499e01c98b5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2d7ede5-ec47-31a5-89e8-96103cba4c28" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="b2e69e49-7f02-3567-b76c-bd2b5afe3912" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ac3bdb3-5486-3956-af03-169c3f9d4750" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The name 'Physics_Thread' should be composed only of lowercase letters" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="465702038" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="465702038" unbViolId="5fdfd7ac-0faa-3752-b44d-10700869f525" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59995ffb-c09a-3fd5-8627-ff9dda1fc098" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' returns a pointer type" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="465702038" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="465702038" unbViolId="a1dfa23e-2d5f-3271-b1cb-bda5678821e0" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9b02bbe-5c8b-384f-ac6d-537cbc788077" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Function 'Physics_Thread' returns a pointer type" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="465702038" rule.header="Do not declare pointer type" tool="c++test" lineHash="465702038" unbViolId="a9e04fb3-2cb0-3478-a89f-19c338b185f3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d01dcf2e-d6a4-3342-9561-b44e890d98de" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="bfee3081-e4da-3513-9e8b-7339c62f404d" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa3c496e-581a-32be-b37c-612b30566e82" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="465702038" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="465702038" unbViolId="fcf10f88-4b00-3ec1-a8bf-c0c2ee65999a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e86b3bf-5409-3419-bf1e-c43545df4b10" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="465702038" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="465702038" unbViolId="c2a7a9de-4e26-369b-a12f-b50b7c0d8368" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="047cc6f0-21c8-3365-b66a-5ef2ab753ff1" locEndPos="23" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="88" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="88" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="465702038" rule.header="Do not declare pointer type" tool="c++test" lineHash="465702038" unbViolId="ed5e3471-ccdb-3432-a83f-70f1b8484544" locStartPos="22" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b77c21b9-ee8f-321f-9402-f4df14bf7bc2" locEndPos="23" locType="sr" hash="-1769734618" locEndLn="88" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 13" ln="89" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="89" sev="3" auth="devtest" locRef="4" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="d8456007-5b05-3bf8-b7f3-2f8f0c1b588f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1d455a1-94e9-35bf-b085-fe9879951ddf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="89" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="ddd0909f-f7d9-3651-b82a-25d67c088dee" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e47b908-b549-3565-9de6-d00c7b279c37" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="89" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="0d27458e-20c1-3725-ab37-569ce09de22a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed08bfde-af86-3451-8362-bc4a619561d0" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="89" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="89" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="98e34490-e7a1-3e42-a095-bd7b2a76f909" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="965545dc-55af-3467-9f2b-82b7c0470153" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="89" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="de2daf3b-077a-352b-851e-975084d42f58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfab2365-8e7c-387e-a3a7-e79a70460374" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="41e91bd0-ba19-3aeb-a6cb-96c4c170c4a6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1529db95-87a0-3282-bb60-ebd0b73cabcc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="3acabddd-3240-358c-98f6-8d5b4222112c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49fa7850-a32c-3755-8ae5-4555da15f960" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="3e252bd2-b6ae-3811-bb61-98f5bb0e7569" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef2ab0ed-75fa-37eb-a05e-be4f529299de" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="70eb5981-2166-32a2-a55e-410718328d28" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="080a6c5f-e0ad-38bd-bf27-acaffec388a3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="895d05c1-34b8-3f6f-8af0-2c02e41e79fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="374f753c-7c5e-328d-a76c-028d5900e843" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="47bf40a0-519a-3adb-bf21-d7d028a48ab0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="488d042b-8550-3673-ba96-ebdfe0312b47" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="58f67800-5adc-37cc-ac80-6041acd32e70" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3063885-3272-3bda-97a4-4c3d92c8642f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="aae2c149-c9fa-3e80-ac9e-e23b5fff8d4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bea64786-bf93-30cc-b252-d1bf79b64b03" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="c6134792-99e3-3c7f-a98c-b61e61902a09" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="304284d9-038a-3963-be14-0756c6bb7250" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="e687a2ba-c2ae-3ebb-8955-f1f9c7d0e541" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="894b789b-6d63-3870-85e9-e08adcc303f8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="6cfd0bd4-3698-314d-85f5-cb6d6d6b23c1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="704a93fa-87a9-377e-a604-013667b35e7f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="121ae4fe-89ef-34a2-8fb4-af551a0c94bc" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3579a571-e5d7-3061-8f7d-9bf8eb561374" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="3e0e2863-11c3-38c3-a93e-acaffc57b1d4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d09b308c-9b52-33db-9c6a-d5486e6b9c35" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="45079fea-cdcd-3b31-a95f-ea19e316e790" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63805356-8b1c-3f6c-bc74-c1d89d50c312" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="5b9c982f-efcc-38df-8b3e-82b92f4c9020" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bbf873ff-b5a9-3c75-a342-db9a93c67864" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="In 'Physics_Thread' function use positive logic rather than negative logic whenever possible" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="5" auth="devtest" locRef="4" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="9d24c45f-ae04-3f10-81db-ad663b67debb" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a074d8e4-bc99-3514-988b-523a148d43fc" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="90" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="90" sev="3" auth="devtest" locRef="4" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="212dd337-44f0-368e-9c29-1dc3d0878b09" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7e4773b-836a-3200-8de9-5dd8f8c590c5" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="90" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="9450da56-62f6-3e20-b0a6-b85cb98b84b4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85f8a7ec-f515-380c-9fcb-368ce345526b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="df2a73b2-8e97-3e91-b721-5c24ff864d07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e5e9210-f883-3e4a-9ca3-e65622b40ee6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="a0780409-66b6-378d-8f04-1b2cc78ec6ab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dcf36be0-513e-36c1-9c29-c8f59e408882" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="55382777-a911-315c-bbae-80c86e9d5d8d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bcf1c3d9-f3e0-39ff-895b-448f623af521" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="63d0d425-35b7-35af-b6f1-6d50a048cea5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04be1b9a-c8c2-3365-9684-c9d53976cb86" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="aaf8cdef-b522-31d0-89b4-0b93c8130943" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4013e24d-df59-3ab2-8897-8be2585ceae7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="34be1f08-dba9-35eb-a3d7-da7e96b6d1bf" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c43e25db-5c4f-3342-b8aa-0417484f5875" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="3dc8eb43-77a5-31a5-8bc0-e85b449f3443" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="737e0161-150a-3922-8ee5-115ae7f28a7e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="f013730b-3d96-3947-a401-c144b3e222fe" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f976911-720b-3b9f-98cc-c72a3403d534" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="1eb374c2-31d8-34fa-aad1-38a52f4f11a0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fa4e1b19-d9f8-3594-a5c6-c03b7b25112a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="cf6ccb99-b9d7-3e6a-b512-dc1cda5a611f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d374b04b-c1d7-3ccd-ba95-cb5cfb9dd36e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="faa15cae-b90e-3fae-845d-5d6964e663d6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1618ea69-9870-3454-9d13-6bed7af76186" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="d28ccbf4-b8d6-37e1-b0eb-a04415212f3b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6610025-0143-3384-8ee4-f83e3c7c0f29" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="e74e3afc-e74b-3fa6-9d22-7f66b03a4f1f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40f7bbb2-8c13-3d9c-8f18-99cdc42b2609" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="112e2908-f970-3fad-99e5-691869e5c390" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee65211f-5b2c-36dc-9db2-f8b5f05f2832" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="97f213fe-6a7d-3165-9ed2-32ee4ab72fbb" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5e70227-db65-3aff-9cb4-bb4a6daceb6c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="658a32be-b946-3ade-8a0f-2a87334a1b75" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a2a33e6-e985-3461-9af3-fefdacdde4cc" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <DupViol msg="Duplicated code: 'for(int i = 0;'" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="CDD-DUPC" lnHash="1544355218" rule.header="Avoid code duplication" tool="c++test" lineHash="1544355218" unbViolId="bd63dad0-775c-3606-9166-2d0aa6c6b841" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="f2184831-daa3-35fb-a151-841c1a0de70d" locEndPos="17" locType="sr" urgent="true" hash="-1769734618" locEndLn="91" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="3" srcRngEndPos="17" srcRngStartln="91" srcRngEndLn="91" desc="[Line 91] Duplicated code in file 'DeadLock.cpp'" rngLn="91" />
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="122" srcRngStartPos="3" srcRngEndPos="17" srcRngStartln="122" srcRngEndLn="122" desc="[Line 122] Duplicated code in file 'DeadLock.cpp'" rngLn="122" />
        <ElDesc lineHash="616861252" locType="sr" srcRnghash="1013754779" locRef="3" srcRngFile="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" ln="9" srcRngStartPos="1" srcRngEndPos="16" srcRngStartln="9" srcRngEndLn="9" desc="[Line 9] Duplicated code in file 'MemoryLeak.cpp'" rngLn="9" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="d85e4478-5b46-30c7-9e29-08789cf21672" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fda5372-0973-39f5-9dd0-ab93d04b47a3" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="349f186c-ac76-33dd-b017-4b5864d19e5c" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91828e03-8e64-3781-885e-c8ed5ffea1a8" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1544355218" unbViolId="5e152fa1-971e-385c-812d-36f19c033d61" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ad70a28-1064-3acd-a0a6-d1a41e98a8ef" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="a6f5331a-18d7-336d-a56c-316b317c2497" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87d27ab7-d576-3934-8022-4805372e78c9" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="6cdf5a9f-86e4-3e77-859c-b6f3e86061fe" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4d94e50-8f6c-3edc-8ab1-0c6222c763cb" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="1d9f93c7-856e-307c-9511-0aa00f9443f5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb38f0c1-5432-3f5c-a30c-3581343c3131" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="1dd27fc5-9a6d-38de-ad15-9b7d8870d990" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08f1a456-8e94-3357-b8ce-22cf82ca23aa" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="512c74ae-20cf-3810-8a84-616a967dc571" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6de9897-ab11-346a-b4f3-e5a44d9599bb" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="cce849f8-536b-3603-844c-54c55555bb70" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d28e2270-5956-3348-8f89-7a5804354a89" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="05c43a6c-cc37-30ba-bb46-29e35914f769" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fdaad6e-9619-3b43-84f8-b0db4795d042" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="8ed90b8a-dc51-375c-9ebd-a929c65a7460" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a617f2fc-3e6d-32a5-b476-0a147eb7bef0" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="5fe0bfe2-1706-38d1-80ab-c99dc501a352" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="415ad89a-57fa-3fc5-b594-16cfdcd4a0fe" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="9dc046e0-3288-3efd-acda-b876825f03d5" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f1462e1-46f7-30c6-a197-313de9b47c28" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="5bb8e7ca-0fcf-353b-8530-44a49f77b3db" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d689abf5-dfc3-3db2-9130-6438940a7f77" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="f7f17b49-1cc6-3c8c-9739-ef6d35689de3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12c4e0ef-6162-32c5-8519-0f1a62a95b93" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="1f3e0f93-3073-3d32-b5f6-74c2b324769f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="641ff00e-03d7-3d3a-8093-412ed60d034f" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="91" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="91" sev="3" auth="devtest" locRef="4" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="290ee1f0-246b-3794-abe5-e9804af6f8cb" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="869abc94-f141-361f-96ea-7347e33a8b15" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="91" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="f80f17fd-8b4c-36fe-b94c-fe80743e0702" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7a33b145-4de6-34e4-bcc6-78c6adb06a65" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="1ba7c7de-d22f-3a98-bc85-8112a6c29fb9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0481c56b-2787-3cfd-878b-d228beb2ede2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="5dd432c4-3214-3fac-bc20-82109e5ea6de" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="770ddc97-5d4a-3eda-9259-a6807677a3cd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="5591ade9-510f-3511-9487-5b8dab5501db" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6d8b0e31-8dab-339a-8e2d-41462d7ff289" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="143a99a4-da82-3d7b-970e-86b741791175" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="32cee5c4-7506-3405-9cb9-3d574c58b441" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="f143d249-b6b7-379c-9a9a-2d0497a01255" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e3e3ad6-23fb-3bbe-8530-1be16b7eee77" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="0c4860fd-cffa-3bc9-a9c4-77aab45d9408" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab5bca10-a2ed-3288-beed-076d1071662e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="120c3da5-2f16-3f92-990c-10ee87c54a61" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dfa33de8-f37c-3801-9c68-b054a60f6a95" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="4ecb1b64-a22c-3662-a404-269af65b9df5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="daa34d4a-b0bd-3bc5-b3ec-b437332a336f" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="2259ecb8-355c-3455-a330-84fee1eb56c6" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2df530dd-08f5-36d1-b629-24b606a22d0a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="5c430fa5-fcd0-31b5-8ad0-77bb3ea8d857" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3021c4bd-f015-3060-bbc8-02714092b5f6" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="a49cc550-a92f-303c-ade5-98fef848ea4e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b27ecd16-0a79-3610-b508-edde64aba0f8" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_lock' is called without scope resolution operator '::'" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-251104526" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-251104526" unbViolId="d18c7e5f-0016-3bd2-a01b-9faea871ff02" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="206cc556-9bc3-3c04-9991-ca14fc9e11f7" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="6b2f82a5-f0f1-36eb-9957-8bc6209cd85e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c475004-efa8-37ed-b115-6b2e4ca00310" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="ebea78b0-b261-3824-9bb0-11fe214fbb82" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eae7b951-6dbb-30ce-b44b-ad22852e5e89" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="e9d811f1-91a6-3b1e-8d7a-93bfe76f305c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="883a3c45-850f-3a91-a955-c4c06fdb6e97" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-251104526" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="c01ab43a-5304-3f3e-867a-72328c38f4e4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd1141c3-b7c8-34fe-913d-0d57641314d5" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="e8b2860d-823d-37f0-a678-176dc6dde5cf" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76b3fa69-879c-3c3f-b410-0a3e969e1222" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="ac33fdea-3f21-37a5-b563-2e689ee3f739" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="62d6ff75-13db-3968-90c7-b5640f66e97c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="1f3dee10-943c-3c70-8796-b4566eb9d301" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96dd29b4-6870-30db-b512-420051b2f113" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="629bd0d8-e963-3a98-9da7-200131c4b130" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb12bf63-4c81-36dd-a470-fb5294a3a325" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="3de4d4b0-38ea-3021-ab73-c16157797013" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ea069109-f05c-3feb-8f3d-956df0cd70a1" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="1f1a27d6-4a89-3637-9380-204074200ada" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5800f48-5d63-3973-a31b-82423b5842d8" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="6b398652-c094-3edc-ba78-aa0b370711c8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16aab9e8-a76d-3773-8578-83f61a31df7c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="6af1594a-d4e6-3a43-9fa2-58654fc9c657" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b02979c4-5f98-3b97-be4b-a33542ebe563" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-251104526" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="bf333908-bfd4-3ac5-b9f0-97f8c3b2418b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1997b94b-4958-37cb-8dac-656ab9cf32ca" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-251104526" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-251104526" unbViolId="ac5815f5-ac8a-3901-9b5f-966d25776d58" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68e01505-386b-3cc5-8e7b-3bb6f5d4ed04" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="92" goals="0," />
    <DupViol msg="Duplicated code: 'LOCK_ACQUIRE(changePositionMutex);'" ln="92" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="92" sev="3" auth="devtest" locRef="4" rule="CDD-DUPC" lnHash="-251104526" rule.header="Avoid code duplication" tool="c++test" lineHash="-251104526" unbViolId="daccdbe8-6126-35ba-8f92-42fa55558494" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="c61b57f3-bb39-301a-9a1d-e539d38c39ef" locEndPos="38" locType="sr" urgent="true" hash="-1769734618" locEndLn="92" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="4" srcRngEndPos="38" srcRngStartln="92" srcRngEndLn="92" desc="[Line 92] Duplicated code in file 'DeadLock.cpp'" rngLn="92" />
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="118" srcRngStartPos="3" srcRngEndPos="37" srcRngStartln="118" srcRngEndLn="118" desc="[Line 118] Duplicated code in file 'DeadLock.cpp'" rngLn="118" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="4de296c1-f850-3187-b1fc-3c996a919d9b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d830a62-83ff-32de-8360-71b26ed26e6b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="730a635e-8fa9-3f4c-8d02-a250dbdef348" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="01f74fdb-0192-3efd-8dff-e840e8c31f0f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="59a8fc2b-9071-3a58-b019-ac285a5ca4dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44e06c88-3076-31c2-9653-010716aec00d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="94" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1511312469" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="93" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-113188255" lang="cpp" violId="4f0dc270-fd49-3d39-9079-663f34260043" locEndPos="0" locEndLn="94" goals="0," locStartln="93" sev="2" locRef="4" tool="c++test" lineHash="-1511312469" unbViolId="4e881465-9ff2-3fda-8d34-ccd5b16b1826" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType=".C" rngLn="93">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="98" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="98" srcRngEndLn="99" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType=".P" rngLn="93">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="a7cc2508-1b45-304f-b3ad-b0660362a87b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9ef1477-9d9f-35e8-827c-51c709441079" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="2ccd5ac9-4e31-342c-b19d-5559cf392574" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f71fa91b-75dc-3be6-a378-7069481df440" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="1d5696de-5c6c-3fa3-9025-e92ea3b30f36" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="276cdffb-fa31-37c1-8289-76f7ed9ff510" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="5fff1094-89db-3f3b-8597-30d7836b18dc" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="080d83ac-676c-3f8e-9d9e-1ccc00786fce" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="b66a3be2-db2b-3bdb-85d6-64842c4d4af1" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee8bfb22-eaff-3ca9-860c-1ef235c3a359" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="dc5b9f8c-44d1-320a-bac4-fbf5f643bf39" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fce1ac2-9e62-3060-a7c8-7477ac297952" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1511312469" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1511312469" unbViolId="49e6bc57-7616-329e-af71-5e87cf8d7e10" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6730b8cb-56a3-31cf-bd12-40c4be49c4bb" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="b3162290-6f12-3f78-a90d-f016fb10f27a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17deeeab-0914-3370-adb9-98bd2be68ef7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1511312469" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1511312469" unbViolId="f2185d83-6ef3-3f45-ac28-33021d50dbc3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ceef4089-f8be-33b5-b81e-3389b584e71f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Variable &quot;position&quot; declaration was found in control statement" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="3" auth="devtest" locRef="4" rule="OPT-10" lnHash="-1511312469" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="-1511312469" unbViolId="1c379a08-18c8-39df-85c5-0a6e39523535" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aafc1e1e-0e7f-3796-bcb3-0e587d6383b1" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1511312469" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1511312469" unbViolId="cfc5b634-d36d-39c8-b692-3f617726c9e7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3be0d037-878b-31cb-8a20-546b9d13332e" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be commented" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1511312469" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1511312469" unbViolId="f5cec458-6e07-3e1f-a5bf-4ab55633aaae" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8923ec8-90e1-3508-b0b3-38abd69c077e" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Variable 'position' should be declared using 'auto' specifier" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_8-a" lnHash="-1511312469" rule.header="Use auto id = expr when declaring a variable that is the same type as the initializer function call" tool="c++test" lineHash="-1511312469" unbViolId="a60b4aa9-5a98-3250-beb1-e06c1e1ff63f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a579828-e894-31de-833d-8b297f746cfd" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="fa15b2e5-e2e3-3e31-ac7e-0d9f729fa592" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e80d7223-e7ae-3e4c-8fde-9033e74a33bf" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The definition of the 'position' variable should contain a braced initializer" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-38" lnHash="-1511312469" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="-1511312469" unbViolId="e5198754-30f6-3380-904d-4743ed0ddd45" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8c352da-7c43-3500-b027-f7b3005e54d4" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="The 'position' variable should be declared with the 'auto&amp;' type specifier" ln="93" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="93" sev="2" auth="devtest" locRef="4" rule="CODSTA-MCPP-08_a" lnHash="-1511312469" rule.header="Prefer 'auto' to explicit type names in variable declarations" tool="c++test" lineHash="-1511312469" unbViolId="3c0c04aa-79df-3b63-9139-9ba1b9c2f4f3" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e9829ed-de24-374a-ac3f-98b134414b27" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="93" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="96138bd1-30db-3763-9006-6e5c2dc32a87" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98943655-aea4-337c-8824-9acbdba9d740" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="864cd7bf-0da3-3968-9777-f2fa3e9f75af" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb14b0c7-3645-3727-8992-dddae37e1784" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="66d15b98-5cdb-3d19-aff7-aa9911e58a4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c12977b-3ab0-3618-86f9-94262fa18952" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <FlowViol msg="&quot;velocityArray&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Usage of &quot;velocityArray&quot; in second critical section" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="95" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="929435952" ruleSCSCMsg="Usage of &quot;velocityArray&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="94" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="189199709" lang="cpp" violId="accc3f7d-07c6-322d-b864-136124a1a6d5" locEndPos="0" locEndLn="95" goals="0," locStartln="94" sev="2" locRef="4" tool="c++test" lineHash="929435952" unbViolId="f63fcbeb-5c9a-3f40-a4bf-888a568301a8" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType=".C" rngLn="94">
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="98" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="98" srcRngEndLn="99" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType=".P" rngLn="94">
          <Anns>
            <Ann msg="Usage of &quot;velocityArray&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="a4b7d26a-03b9-3e82-acb3-76ccb3633e01" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24927c3d-a125-350b-ae54-0233e91edb15" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="7f8e6c77-3c1f-3e7c-9d4b-6cf22ee095a3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe569851-5575-30b5-bae9-462f6e1ea494" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="f15bbec7-4f16-3376-86c0-70c067b63be6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4f939ca-fd15-34f9-8fb7-45882852701f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="edb50697-7312-3d82-9314-b7eff1de2bf5" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="935509c7-725a-369e-9ef8-2ce9ccd8d3cb" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="6d78ebcc-4cc4-3bd1-a867-d89d022c5a93" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92631be5-c8ed-33c1-aad9-c532e6a865ac" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="e521cd87-fcce-39d9-8ee5-59cc003ea312" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa2eee27-6d1e-37b8-a270-827c20dd84c0" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="929435952" rule.header="Tabs should be avoided" tool="c++test" lineHash="929435952" unbViolId="66eeed68-173a-3082-b875-5ed9d2c858d3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa801894-cba7-37e4-86f5-12c9e53fafc0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="fe172aa6-ce1f-3a99-aa38-53c353570c11" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="596fb8d4-18df-3233-b0e6-61077c91d300" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="929435952" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="929435952" unbViolId="7105506d-4cdc-36a5-8bae-8969639cb108" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="278cd378-39c1-381c-b5e6-49183adc3388" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Dereferenced pointer type expression should not be used" ln="94" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="94" sev="3" auth="devtest" locRef="4" rule="PB-01" lnHash="929435952" rule.header="Do not dereference pointer type expressions" tool="c++test" lineHash="929435952" unbViolId="9470a3fe-0790-3ccc-a2b8-115f1f0c57cf" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5ae0e72-54fc-3e73-b368-19c16f7ea29f" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="94" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="1f00521e-e9d9-3654-bd0f-08928e2e289d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b21e2f6-17e6-3327-9c0c-02aa4c9d787a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="dbc77b1f-933b-3d62-8a78-def02057c29e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2dbea4c-9d85-3a28-9431-c1141a4c4c2d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="e72eaf91-801e-37b7-aa05-93e178ddd7b5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c313b375-50ae-3918-8f47-aad1ce019b50" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="96" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1599411881" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Physics" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="95" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-681850023" lang="cpp" violId="f02ae669-39ad-35e8-a1b5-5e6fcf96e52e" locEndPos="0" locEndLn="96" goals="0," locStartln="95" sev="2" locRef="4" tool="c++test" lineHash="-1599411881" unbViolId="fc0f0b25-0a65-3ded-a117-6e67524db875" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="ring.contains(...)" ElType=".C" rngLn="95">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="." rngLn="95">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming false)" kind="condEval" />
              </Anns>
            </ElDesc>
          </ElDescList>
        </ElDesc>
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="98" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="98" srcRngEndLn="99" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="98">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="92">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="ring.contains(...)" ElType=".P" rngLn="95">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="308f198e-25a2-3e7e-95de-86bdc680cce6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca1dfaee-a444-338b-8ddc-cf18b7c0e8a6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="7318dbc2-349f-3ee4-9b4e-3bd3e8c70ba6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="139a4d0e-50b6-3b05-bc0e-71106abce2b6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="3261e423-615d-3857-a111-50d693e9b166" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1808b13c-9f7e-3afd-9604-96c4efca568e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="a7d6360b-6002-334f-ba5d-4ee1661b1863" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0319d83-7515-3e67-8870-b2f2316e6b79" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="1cbe73e2-317a-304b-99b0-77a67c2ce8ea" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ba796d5-a1a1-3f90-862c-a03d919f1be9" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="3df791f3-4418-33c1-8898-80f2dd68d265" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75a91902-07fc-34e4-b961-62240662ee94" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1599411881" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1599411881" unbViolId="05884774-ae12-3581-8cb6-3e87274a841d" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7299aeca-6d22-3e19-940f-db2b1ce1f596" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="158fd0a5-343d-357b-b1f3-70e0d9d09c34" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f55f25c-9ab0-3e32-bb2c-6ad134e38796" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1599411881" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="7a561dea-2098-34ab-abaf-a386c816e83f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0e7f458-54cf-347d-9893-8ebb1df8eae4" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The global function 'assertion' is called without scope resolution operator '::'" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-1599411881" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1599411881" unbViolId="29080bbf-2d6f-32c7-b422-66d9e3025e76" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5e5928e6-159a-33fd-a947-4dc76bd3c435" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="CWE-798-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="68266cf3-13b7-3c93-bc0d-042e9ba5370e" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83e52c4d-c76e-3001-9e8d-e280c72a7f51" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="5" auth="devtest" locRef="4" rule="CODSTA-203" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="19bd9bbf-0240-3cd7-8247-f4eb209cccf4" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88dcaafd-0d2b-373e-894f-032b401f5a6d" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="1" auth="devtest" locRef="4" rule="APSC_DV-003110-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="ec2ff630-4145-318b-a390-873b2c37f485" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ad402b4-d878-3b02-abf2-2e0f844924c7" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal is embedded directly in the code: Participant is out of ring" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="1" auth="devtest" locRef="4" rule="CERT_C-MSC41-a" lnHash="-1599411881" rule.header="Do not hard code string literals" tool="c++test" lineHash="-1599411881" unbViolId="51f551b7-70bc-3ca4-9278-2f9367846977" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c152b7b1-2bcd-3c64-9bab-b426f422022d" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A27_0_4-d" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="7d1aafd9-aca1-3e9c-ac27-17a5d8fcf2e3" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06f1d41c-499d-3ceb-b451-4f2357f9fcae" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call" ln="95" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="95" sev="3" auth="devtest" locRef="4" rule="PB-76" lnHash="-1599411881" rule.header="C-style strings shall not be used" tool="c++test" lineHash="-1599411881" unbViolId="b7c9eb11-593f-3745-abc9-cbe08eaa320c" locStartPos="39" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ae92817-a00d-3f4c-bf62-ce68abd16b48" locEndPos="40" locType="sr" hash="-1769734618" locEndLn="95" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="c4bcb4b9-9425-3f9c-90b6-c550ab3cf660" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bcc399c-f313-3282-905b-502f976393f6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="4e56071f-2f03-3024-8744-03aba502ef43" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff7d2ce4-2664-3003-bbd0-3280038f3dc9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="904d90ed-1265-3fe9-9882-583bbd217b53" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b9a5dbe-8fa5-3d3e-a319-4e2a847c55c8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="23c90d54-8b64-30f1-93bf-39ec9fd8f2f0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f8efab5-7ec5-38ab-bb52-60a8949c6760" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="8b19d373-4a1f-32c3-a574-5a8854ba74dc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b88ef3e-9563-3050-afa3-90d59432e470" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="02694ccc-04b6-30ac-bd82-73796359c144" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d919aff6-f116-39d2-9220-062c99e76598" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="b1f996a7-63cb-354a-b4eb-7b3c7eb1931d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c0e93b4-28f0-3e57-b77b-294543f1012d" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="d12ad8fd-8d8a-3215-8602-74dba99f637a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6777279-92d6-367e-9ab0-2e5a914cb0f8" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="9522efbc-d920-3fe8-aeb9-3d2ab66f35b3" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92ed5869-5831-3e39-81e2-3dfe0a0d0f41" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="6af1ec26-dec3-3996-8e6a-ad0482845376" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd83ebad-6ccb-387f-b20f-1f21d88c24f9" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="bd45a727-ac15-3213-9349-370fa9623fdc" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de309967-ba5e-38d0-8498-adfafeb27e0b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="ed4cf964-74bd-3b3a-a5e7-8ad7d3bae236" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7c84d9d-2237-3882-a080-3e6801f5702a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="ba816964-fdc6-3d8f-b651-1c7c50df02a9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c4a2b9cf-24a7-3c7f-a53e-6401a8aab0e2" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="f130dcfe-3eaf-3742-8376-981a400c231e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="02248761-75a8-3f51-b60a-cc30bd23fbdc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="1250fa3d-694d-3fc5-acfb-6f9d92759e88" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ed53289-07bd-304f-b0c5-c8241f6eb9ce" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="f9f73d93-5aae-33e2-a7d8-49a3dbc87291" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2d2253a-424a-3348-8ccf-7290ffc5cc7c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="e2f8928f-8264-324e-b727-2202a59bc721" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1a06dea-d6ec-3228-9a42-e5e3d6f50e99" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="20a91e58-1459-30c3-8afd-0b126594c7bd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab73a0f8-ad2c-3a65-baa1-787128e783c2" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="6571137a-6725-3d01-bbe1-491c7c5a086f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c890ada9-9755-3762-b664-25f3397333f5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="06a372b6-3857-349a-9bff-825feb3ffc23" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9f6d96a-bd96-30c6-b855-bd298c14d585" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="41f23a57-3515-3fb6-b9b9-a9115c8d614b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3d453b2-3ce1-35bf-85a8-073d0599a45e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="90293023-caa5-393e-94b6-d3f6589e6ddb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d36881c-27ed-352a-80b4-8cc90da4398d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="051bf11f-0be7-314b-8421-baeaf166f2c9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94f68c78-c1b7-386f-b938-65a222b4fa3c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="6bac326c-ed72-3769-97b4-6653faf5589e" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="568a54ae-0dfe-3c99-a26f-193e5c792142" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="d86ddc48-2713-3873-b4d7-0406cf9f2536" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f8fecc3-73cd-3f06-b2a0-afd9cbe1ab80" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="15f01f1e-7e42-35d6-bf5c-3eb15416bba2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3f81841-892d-3e88-b84a-d6df16f4e5a9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="8cc21785-5b25-3b47-8389-1161e766c37f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d7e8bb5-e52e-3a07-b5a3-169bb3ba9da0" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="6a2b99a5-3a10-3444-a34e-8bf17d515d6a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8d62194-3fd9-3685-9e3a-3345d0afabc9" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="e5f345de-40ab-3dfa-94a6-271b312fd773" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21902b06-eaa9-3f27-acfd-42e5c97e897c" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="95847dc6-5105-39fd-b755-7b0d43b092ad" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3c7db234-26e0-33f8-8400-ef088ec2382b" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="d2ba732f-056a-3c19-98f2-6e30cd6f9044" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0510b10-2e61-3cf0-a2f4-b5dfbd2eb462" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="75aa38bb-7cba-3191-bfd8-e0c7cd10b494" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b332220b-b6f0-3738-9a9f-ec0847e07b0a" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="cbfe9089-dd35-3cb5-b3c6-e5cf24abaa40" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14a6f4eb-e8e1-3367-9188-7807cd158bfa" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="45336831" rule.header="Tabs should be avoided" tool="c++test" lineHash="45336831" unbViolId="a97b4769-2ab0-3539-9f4f-2ac52149befa" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4b895f8-8d99-3266-b280-5e9338dca2ee" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="d696e924-a12e-3494-b60d-80102a85248e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d117dda4-607a-3f5a-9b5b-2c5a484e7a52" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="96" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="96" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="45336831" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="45336831" unbViolId="0f50d61c-a2eb-3ad1-9fa8-19009b289c26" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b08193f0-9951-3d84-8522-29672914e732" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="96" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="ccef2950-675d-372c-9857-90f4863286d7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4caa767a-2fe9-3191-be08-0d0890d4b5f6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="1f45ceba-7dcf-3d86-8c0c-d4fa27b8c025" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cb5add6-d467-351f-a9d4-89a8b696432c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="0141328c-d193-3399-8b3a-627fd6506c8f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ffdd48d-6d48-3e16-9350-5c4712087485" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="3771ff12-eb96-3c47-9e6f-53de8c592c33" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d2c117d-9936-30ac-be32-643539e92d0a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="a0bea2ac-ae81-3320-b169-6209c1eda249" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4e1f53fb-54c1-3dd5-9570-960b57ab2a37" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="20edda4b-7bdd-3782-90ca-cd9bea1f537b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14ce1f93-eb9c-3b9f-ab4b-16968ac41845" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="523d9be2-adc1-369d-a687-83f7c28893dd" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7c2077c-64f6-3d85-8bd1-84f3290e6bb2" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="a82668eb-b614-3ace-aba4-8ca490792723" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed3c6f44-159a-3fbb-b09f-89badf3fc1d0" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="ac0ca433-66d7-3dbb-81a8-da3843ecb8ee" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="519e37ae-eb17-3307-9165-8f94bff72106" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="a2407848-02a6-3128-9b17-ebc04b9aa2b0" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97306833-a1bf-3a8f-b327-ca8d04461e0b" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="42b16868-3951-3810-82ba-11f38bd9d65f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bc26320-67bb-3b8d-b74b-9511572bf1d3" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="8df83132-74b3-373d-bfa5-eba1ccf5e1bb" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba7c0321-7d69-3f17-809a-79616b4dd950" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="cb04498d-3c7b-3f01-bd46-96d18d0ac008" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b9ef689-3038-36f9-a51a-59e7a94c191c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="d15afaf9-01d2-3fa1-9ffb-772e688274dd" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8482fa44-085c-39e3-ac7c-f73e14c8b70f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="5acc5522-7ac5-3800-9ae5-9bcee0d04fdc" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23c40e68-c4b8-341a-99fd-001a857f568d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="357ff470-71be-31e6-bd41-47f38ce2515d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d01c886a-1bad-39b5-bc6b-b6ee8aa45dde" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="49af1c76-5e91-3816-aeba-ddc1b883d5c7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e93c510-80c8-3992-a186-e6b0f5adab13" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="f720c256-3835-3494-9ce1-89f1046f1449" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0913cfc2-5c00-3ea0-980d-9a08a52d0ad1" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="2c9dca73-b61c-3734-bbd8-0d2626c0a2f6" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="619827bc-e889-3f93-94f7-7255845fdbe8" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="31fbd27b-51d0-30e6-971e-6e660cd30ba0" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9083a66c-dbda-32ec-83f0-fc5601331add" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="9be012de-fec8-38da-aab1-17ef29d87c2e" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d41dd001-7b10-3b03-9c62-63f40cc3e6f4" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="ac5f3e17-84df-3276-b8f5-3865448e0f25" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89593c51-506a-323e-a544-6856407b0608" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="a3d1cbcb-cf71-3e0f-ba82-964af7ef115a" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f79d4bf-35a5-3d0a-b57b-739dedc0322c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="2351922b-8cd5-3e1c-b9db-7a9272e8f220" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="291ff619-bba4-3d60-8d42-b6ece6b40498" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="42d79611-9d73-3eac-be5a-7744d59d133f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6726bbc-c05f-3ed3-be76-1689af4849ed" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="b0de9d8d-01bc-33a3-9979-9a017aeeb49a" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e392a1e7-0215-3cf6-b771-4c0f6c0a930d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="ffba3f51-6e70-33b6-897f-60de1ce3f235" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8971dee-030b-317c-917d-46ed3d01183d" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="01ace7b5-7872-3f12-bc28-ee6e63a81bb2" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a931c722-2266-3711-9f40-e27a6ee54d0c" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="8229aaf8-600b-3ec1-93c7-446a07650a70" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7c3e3f17-04ef-384c-86e0-1adf6a9fa657" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="07b887a5-d099-3fda-86a2-232f991deade" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a8e6580-1e34-39ff-9523-5d0ab958f11a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="c28321b9-38d7-3e96-bf90-11a66b4a474d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3d99aac-74d1-38db-9411-083f1a3e9adc" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="2048c57d-36c1-33a0-bb11-07b3e012eb3d" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67928843-df79-32d1-88a1-3c5be8cd224e" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="6eb2e2a5-30c5-343b-b6bb-bdae5521b016" locStartPos="10" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f9a4808-45d0-3fa0-b5f7-033e23d470d8" locEndPos="11" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1567381877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1567381877" unbViolId="39e1e36b-39b1-3de2-8e12-c15611785f98" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12ec8cfe-cb14-3302-91ae-4c5bd52b2cd8" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="6137d664-b7ec-31cb-99c0-72b9d79a21c7" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a090e27-4d81-356f-8e8c-3abeb0ea3668" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="97" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="97" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1567381877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1567381877" unbViolId="f2b83d2a-4b26-3eba-9a5a-73fe1a7aed88" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47ad5c6b-aadc-3494-b4a0-e9f2e7673f1c" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="97" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="265a17f2-9a48-3a95-8c73-f5f8be8567e2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cc538779-fdbb-349a-a2ce-4ada9e006e1b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="4981da06-52a3-3882-b4c2-e1e07a81c906" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8e4754e4-e149-39be-ba5b-a3d0a856d532" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="472362a3-ca04-3835-a84b-0c8b6e509874" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e032a061-1e67-39be-bc4d-81e1303c883a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="474cbe7c-debb-30ff-bd7c-132fe1857ce0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73124bb6-fc70-3996-9384-b056087058d6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="24dc7806-676b-3df9-8776-4be0db29e28b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cfcf004-42ba-32ff-965a-0398e5fe242c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="890fb6f4-7d71-3752-95b7-4d90d612e858" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cb8bbd1c-c2d3-3a88-9c16-41b6b8143d08" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="c24672b8-2786-3019-9a6f-ecebf3cc1cd6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="46c8f48c-beeb-37f1-ae0b-fb8a401497c2" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="27bb7b6b-d547-31e1-903a-8e8a36fdb1df" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7230f471-2a8e-32a6-bbfb-82c7a78ec59b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="257e0452-ac6d-341f-8453-5c260b4519c0" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44bb90f3-9b0d-3c3a-a149-1696b37f2434" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="81638477-7cdf-39ec-b836-9782c5bf4e72" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6963a82-c8cf-3d9b-aae5-7556c4b1084e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="1274327e-0b33-3bbf-ad39-5bbe2a7c44b2" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3aebd301-3233-3ad2-bc48-af851f2efa25" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="726d2d5f-2b35-331e-9481-5f30ad8c9a7a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="adfdcf80-b64a-34f8-914e-3f084898b658" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="793595747" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="793595747" unbViolId="2e8b32c2-6eba-3bdb-9cda-44712b82330e" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae3be350-d757-3740-8065-ba8692f700cf" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="cca2905c-512d-3157-8a1d-812e7bf59a62" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4cd1d87-1d84-36fc-82bf-5d1d407193fb" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="eb7fe977-116f-3ead-9895-617b0fc546f9" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b0fe110-1f20-341e-a728-384d1eca840c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="9f919990-1e52-3f70-aed2-75a8ee65cc66" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10edecb3-71a6-383e-ad5e-f2817a7af709" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="793595747" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="e9d444ce-da29-3f46-9324-e0de09ddd622" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2adf679d-7947-3a14-81df-90f8f14f867c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="ce677e30-20b1-37be-8942-fd7f626f97e8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="403b6626-e7af-3444-9efe-d0b6a9c0eee4" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="aaea05b7-50bc-3007-be28-c72d1073727c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55ccfad3-017d-358a-9b0d-68739a1f217e" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="aa93dd24-c780-30fb-8403-f7469e7d7403" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67001085-489e-3e76-9482-f1ad41e35488" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="11e2351d-fa54-303b-9d02-dd577ce89ec4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="697f263b-4b00-3f0b-9aed-47e95b1ed037" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="f232c174-b8aa-3b31-ad1b-61f1a262aff3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a55524f-bf81-306e-9ef6-c17dec0ee699" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="199a137a-143f-3d6c-9d83-38f716f0c096" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43a490ed-36c0-354f-ae5a-6be209b94c07" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="efeffa05-8bea-3121-aef8-3f35f7d2e7e2" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e065bfdd-50b0-396e-80b2-697907571bef" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="1bff88d5-3bfd-35c2-a6a3-109fa1889976" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad21b662-7ee8-3e3b-b500-4cdcfc6fec22" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="793595747" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="6bba491f-93fb-323c-b59c-1c7ea91f83d6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="941f3a13-35f2-3121-872d-f4ec6c83bd94" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="98" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="98" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="793595747" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="793595747" unbViolId="f320fd07-3e75-3bff-9dea-79bf1d9a3bb6" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7aaa0d1-b515-3ea8-ba56-03ba1b9fcf86" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="98" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="a191aad7-bec6-3352-aafd-dcf57449287b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1828afef-9dbb-3fdb-ae73-9423624f0687" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="a2bb8540-7b21-307f-b409-8b2044925033" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3511170-7dae-38b6-a9e8-c3e121a10eed" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="fec83184-7a12-35f6-a5ca-0d41177393d6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="294735d1-c61f-34f4-961e-187faaec8943" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="b9185e5b-d068-3b62-9fe7-32edf517bc0e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f0ad2da9-2ea2-3c59-886e-d8faf86ff0a6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="73981f93-e57e-37f7-bdd6-2732337bccc2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="336ab225-3253-381a-be4f-8ad92bca5f8c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="13a15abc-d1e8-395e-acfd-eb807415f343" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d89ebdf3-4736-385f-b371-b2c4cf4573ab" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="1afad863-196e-358f-af3e-a2c808a43668" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8078a2f8-ff7c-3298-858b-dd33e0c4b5c7" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="b199ebc9-f497-3cd5-b833-18f3f3aa75e6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09784733-b9e2-3a08-8404-cb7c36860b48" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="99" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="99" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="76acfc35-0df4-3100-b60b-725363eb7b4b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18346b21-a5fc-3c75-b93e-42897341fc00" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="99" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="6c3d28ee-ea03-3ef2-9733-d6f8390de797" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e573f068-2609-3ade-bfe6-575b5b44c95c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="83804413-258b-3fdc-9a76-27f85256fe4f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2596b947-69c7-361c-ab41-8cc48d8fe2e5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="fb64a256-c649-3c24-98ad-58027ba126dc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b65716bc-d928-3721-a999-24cec9ca28af" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="dafc0461-986d-36a6-ab0c-e54df503c0bd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b28735dc-2465-3dac-ac24-708f0812bef3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="3cc35915-0eb0-3ec5-b39c-deae052cde55" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf5e6718-319e-3eb8-b64d-986f3ce56709" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="ab02878a-f306-3829-abc0-3193001a3429" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e6fa71a-7951-3ca8-99da-c383eb025afc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="2c79ff6e-7961-34f4-8bad-21e0ad47c7a4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88dae80d-2257-3298-8fb6-acf72b74ab1e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="17dbb222-7b71-3ce9-9096-10f674111d14" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e05f1281-3c15-3e06-b44e-9e863abaa051" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="2af5acfc-ea3e-335b-8139-dab6b26bd158" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8b9bf49-1fe8-378e-80c0-a2a6be91c46b" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="The global function 'sleep' is called without scope resolution operator '::'" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="1234365944" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="1234365944" unbViolId="7d3785dd-0a81-3a0c-b6c7-deb1090a2acd" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a8f2b38-0e66-361a-a33e-3b7163ab9b13" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="5f5f8b7d-b77e-3856-96fd-7676d17859ab" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71ccfb74-ec5b-3121-bf78-ee9108096743" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="f50fdd13-6b18-357b-99a3-40ac6ddd1ffc" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06ab295a-f69b-3590-9d21-8cc753d7af47" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="edcc0bc2-a23d-31a1-886d-3912ed45f1eb" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76a17ace-9304-3a8d-9d52-21b857843356" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="1234365944" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="7335e341-200b-3487-bf2c-211f6a39c0ad" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2cf7fff-2b41-34d5-b4cf-5164d521d9dd" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="09f09642-c803-3986-8dd0-7a7b79132f4a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0835ba7-df64-3330-ad46-dc3a9c553f9a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="3f08550c-2c8e-3abc-96da-6c0b77983940" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ec402560-1ba3-3d3b-907f-4a1765ae4cd8" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="4bc9750d-df5a-3de1-bc96-eca4b9d1bd40" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c8d9bd49-4c7d-3593-8e62-02634b66cb59" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="34ee89cb-787a-31a1-b265-3571adf42644" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98daff12-1eaa-32a5-8e07-b35fc7a0dd28" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="52d57bfd-cbb1-3fea-a706-baaa700c8677" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2fedab8-06bc-313f-8358-33c0e1218d3f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="87cac177-b1d9-39ab-b3f2-1e68d44b1d70" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="afbb284e-fc46-39b9-8c13-e442bf108779" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="cfa6affa-e848-3c56-a504-7581b755affd" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17e51751-c3d4-3329-a71f-a8e2ba421452" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="849dd403-9ab3-36ef-9fd9-3389c4aa1bfa" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="971ef70a-93f3-316d-ab0f-9f2855e0517e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="1234365944" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="2e69bd59-a8aa-3b87-8361-25ea22996f65" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15eb9278-61dc-3ec9-a638-09c67b138ecc" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="1234365944" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1234365944" unbViolId="5d41e378-d411-3abf-ad83-6101484176b3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4d8a8c0f-e713-31ca-b44c-945b7f502dd4" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned int'" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="a45b6c7f-88c5-3aee-971e-91b88e05a1ce" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f2a16b4-aeee-331d-8251-b60ad1409442" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <DupViol msg="Duplicated code: 'SLEEP(STEP);'" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="CDD-DUPC" lnHash="1234365944" rule.header="Avoid code duplication" tool="c++test" lineHash="1234365944" unbViolId="c7c15563-c425-3050-987b-e13686ecfc6f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="0117447c-8239-3677-b8a9-84222389e370" locEndPos="15" locType="sr" urgent="true" hash="-1769734618" locEndLn="100" goals="1,">
      <ElDescList>
        <ElDesc lineHash="1234365944" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="100" srcRngStartPos="3" srcRngEndPos="15" srcRngStartln="100" srcRngEndLn="100" desc="[Line 100] Duplicated code in file 'DeadLock.cpp'" rngLn="100" />
        <ElDesc lineHash="1234365944" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="128" srcRngStartPos="3" srcRngEndPos="15" srcRngStartln="128" srcRngEndLn="128" desc="[Line 128] Duplicated code in file 'DeadLock.cpp'" rngLn="128" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="737d5481-3b77-3ccd-a3e6-d9087fabcfb6" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e4f10a6-449a-3a10-a39b-dd6f6b1adac3" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="425fb108-9d77-3994-bb69-d1f1ca7c9b88" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1170b30-f9dc-37c8-a9fa-73384abb1ed6" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="ddbd20e8-aefb-3a4d-a0c0-b27a9bfe1809" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c19fc35c-5cd3-3f24-aa9d-0a75f947afc9" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="100" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="100" sev="3" auth="devtest" locRef="4" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="cd6309a1-6ef7-3231-912e-b5d2f67e83cf" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cce764f9-19ba-385d-aa7b-100fcaf52215" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="100" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="101" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="2db9781c-1da8-310e-8f96-4be0cf9fc0ac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="981b9c8e-0fb3-39d4-a76a-3aa4ad5822b8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="101" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="9bd55563-fd3b-3ee7-b2f0-646b17e77421" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4956593f-d338-39af-b371-b4ac6d6f02c7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="101" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="1134e13e-9cde-32d2-8a27-5156f1bb20cd" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8671d972-0785-39ab-872c-cd9a2a0987f7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="101" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="0bb0dc2a-3506-305d-93e1-13fd8ac8f6d5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d359873-4997-3da9-b566-1eb6c6069315" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="101" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="52ac973f-e59b-324b-aed1-fa4c91b8472f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dba0b9b-25d3-3fc0-9b33-ce36b1bd4314" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="101" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="101" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="97a9f9f8-7f79-30ce-937b-c3c73255f79f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="88e7ae07-f138-3a30-9691-bf56bb876de5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="101" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="1adb33f2-a045-3ba4-b521-1e891716f66d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76016d79-1082-3bc7-b205-7ca0d9b6fd75" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="f1820053-570c-353a-b242-0cf550902b72" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="144786c6-cd61-3cda-b99b-c04ee55a8f83" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="2f133ad3-367f-34d2-8e17-f14589a646e4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72f64473-af26-36a5-b266-60c83314a846" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="60358283-124e-3b4a-ac6c-d1184013b4a4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f335a37-f1e6-312e-b5f3-e4619e7d6c04" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="9200a2d8-650f-3681-b48c-484862bae31d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="421ac1cd-5a6b-3598-992b-3ebd5c7a16a7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="f4b2f098-6bf4-36bd-a7ad-6363b88c1256" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="faddc59f-5259-3bb2-9b31-96783d2e3717" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <DupViol msg="Duplicated code: 'return 0;'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="3" auth="devtest" locRef="4" rule="CDD-DUPC" lnHash="-1688062501" rule.header="Avoid code duplication" tool="c++test" lineHash="-1688062501" unbViolId="30c6a4ca-7e3d-3a70-a70b-4bc5b23c5481" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="3c28e7e7-0f44-3aa9-9bc7-656a9033a5b0" locEndPos="11" locType="sr" urgent="true" hash="-1769734618" locEndLn="102" goals="1,">
      <ElDescList>
        <ElDesc lineHash="-1688062501" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="102" srcRngStartPos="2" srcRngEndPos="11" srcRngStartln="102" srcRngEndLn="102" desc="[Line 102] Duplicated code in file 'DeadLock.cpp'" rngLn="102" />
        <ElDesc lineHash="-1688062501" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="130" srcRngStartPos="2" srcRngEndPos="11" srcRngStartln="130" srcRngEndLn="130" desc="[Line 130] Duplicated code in file 'DeadLock.cpp'" rngLn="130" />
        <ElDesc lineHash="1599597842" locType="sr" srcRnghash="-1257393797" locRef="1" srcRngFile="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" ln="13" srcRngStartPos="1" srcRngEndPos="10" srcRngStartln="13" srcRngEndLn="13" desc="[Line 13] Duplicated code in file 'NullPointer.cpp'" rngLn="13" />
      </ElDescList>
    </DupViol>
    <StdViol msg="'return' statement should be used with parenthesis" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="3" auth="devtest" locRef="4" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="3dd8ef1e-6ad9-3c33-979b-6e1a9b55c869" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="202ce48c-678d-3c38-baf5-f3f06f3efef4" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_a" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="c71b8a97-6446-39c8-8094-c1d92094a2c4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ef4447e-4a17-3ae4-9801-c86440550ca0" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M4_10_2-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="a7024337-a2fc-3523-abcf-e781443385ab" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1259af79-4c38-3bfd-9d32-9287b6145b6d" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="2" auth="devtest" locRef="4" rule="MISRA2008-4_10_2" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="7ffa4318-d711-3ba7-bc1d-a76e550f2c41" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4b1e6c7-e714-3113-9904-2718d9507b09" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-63" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="ab8cc434-bef6-3f49-a3a3-180e760a3dd1" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="079f0335-dfbd-352a-9dd1-f2078ffd8349" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="fcf15fcb-b691-3e76-af19-5040ea1880a6" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="500335af-5dd1-3fe5-ae79-ce1e012d69e1" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="35d8d8ff-6171-345a-be3d-51126bc1bcc8" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9e33e74-c3ce-3add-b541-b63245e534ba" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="355a1758-afb9-3410-8044-5c53475420a7" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91c6990f-ef91-3411-b305-a7c3bae6d26b" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="6ab1b2bf-001f-341e-a5a7-bc96744e1d69" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b81ad905-88dc-31db-8150-57b3792f64ce" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="0047ed68-4d0c-335c-a432-9c599c78e143" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f9cf435-5eb7-3381-804d-1876cbbd0ad5" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="58e769b7-3221-3ad6-9c66-a05a69ccc7b4" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9d5362c-1dc7-3234-b180-374170876f95" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="102" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="102" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="ab04e84f-f011-3f96-930e-dac475411a13" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf0e9424-1ddc-39a8-93a6-55244fd68080" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="102" goals="0," />
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="93" rule="BD-TRS-LOCK" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="579201482" lang="cpp" violId="fc15447f-db6a-3b7c-8bd6-139aa1c2e5e5" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="1" locRef="4" tool="c++test" lineHash="404" unbViolId="6319beb2-6aba-31ae-ae1f-87119b6ca847" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="93" rule="CERT_C-CON01-a" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="530300502" lang="cpp" violId="e8f2fbb5-f203-31ec-a321-49b4a9cb3f3c" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="3" locRef="4" tool="c++test" lineHash="404" unbViolId="7f33da09-1c42-3d67-96b9-d4fcfd40d166" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="93" rule="MISRA2012-DIR-4_13_d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-1275301858" lang="cpp" violId="709ddd4a-00ae-3dc7-a535-d4fc87878eda" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="4" tool="c++test" lineHash="404" unbViolId="83cd2bf5-1e74-3948-9c49-2630516273ac" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="Unreleased lock: changePositionMutex" ln="103" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Point prior to which the lock is to be released" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="93" rule="MISRAC2012-DIR_4_13-d" FirstElSrcRngStartPos="0" lnHash="404" ruleSCSCMsg="Point where the lock is acquired" pkg="Physics" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Do not abandon unreleased locks" FirstElSrcRngStartln="92" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1738045475" lang="cpp" violId="dd04965f-0a9b-34c3-a1df-fa4fdb86e8ba" locEndPos="0" locEndLn="104" goals="0," locStartln="103" sev="4" locRef="4" tool="c++test" lineHash="404" unbViolId="9c2eb58d-4403-3e46-9c1b-24ffe1b74dda" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props />
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="90" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="90" srcRngEndLn="91" desc="while (!exitGame) {" ElType="." rngLn="90">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="91" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="91" srcRngEndLn="92" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="91">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="92" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="92" srcRngEndLn="93" desc="LOCK_ACQUIRE(changePositionMutex);" ElType=".C" rngLn="92">
          <Anns>
            <Ann msg="Point where the lock is acquired" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1511312469" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="93" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="93" srcRngEndLn="94" desc="Point&amp; position = participants[i]->getPosition();" ElType="." rngLn="93" />
        <ElDesc lineHash="929435952" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="94" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="94" srcRngEndLn="95" desc="position.translate(*velocityArray[i]);" ElType="." rngLn="94" />
        <ElDesc lineHash="-1599411881" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="95" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="95" srcRngEndLn="96" desc="assertion(ring.contains(position), &quot;Participant is out of ring&quot;);" ElType="!E" rngLn="95" thrownTypes="const char *" throwingMethod="assertion">
          <ElDescList>
            <ElDesc lineHash="-600547524" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="60" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="60" srcRngEndLn="61" desc="if (!condition) {" ElType="." rngLn="60">
              <Anns>
                <Ann msg="Condition evaluation: !condition (assuming true)" kind="condEval" />
              </Anns>
            </ElDesc>
            <ElDesc lineHash="1274881582" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="61" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="61" srcRngEndLn="62" desc="throw message;" ElType="!E" rngLn="61" thrownTypes="throwStatement" throwingMethod="">
              <Anns>
                <Ann msg="Throws an exception" kind="except" />
              </Anns>
            </ElDesc>
          </ElDescList>
          <Anns>
            <Ann msg="assertion() throws const char *" kind="except" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="404" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="103" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="103" srcRngEndLn="104" desc="}" ElType=".P" rngLn="103">
          <Anns>
            <Ann msg="Point prior to which the lock is to be released" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="103" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="b82b0bee-aa69-39a7-93a3-c49742e7c208" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="145d49ba-ab93-3893-bf5e-11b7b2429e4b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="103" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="627d45d4-ee2c-396b-a399-9d6933e8ee79" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d4f20402-8e75-34ef-a632-64d6f02d7e78" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="103" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="103" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="b1c9011b-f3ab-3aae-9886-d9a09fe11e5e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bea26a09-ed68-3c82-b540-a3626213cf24" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="103" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1765880527" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1765880527" unbViolId="d05ed0b7-ba47-3349-b63d-d43832cb1a21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c928637c-ae15-3721-b28b-fb7c912c6cad" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="0127db0d-f83a-398b-a43e-520a12dfb887" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d526ba22-86f6-34b5-9a41-437fee675479" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1765880527" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1765880527" unbViolId="6d5bab42-24ee-3d0f-b44d-f46c48222bc7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8652ed7f-0e78-362e-8b2e-2c9c069c4546" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="JSF-062" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="-1765880527" unbViolId="3ac10050-8b2f-35e4-9368-3152bf643ed4" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d8c5b96-f8f5-31e5-8c8c-b5a01b096a65" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="4" auth="devtest" locRef="4" rule="FORMAT-32" lnHash="-1765880527" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="-1765880527" unbViolId="a9b3c493-a52c-3eda-b2c3-24f66facde04" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2e15dc3-0dac-3bbb-b1de-84d27f058a08" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Pointer variable 'currentCameraVelocity' uninitialized when declared" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1765880527" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1765880527" unbViolId="eed487f5-2be4-35a8-98f3-6781e350abc9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="93040248-8469-39b6-9ac7-e1f505d079cc" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Consider encapsulating 'currentCameraVelocity'" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="JSF-207" lnHash="-1765880527" rule.header="Unencapsulated global data will be avoided" tool="c++test" lineHash="-1765880527" unbViolId="ec78add1-9cff-36ac-b01b-b682a6fe3c23" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2ccbc60-5ffa-3aa7-b132-5ce20767d6a9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Consider encapsulating 'currentCameraVelocity'" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-82" lnHash="-1765880527" rule.header="Avoid unencapsulated global variables (including variables declared in namespaces and public static members)" tool="c++test" lineHash="-1765880527" unbViolId="050848d0-c833-333d-bf31-cbf2a08c9d84" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87ac3a7e-bc3e-3b56-8fd5-6ba328c5b73b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1765880527" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1765880527" unbViolId="cb3e0472-7fd1-38fe-bcc1-32135d50ca2f" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dd33322-bf93-32b5-9b6c-bbcd070efdf9" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' variable should be commented" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1765880527" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1765880527" unbViolId="a96bf04b-92e0-395c-b8ad-55930debdcec" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f6e6bd0-73ae-308a-b479-77e65e022784" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Use of variable &quot;currentCameraVelocity&quot; with static storage duration is not allowed" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="HICPP-3_3_1-a" lnHash="-1765880527" rule.header="Do not use variables with static storage duration" tool="c++test" lineHash="-1765880527" unbViolId="d7f1e389-a875-3e42-867a-653d10afdf8d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c8a7567-8455-3e3e-a175-79304562c0dc" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' is declared" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="5" auth="devtest" locRef="4" rule="MISRA-022" lnHash="-1765880527" rule.header="Declare objects at function scope" tool="c++test" lineHash="-1765880527" unbViolId="b545a7c0-54d5-3267-b7a8-04938cbd26ba" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ab0ceb7-bddf-3d56-90c1-8caba612c235" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="NAMING-18" lnHash="-1765880527" rule.header="Begin global variable names with 'the'" tool="c++test" lineHash="-1765880527" unbViolId="ab882f67-7ffe-3a40-bd67-e776c7f64718" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9397f8b-20c3-3711-ae85-7d64bb6ee22b" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Naming convention not followed: currentCameraVelocity" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="NAMING-22" lnHash="-1765880527" rule.header="Prefix a variable type 'pointer' with a 'p' character" tool="c++test" lineHash="-1765880527" unbViolId="8f778055-61ef-305e-b39a-67e61f4f6741" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="334a76da-48ce-3167-b18f-347e4efb26da" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The 'currentCameraVelocity' identifier should have the 'p' prefix" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-34" lnHash="-1765880527" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="-1765880527" unbViolId="d6ec0c31-d7cc-37f4-b08d-b5d78e2e1fa9" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fe5bc1c-9539-3ee4-b4e6-a4f2ddbee991" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="3984f156-3a40-3023-baf6-2cb852533f0e" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5eab2a46-962f-358b-93c0-a502fb9cb42c" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="d6075843-51fb-3405-8b1f-621d53452c1d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d51e9b97-53ac-30be-9ead-b8db02a0bcbf" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-1765880527" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1765880527" unbViolId="75e9cec5-5794-3a85-96e2-18b7953d9b08" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="20dbffe1-7c3f-3983-9d0b-af3b0c36daca" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="7fdd389f-47ea-3d5a-b688-0d85a1f9fd5d" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c33b67d-f599-38d9-95e8-0bcbec994feb" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="9a5698f5-635d-3bde-bfe2-d814d322d8c3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e85f955e-499f-3590-bebd-4c3904efe7fc" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="59e76b58-81b7-3534-a288-95983711c493" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7333147c-7b2e-3da6-b731-681297d5eacf" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Global variable 'currentCameraVelocity' has external linkage and is not declared in the header" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-1765880527" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1765880527" unbViolId="2cb4f497-17ef-3e36-807f-15a1bab3ab61" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="682a3527-3266-3944-b2b9-da0f7b3f8f79" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="13d2f3a1-31f6-37d6-b8d5-8af612003586" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3d84b1a8-f7e9-36cc-bbb5-7e3dce04a963" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The name 'currentCameraVelocity' should be composed only of lowercase letters" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="-1765880527" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1765880527" unbViolId="0ac0c010-3399-3772-aee3-ffdd59491ec3" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c591af3-c58a-305e-859b-4f1bbe562ed3" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: currentCameraVelocity" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1765880527" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1765880527" unbViolId="d1832522-55a7-398b-8909-ec45797e37c2" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f283856f-ff82-3a3c-937e-8e90ff25cf59" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="The variable of pointer type is declared: currentCameraVelocity" ln="108" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="108" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1765880527" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1765880527" unbViolId="b8a524c7-92e0-300d-a894-3a212b054add" locStartPos="8" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1947f401-e1d9-370a-adfe-1bc972f7fca5" locEndPos="9" locType="sr" hash="-1769734618" locEndLn="108" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="2003669405" rule.header="Tabs should be avoided" tool="c++test" lineHash="2003669405" unbViolId="bf07517c-6d51-3097-9e0c-f42d84f93b42" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ed8bb1c-6134-3497-8070-ffa12ef9fc0c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="6aa4338c-afa8-3362-bc78-9e35120c061e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e8661cf-f960-3dc2-afb5-8b68b697d64c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="2003669405" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="2003669405" unbViolId="b2a21ae5-8b78-351b-a756-39c3cc66abe5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8bc3364-3454-3e35-b55b-771d4556ec1f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="COMMENT-14_b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="58b7cca6-8ea7-3fbb-918c-b4a00293410a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24cfe88f-8fda-3e93-b3dd-206c19f9d160" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="2003669405" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="2003669405" unbViolId="de0fa0f4-05a1-3a70-9a27-714cbd323609" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f8812fc1-d53a-391b-a347-f134a8041fa6" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A15_4_4-a" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="79ddd376-73e0-3ec3-a5af-517e595f652f" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a6a788a-8db8-3d01-8ff2-44f1fcdba8df" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be declared 'noexcept'" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-09" lnHash="2003669405" rule.header="Declare functions 'noexcept' if they will not emit exceptions" tool="c++test" lineHash="2003669405" unbViolId="f4a50819-6729-3258-8bb4-948f87bcb58a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3455e4aa-a545-3409-8284-2af838a3a757" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'draw'" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="FORMAT-28" lnHash="2003669405" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="2003669405" unbViolId="e897802d-858f-3ef4-998b-4f9a3b14f4a4" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b5a646d-a2ac-30c8-9fa4-c88ecab5843c" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has Cyclomatic Complexity value: 1" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="2003669405" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="2003669405" unbViolId="812b8d0c-21cc-3d03-8d99-5b751d939d91" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91cadb70-166d-3a00-a285-ec396eace687" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has Essential Complexity value: 1" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="2003669405" rule.header="Report Essential Complexity" tool="c++test" lineHash="2003669405" unbViolId="71a57cea-6e75-344c-bf90-54c233fbc38d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="834947eb-82a7-317d-9b83-331950361db5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Naming convention not followed: draw" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="NAMING-17" lnHash="2003669405" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="2003669405" unbViolId="0f5754c4-e814-3709-83f8-934db54bf112" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfb4f29b-376b-36bb-a6ce-5b548393a3ea" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_8_b" lnHash="2003669405" rule.header="All functions with void return type shall have external side effect(s)" tool="c++test" lineHash="2003669405" unbViolId="f0a4e51d-9f2e-3b2a-b684-feeb46ceb9b5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2c8e1a7c-1a59-3423-b3aa-f201de10189e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="OPT-32_b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="923319ae-24d7-3508-a4b4-7047be38e021" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ea75e13-cf29-3b68-9953-f6c463743f4e" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' is empty" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_8-b" lnHash="2003669405" rule.header="Functions with void return type shall not be empty" tool="c++test" lineHash="2003669405" unbViolId="637d44a6-f690-39d1-bb4f-7b305c404109" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecf9db45-63dc-385c-94ee-de4829452376" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="dda47ce4-894c-3daf-af67-e6a68691126b" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7433b20-f21b-3041-bc1f-998c10169831" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The definition of the 'draw' function is not preceded by a comment" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="2003669405" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="2003669405" unbViolId="ef26a269-8096-3c09-9593-9a2256c8d03a" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3fe6842-de81-3e15-a419-6ff2019a0d87" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="95e1771a-0e87-397a-8f98-4fd46131d1ee" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7151e8f8-ac0f-3300-85a0-603700c22702" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="05d92e67-3fbb-3a4e-9a34-11af80ab7f66" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75c5aa35-aaa0-3101-be9e-671d00f3cbed" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="2003669405" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="2003669405" unbViolId="d516e4fd-eb67-3658-8b12-65cf391e7743" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="73c67f32-1e65-37eb-8376-4c9cc4a49044" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="be50c7ea-4135-3a33-8fd4-e6500268613d" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a4d54b4d-9b03-38b4-87ec-c82012633634" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="67674ffb-a461-3418-a2cf-020b72e3e17c" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6501e629-4100-3cde-b2c4-bab8404bc510" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="e39bdfb9-91c2-3436-a8d0-16052c1587e5" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e321576-3386-3f1d-ac90-fade558f0624" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Function 'draw' has external linkage and is not declared in the header" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="2003669405" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="2003669405" unbViolId="0a339cf7-fed8-3ead-bbc4-0aa8ec710b52" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f7c25aaa-a87e-3a54-96f7-111061188ac9" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="59caf53f-f1a6-3ce8-8321-ffa9d6a6d1e2" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab257a1d-a426-33b5-b690-75bd4b0175a5" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'draw' function should be preceded by a comment that contains the '@brief' tag" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="2003669405" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="2003669405" unbViolId="13882fbd-3f59-3d64-bd0e-1584f67a8b98" locStartPos="6" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="758c47a6-ff55-3494-99cf-5f1651cda797" locEndPos="7" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="FORMAT-47_a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="7a75f0d3-022c-3329-bcc9-70fa81de0be2" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="787ffb7d-b557-3b5f-933f-eef4601a4eb2" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'const' qualifier should be placed on the right hand side of the type" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_4-a" lnHash="2003669405" rule.header="Place CV-qualifiers on the right hand side of the type they apply to" tool="c++test" lineHash="2003669405" unbViolId="5daa7f12-d6d2-3ec2-b5c0-14fab7719c80" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8f59e35-c714-3ad8-aaa7-f00824ec9776" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="JSF-062" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' will be directly connected with the type-specifier" tool="c++test" lineHash="2003669405" unbViolId="ba472fe5-d3e7-38ce-9658-a6aea9254815" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebc69055-c25c-313a-8d6b-e70e01515379" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The operator '*', used for 'object' declaration, should be directly connected with the type" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="4" auth="devtest" locRef="4" rule="FORMAT-32" lnHash="2003669405" rule.header="The dereference operator '*' and the address-of operator '&amp;' should be directly connected with the type" tool="c++test" lineHash="2003669405" unbViolId="24b006d7-963b-33a5-8521-71125d318849" locStartPos="23" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6c3c0b2f-9bb9-3be0-aa78-e9153c899d5c" locEndPos="24" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL00-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="41bccd8f-3fca-3f5f-96e5-6d9480c01ccd" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d1e1f6f-e1f8-3672-9a45-e6f322cb47e9" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_1-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="728b97be-4d64-363e-a274-9a79576e53a2" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="903822f8-3373-386c-b865-9fc700edb37a" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_1_1" lnHash="2003669405" rule.header="A variable which is not modified shall be const qualified" tool="c++test" lineHash="2003669405" unbViolId="03f3b115-3f9c-30cf-b0fd-f9d59103b130" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="772a2baa-fd15-3a4e-9181-859f915c6abe" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-53" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="25cfab3c-ad97-39eb-98b2-bd46316043fa" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="467a6af5-b782-3834-932c-320120ae44db" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Declare parameter 'object' as const" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_2-a" lnHash="2003669405" rule.header="Declare parameters or local variable as const whenever possible" tool="c++test" lineHash="2003669405" unbViolId="5e7f9432-3f86-31f2-ab8a-9b492cc0df01" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60c44b9e-6011-384d-921d-e59c42b2e542" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The 'object' identifier should have the 'p' prefix" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="NAMING-HN-34" lnHash="2003669405" rule.header="Hungarian notation for pointer" tool="c++test" lineHash="2003669405" unbViolId="7c72afb4-45aa-3924-aa16-dc268189f8ae" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b99183f8-f5da-3dfe-85f1-f997ec1305d8" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="R-828: parameter &quot;object&quot; was never referenced" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="5" auth="devtest" locRef="4" rule="PARSER-REMARK" lnHash="2003669405" rule.header="Parser remark" tool="c++test" lineHash="2003669405" unbViolId="a4a8ef6d-53cb-3ac4-86d7-9a7025ef2f9a" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5ca4d996-9af4-3ac4-ab30-8a4923579bd7" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="OPT-03" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="2c1a549d-881e-35a8-846e-e263f548b70e" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f06ec10e-862c-3254-9636-751ba1f4068e" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_4-a" lnHash="2003669405" rule.header="Eliminate unused parameters" tool="c++test" lineHash="2003669405" unbViolId="0f5fd285-eccc-3edf-ad61-4a80908e9b8f" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18d69bfd-b7c6-37ad-91f4-0dd6860c7337" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="OPT-31" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in non-virtual functions" tool="c++test" lineHash="2003669405" unbViolId="8766fe77-b201-321b-bf78-4cd573c0a393" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1da1e8c4-d98b-3bed-b306-a768ad8dade5" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Parameter 'object' is not used" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_11" lnHash="2003669405" rule.header="There shall be no unused parameters (named or unnamed) in nonvirtual functions" tool="c++test" lineHash="2003669405" unbViolId="c61734c8-b5e0-36ea-ba49-56d5d4495143" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="049e8105-f1be-332c-ae3d-d8535474f82f" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared: object" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="2003669405" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="2003669405" unbViolId="f877d3d2-2fac-39fc-b068-254113bddfdd" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="608967cf-7d11-3109-9f09-427bad23ef58" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="The parameter of pointer type is declared: object" ln="110" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="110" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="2003669405" rule.header="Do not declare pointer type" tool="c++test" lineHash="2003669405" unbViolId="114bdf1f-646e-3b4f-a0f5-29b1552d8221" locStartPos="24" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="38f88be2-5b43-3be1-912b-593c65757e31" locEndPos="25" locType="sr" hash="-1769734618" locEndLn="110" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="111" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="32ae9b3a-7ae8-3c96-80d0-16a4c778b81e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="253dd384-86de-3bb1-97ab-c9467d1572d9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="111" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="58e9953c-1a57-3481-a62e-690713bd78b7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f57f358-573b-387b-bb6e-d65c491e2dfb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="111" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="111" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="089755ca-0ad2-32ec-8dd4-a0fae04046fa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="28a51e07-c03f-3f88-b3c3-abd672df5297" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="111" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="112" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="fbb22e2e-4d54-3cfd-8a61-0d035572d4e8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66bb2a7d-64a3-33c4-84a1-366dfa54b623" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="112" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="54af6fc0-0b24-3b26-8a59-120a72d0e08e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="712635a9-62ef-3d75-9c2d-7b22ff86f317" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="112" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="7d5f9f1d-4013-3938-962c-95bf763b4727" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61e7bdb9-ec04-385a-857e-2f6b77346323" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="112" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1506270258" rule.header="Tabs should be avoided" tool="c++test" lineHash="1506270258" unbViolId="bc522434-7982-38b2-8789-5ed808a0914c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89ffbe43-482a-3ef9-8fe9-d849eb5d701e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="112" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="a894669b-3d5f-3505-8e27-db13507750d9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0fe078e1-f757-3323-af72-e9095cea9cbb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="112" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="112" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1506270258" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1506270258" unbViolId="251738da-0bac-3944-ba86-d839e7d2ab53" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="17020f04-6cd9-3e33-b7bb-3c0cd771623c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="112" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="113" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="c90fcc5d-8d48-3201-b4fd-75756113dbde" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cd48f859-1dd0-3731-ac76-e13eed8d81e8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="113" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="28f588cb-b6e4-3cb1-9c2d-0de5090a2b88" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="722422e9-f074-3085-b2ca-9b972a1e44d1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="113" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="113" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="e787c3c1-9990-3d04-b99e-baae79746004" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5064831b-60ac-30cb-82d9-b0f1d49f5b66" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="113" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1747693045" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1747693045" unbViolId="e67ebef4-c15c-3a4d-9367-090b7823139a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="003f526c-a253-3135-97cd-18bdd6a16690" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="689ade5b-ef8a-307d-81ef-4e6841d56320" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a8cc366-5d26-38f2-9f4d-da9712a499eb" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1747693045" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1747693045" unbViolId="784ba124-74e4-3c63-a56d-60fac8779896" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d99c3c83-332c-3e71-98aa-bc0168064011" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="COMMENT-14_b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="dd267938-86c0-3f3c-a69e-20a839a8ad51" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8cdbc3e5-60d7-386c-9702-097b9736cd15" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-b" lnHash="-1747693045" rule.header="Function parameters and return type should be documented in a comment that precedes the function declaration" tool="c++test" lineHash="-1747693045" unbViolId="173fee8d-c619-346a-9f2e-c211a7aa4401" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a9b08d5-1fbb-3b42-b117-3ecd4c80d13c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has Cyclomatic Complexity value: 3" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="-1747693045" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-1747693045" unbViolId="69936135-b4ec-3df0-8432-76c8e45ba272" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eacb65c7-d2a2-31d0-98eb-13716a6ff16d" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has Essential Complexity value: 1" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="-1747693045" rule.header="Report Essential Complexity" tool="c++test" lineHash="-1747693045" unbViolId="00fb4226-cdd6-3f66-91a8-af7b90d883fe" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee82ab75-e529-3c87-ab29-e525942053ac" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The incorrect global function name Render_Thread was found" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="NAMING-34" lnHash="-1747693045" rule.header="Global function names should start with lowercase" tool="c++test" lineHash="-1747693045" unbViolId="404ee775-041e-366b-a4fe-c7e826fd23bd" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="659cae6b-c988-3627-9a18-aff9a21bf80e" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="cbf8d4f3-255e-32ff-aca5-dadd9000baa7" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="909536a7-ebcd-3d0c-80d9-5f5dd080fdfc" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The definition of the 'Render_Thread' function is not preceded by a comment" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="-1747693045" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-1747693045" unbViolId="90805c3b-298a-370f-92a1-0593e7c69717" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7d75e8e6-a415-3cb5-b798-4592404e8387" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="07020af8-bde6-35f4-972b-a9b4ce4a75a5" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bdf0350-968b-3203-aed5-dae71212fbcb" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="c4ef10d7-d880-3b7a-916f-a691cec766dc" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8936646-7003-32e2-a160-27d4934ae8e1" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-1747693045" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-1747693045" unbViolId="c986acda-a456-323d-b7cf-0d165da939d9" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f07d94e3-6fac-3c1e-9375-02c615fe1a38" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="4593b698-25ad-35aa-844d-5f94ee651a96" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8c890181-3e26-3822-9a69-d70d3b476eb2" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="1f192736-a902-381b-9106-c0b9d83549da" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c21cf77-007b-39a5-9577-c955595f0dac" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="67e7a723-6bfc-34e6-902a-f46005fe3bdb" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47e55245-1570-34f6-8819-3f24375b523a" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' has external linkage and is not declared in the header" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-1747693045" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-1747693045" unbViolId="bd280368-3b1a-3ae9-ae4c-d0f6771e16c1" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f1033a6-52e8-30c5-b3a3-0b232d9a9357" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="726d7d34-4e7d-326a-9597-d3593f459259" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4e2bd88-f046-3d15-ae47-e113c4da53f0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The name 'Render_Thread' should be composed only of lowercase letters" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="-1747693045" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-1747693045" unbViolId="fb1ecd66-2ad7-3660-ab36-9520597e1d13" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6a272ac7-31ee-30f0-a113-4ad98f444af5" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' returns a pointer type" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1747693045" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1747693045" unbViolId="1bace512-14ac-3451-8b6e-856f66dac48b" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ad19059-6ff8-3d03-ab2e-9f60c28e4bf0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Function 'Render_Thread' returns a pointer type" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1747693045" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1747693045" unbViolId="2a406f82-0f82-3405-bfde-fb53a03cdc39" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31d67e3c-779c-3518-af5a-4160216c59d7" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="535012cf-2312-31ea-8f9c-15915f731e09" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b03e7ce9-462a-398d-9e8f-abbd58280c28" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-1747693045" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-1747693045" unbViolId="2ab81288-7023-372e-9fe5-38c6cd190eda" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0518468f-040a-30f0-98f4-f6675962a8dd" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The parameter of pointer or array type is declared" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1747693045" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1747693045" unbViolId="48ccb997-4c75-3da6-abdd-49c5d1186793" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44ae9345-318c-38c5-83f3-d9db026c1d50" locEndPos="22" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="The parameter of pointer type is declared" ln="115" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="115" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1747693045" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1747693045" unbViolId="058bf418-21b2-3394-9816-54d1684c6078" locStartPos="21" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ccf4260a-feed-3b6f-9610-c8ef09103fc0" locEndPos="22" locType="sr" hash="-1769734618" locEndLn="115" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="116" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="116" sev="3" auth="devtest" locRef="4" rule="METRICS-19" lnHash="402" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="402" unbViolId="ed3bae05-bc07-3ea8-b489-78d233ee80ac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eeea1728-59f2-3e0f-a876-32f3c3f8ec5d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="116" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="402" rule.header="Tabs should be avoided" tool="c++test" lineHash="402" unbViolId="90f74b5f-c6af-3c35-af96-15307240ded5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="454dd36e-321f-33ff-849b-6e0c9c6c4473" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="116" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="ae097c04-4fe6-39d2-bc9f-725342b0c328" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c2ac7442-22b9-3db0-a3d3-fb4081c1051d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="116" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="116" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="402" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="402" unbViolId="b08ea875-8dc4-30d2-a527-555dc3d1a005" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a16913f1-5dbb-3348-a332-c72de61f8add" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="116" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="JSF-061" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="f9597042-39b5-3dfc-a454-9f4bc23ac346" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7c29eec-96e8-3e78-9f4f-105d31a7ae99" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="FORMAT-42" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="0c839b69-7ee1-3947-bd04-6f91a28aa076" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c99ce572-b7f0-3fd8-b9fe-1bbf0e3efbbd" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="JSF-060_a" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="-1229452372" unbViolId="14249274-706b-3584-ad5b-eaf63cfc8dd1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8c3e67a-6b95-3f6e-b987-38990f985f12" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="FORMAT-43" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="3ef1e2d4-8a7c-35ec-b369-8fbe080d8eac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f02bae0-a4f3-3bb8-b5f2-bb8e673d49b6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="JSF-060_b" lnHash="-1229452372" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="-1229452372" unbViolId="4ae00c97-882e-3df5-9098-5c84a8ddf65a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f5d4b58c-8d6b-3d2c-b2a9-ce39dbe37988" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="1ee42fbe-ead6-3374-84f9-3a1ed44c167c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a6e9b31-20cb-313d-8cbb-f927c3b393b7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="6c6fc9d0-169e-3a96-a5f6-c5560cd45c71" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c35cfa7a-38f2-3eb3-afae-afbcf8447e24" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="49a1c010-dcdc-3472-a177-eeeafeb47db4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b00988c4-adef-3998-b2d5-41eea2116910" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="FORMAT-02" lnHash="-1229452372" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="-1229452372" unbViolId="6945532c-833e-3a99-b332-541e06724e27" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ed63251-6b83-3b3f-994d-d07e962891e3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1229452372" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1229452372" unbViolId="23cf1721-b5fe-3807-8f46-58f954deeed8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6b8327b5-499d-30d8-91f0-ac4206bb3e95" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="ea577bfe-b68f-3904-8d97-d0aae385dd63" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a3608860-ae99-3e6a-8bca-aa833c6bf980" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1229452372" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1229452372" unbViolId="014a130b-ae09-3505-bd68-50fb3b2447a1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1119363-4dd3-3f08-bf8b-aed047559317" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="CODSTA-83" lnHash="-1229452372" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="-1229452372" unbViolId="cb23d8fa-8b8b-3ffb-8f9a-2e06a3e12b57" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7da9e2e-438a-3816-a56a-3d946430fbf3" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-67" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="b599ea40-05e3-3599-8530-65d4ae5f1e62" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="21b6df54-5513-37c7-9b0c-4476cbb32e13" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_3_1-a" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="c8be2e64-335d-3e0d-8f6f-b421fac77353" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f5a9d34-36a4-36ba-89c4-b481b22f7193" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' has 'int' type instead of 'bool' type" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_3_1" lnHash="-1229452372" rule.header="Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool" tool="c++test" lineHash="-1229452372" unbViolId="0502870c-8a60-39d9-be8d-f1cccf36a6b3" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b330d130-f465-3c02-99c5-9cf170ab5d07" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="In 'Render_Thread' function use positive logic rather than negative logic whenever possible" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="5" auth="devtest" locRef="4" rule="CODSTA-46" lnHash="-1229452372" rule.header="Use positive logic rather than negative logic whenever practical" tool="c++test" lineHash="-1229452372" unbViolId="ad612fec-e267-3971-8490-96fb73977d4c" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="252d6982-67b9-3ef6-ba79-897495eb4d05" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="The operand of logical operator '!' is not 'effectively Boolean'" ln="117" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="117" sev="3" auth="devtest" locRef="4" rule="MISRA2004-12_6_a" lnHash="-1229452372" rule.header="The operands of logical operators (&amp;&amp;, || and !) should be effectively Boolean" tool="c++test" lineHash="-1229452372" unbViolId="81539815-efe8-3ce7-b10c-44beccfc9f36" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a06c912e-2ea6-3b73-bc53-fba0a707cc82" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="117" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="7c9120bb-671e-3af1-b210-22d6264859f0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49d6c19e-34db-342a-a378-7af5727549a5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="41a33301-cad4-397d-974d-cc6985251f9b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57c2be83-ce5d-361b-8a95-5fc77e6b4334" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="2b3264d1-55b4-30ac-ae1b-b4ac6eb51421" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac1dbd70-e8cb-39a0-b9cf-3f3b2706ab05" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="a62ba07f-0dc6-30bf-a65a-df817265cc18" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ad9f234-ebd4-35a2-8003-e60b252ffb9e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="9beb4607-deb8-3829-bfad-9a9c1044b3c4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3557e107-ac48-3675-8150-e22ae1193732" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="19429a1f-ad1e-3940-95d7-e1576a6196f1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b9fa428-93d6-34ad-8e24-6ecd94bb1e08" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-2061438629" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2061438629" unbViolId="a4502c48-e361-39d6-84c1-393a7180a944" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="681d2842-6188-3aab-85cb-c09243e70484" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="0b2fd180-2d92-3dbd-90e7-86b56660b403" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9971d013-231b-3ec7-9d4e-f8be11d50678" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2061438629" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2061438629" unbViolId="dc0c6959-2fbc-3506-8c74-aa8331ed07a4" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57767530-7f6f-317d-94a8-4a275bbe28d1" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_lock' is called without scope resolution operator '::'" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-2061438629" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2061438629" unbViolId="bc9ed306-68d5-3cb8-aa5d-9917c40033b6" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="41844b3f-342e-3c6c-9645-73c1dc6c942d" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-2061438629" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="6ac3d6b3-ed66-3394-ad43-186efd0f647b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d9d27d96-d790-326e-8cf4-2886d5fd1bf9" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-2061438629" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="22dac1c5-9d4e-3315-af07-9809a0bdef83" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5028cbe2-54f6-3624-b7f2-1586b88de267" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-2061438629" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="84284b39-b5c2-3c0a-b2bd-0a757efb1e1c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e9ab24d-0221-37f0-94de-7f993001c28e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-2061438629" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2061438629" unbViolId="393bc77c-7833-33a5-ad83-5978d97a7f22" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44c80b9d-5565-346f-b176-44aa8cf6698f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="7bd82ba3-163d-320b-afd9-3ca6db1daa27" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06cd8005-3294-3faf-8e05-e9e49dc096a0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="70bf8a07-e292-313f-a7ac-d4a065a27829" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="63c7bc27-cbc5-35e6-99fa-c60b377ec737" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="f2173e4c-613d-3441-abb0-d1c9a4c79ea2" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f7cefb4-8ef3-3baa-bab7-5bd15b7b7947" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="656395b1-cda7-3c1f-8dca-309d38f83fa1" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="562579b5-0b83-3256-b00f-91114d53d32e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="5e8bbc34-c852-3e92-8829-523bec10da35" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f92aa019-5a33-33dc-9491-b3d8a8f09d45" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-2061438629" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2061438629" unbViolId="f115ebec-24af-3752-85b1-5f09db59fa0c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0f80d21-370a-3fa7-a951-5f107141b2fd" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-2061438629" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2061438629" unbViolId="39c695c9-b61d-330c-a2aa-9d4dc2612439" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="60a9d205-3c49-3abc-bab4-090255efde5a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-2061438629" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2061438629" unbViolId="001eb4fb-0b7a-3bbc-b920-a22075d95c4f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="96dc808b-bdc0-3824-bfbc-dd48fe094c92" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-2061438629" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-2061438629" unbViolId="4ccec65a-e177-3638-b37c-ee5b7b8849f3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cf82ae6-439c-3a3d-a8cd-91b32967a89f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="118" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="118" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-2061438629" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-2061438629" unbViolId="732a2034-1034-3759-a49f-921926b8af0e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee18781b-27bd-36d1-80ea-1d6a0accedba" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="118" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="6246ceb4-a718-33f0-a077-d306a4a2acac" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cccd363-2de7-37ce-9b1d-9db01d6bf037" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="b7f4b467-c4ad-3965-a4f7-912e7a6bbc21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce63aa85-16b3-369d-bce4-bc81d9a0bc31" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="1ec72c9e-7d96-33be-a612-8e027b48e95d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b052885-41cd-3fad-8879-81322ebf3d8e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <FlowViol msg="&quot;ring&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Usage of &quot;ring&quot; in second critical section" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-1448027104" ruleSCSCMsg="Usage of &quot;ring&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="1933001540" lang="cpp" violId="56e4fcc2-dce1-3e92-a21e-1af12b0dcb1e" locEndPos="0" locEndLn="120" goals="0," locStartln="119" sev="2" locRef="4" tool="c++test" lineHash="-1448027104" unbViolId="242dec42-ad99-38c1-b3e8-245887847c59" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition()" ElType=".C" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119" />
        <ElDesc lineHash="-1016738356" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="120" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="120" srcRngEndLn="121" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming false)" kind="condEval" />
            <Ann msg="Not entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1234365944" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="128" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="128" srcRngEndLn="129" desc="SLEEP(STEP);" ElType="." rngLn="128" />
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition()" ElType=".P" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;ring&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="8437de4b-992b-30fd-9b24-f6f8295ee3f3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12dd91ce-c300-39c6-8164-dbddf1ffdabf" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="2e7cdc83-56d6-3098-8577-87f2a597fd4e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="089810f3-275b-3d50-b969-a80f0700697c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="29690c2a-5e0c-32aa-ac8a-912507275f34" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1f362e4-4055-346f-b1c9-2f5acade2ee9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1448027104" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1448027104" unbViolId="2d90c792-3bd6-3aae-b2e1-b843d9fba668" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c313bcc1-d75e-3095-af29-651bfb5cdd67" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="866474b3-a810-3588-ba38-7e7292c49fa9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33cd080d-f292-39b1-9df6-4f0d7cc0b226" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="119" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="119" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1448027104" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1448027104" unbViolId="12af431b-f992-3539-9bc0-af58cab87d5d" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="23006c7b-3253-39fa-b0bf-7191ce7ed16a" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="119" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="efb0ac05-fa76-3e20-b96f-9801cbbe0960" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31f177e7-dfaa-3fca-bf66-4a757d38ca2d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="4f0df9fe-dad1-3e05-987a-a4fecb02b8f2" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b99a1da2-8b1e-3171-952c-6973ef8ee4f3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="f7337885-f159-3b39-a175-a5820cf1bdeb" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48bf79f3-cab7-3431-83d1-7a6b92c6b975" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="ee2b7241-3c6f-3d33-bb03-6413dcbcab26" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e2b6e8d-bd20-3b13-af4f-b061b0a001fe" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="5d774545-a07e-3c74-87e0-627ee7e0258d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6867787a-0e7e-3a35-aaf0-02a44af124a4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="ccd35791-d4ca-3bfd-92a3-e7259367bb05" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ea559b8-2d99-39b5-83fe-5d661704333c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1016738356" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1016738356" unbViolId="2bb938cd-42b8-387d-bcc8-c13994532770" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a957365b-fd78-3840-afe0-75ea3fcf4102" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="47b1f1bc-714e-31a7-923c-daedf66b582a" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c39e33d2-e7a0-340f-a626-7e98568085af" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1016738356" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1016738356" unbViolId="47c73188-8463-3fd2-9f2b-4fb6f4a46d42" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b061232-7160-3234-a46d-fa7d722bdf5f" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-1016738356" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1016738356" unbViolId="adee909c-3e4f-38af-93fa-9c5f301bfbe7" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8fe2e07-418e-38d8-959e-18dd7f68b74f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1016738356" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="81824073-f18b-3f99-b97f-ab8fb974d0e0" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d6ec9b2-9a1a-3f5a-ab9d-7ba6129190eb" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-1016738356" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="13c8690b-e85a-35c4-b943-55bd5fbd9751" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="35df1571-665f-3f73-8818-53a79949bc21" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1016738356" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="5ec3a68a-be68-3258-8977-7bc9c0556975" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae772a7f-0433-3efd-be8c-82f8f46deba4" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-1016738356" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1016738356" unbViolId="45f3080b-39e4-3bdc-a153-8318083b4ef0" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4e1633c-cf41-3d33-a42e-3e380fbe1309" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="576a88e1-ce95-3fb8-9ab1-2b5e324296c8" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4248b881-a960-3dd8-96d1-5745e9a3dfb1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="a2f9e727-0f91-3a88-ae88-2cf4ea8c8ff3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5fc84c6-2f97-3e75-adae-7b28d97e2eee" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="955b041a-37e5-38f2-a2a9-945c0c6729f5" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecd5d322-695a-375c-8f8d-cf428ca929dc" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="14335f7f-b710-3c0b-a259-1de49e42d71a" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1bd7c349-45fa-3009-8a91-71e794c2768e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="9607cc33-9dc3-37db-a7ad-10016e3cdad1" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9cb0a75-549e-3f47-8a55-1b7e3d8587b7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1016738356" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1016738356" unbViolId="e6b60577-3a0c-36cb-ad15-9196ad861a85" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a663acd1-6b25-365b-bcc4-f4ba7270c3f3" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-1016738356" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1016738356" unbViolId="3f358247-b911-356b-bb19-062a529efd9f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a141e45a-ac23-30da-ad0a-d1b0d65dbf2f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1016738356" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1016738356" unbViolId="6699d753-7b4b-3f63-b3b6-e1a24559ff0e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af5d5e6d-92a7-3b69-a657-3f2f7bae7c4c" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1016738356" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1016738356" unbViolId="00789cec-b4f1-3755-bc0c-15f60484eeec" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1cb00f0-8730-311c-91a2-66f3713092cc" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="120" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="120" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-1016738356" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1016738356" unbViolId="f8923e27-659b-39ee-9e3c-4fb7fe8dea20" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ac1aa1a-f8a4-3a2b-9c52-bb3381fe2eab" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="120" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="JSF-061" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="6b41c4c1-afb5-34a3-aef4-935258555db1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="89c88f0f-c002-3d49-b913-41682fc437ab" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="FORMAT-42" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="00934fd7-469b-34e0-ba3e-81e369f4ec41" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acd30e0c-8e83-3db6-bd40-b7e2d9150128" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="JSF-060_a" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will have nothing else on the line except comments" tool="c++test" lineHash="1544355218" unbViolId="4fc7d806-fea8-34a7-99ef-338de4957947" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ffdad75-54df-3d52-9189-a2afdd1f56c9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="FORMAT-43" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="c96c1b58-b644-31ad-8926-35c863804c07" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f34f9f9d-3016-3b24-96d7-86cbb049f351" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Opening '{' and closing '}' braces are not placed in the same column" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="JSF-060_b" lnHash="1544355218" rule.header="Braces (&quot;{}&quot;) which enclose a block will be placed in the same column" tool="c++test" lineHash="1544355218" unbViolId="085e8114-d46a-34e7-8a81-20701f181da1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8259fec-a5a0-3eb2-96f5-8c63304025be" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="08f46e7c-22c3-3fd1-b7d8-62f15ca0b51a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f4b45d77-038e-327d-a06c-22875a1d8b32" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="462e2936-3bcb-3842-8beb-12768c248c80" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70bec43a-c2f4-3c99-914d-d33af42f800f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="f6e66621-af47-3220-a3fd-05f912fef4f3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9cb88b7a-d53c-37ff-96d1-e07602b7e456" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Put the opening brace '{' on its own line" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="FORMAT-02" lnHash="1544355218" rule.header="Place an opening brace '{' on its own line" tool="c++test" lineHash="1544355218" unbViolId="9bc185f0-2c95-397d-ae8c-9824b6e788d4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b68dc582-b6f3-35bf-be3f-2e08a4ffd8e1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="77a9e6af-1458-3caf-8be8-558a12e25f29" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b862e80e-d2e9-30be-a8f5-a966ca8a8dbd" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="d960529e-194d-35b3-9839-dd06d1cfb1e3" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fe9f9e67-5866-3585-b629-e537c8c57862" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="821ff5da-8c00-3507-9ae9-873a59fb257f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee4e2bc5-74bd-3d8c-a26a-5c958da8ea2c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1544355218" rule.header="Tabs should be avoided" tool="c++test" lineHash="1544355218" unbViolId="c1f9012c-85e1-3613-9569-9b28adb35c93" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="be37d507-ca53-3788-a362-b0d603e993bf" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="dacf4ac7-c768-3f3a-b951-764afc08df2c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb5e6fee-1ad0-379d-ad7a-6b1e7601dd64" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1544355218" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1544355218" unbViolId="05c18a31-bc74-36a0-83db-706be2140f42" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e1994320-3c61-3377-a491-9c7d2ae4e74c" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="A loop does not have a fixed upper nor lower bound" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="CODSTA-83" lnHash="1544355218" rule.header="All loops must have a fixed upper or lower bound" tool="c++test" lineHash="1544355218" unbViolId="57252d1a-68bf-3f49-b245-51d6de7f6b99" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="762ad052-499c-3690-af0b-c92d1103a5ce" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="FORMAT-12" lnHash="1544355218" rule.header="There shall be a single ASCII space character between a conditional statement keyword and its opening parenthesis" tool="c++test" lineHash="1544355218" unbViolId="b4f719b6-0167-3a00-a912-c5b7e6888646" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25b40425-d8b5-3d23-a7e1-7d049435d57a" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="CODSTA-223" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="898e9130-2690-3886-8f3a-b1b92f05d824" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e6f3d323-a9c6-3e11-b62c-2e9bb967991c" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Use the fixed width integer type from &lt;cstdint> instead of the 'int' basic numerical type" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_9_1-b" lnHash="1544355218" rule.header="Fixed width integer types from &lt;cstdint>, indicating the size and signedness, shall be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="8ec7e8a9-168c-37d9-a2e9-de30b89425ef" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e860b20-5a8d-3b4d-80d8-cdc5d3ecc524" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_6-b" lnHash="1544355218" rule.header="Use class types or typedefs to abstract scalar quantities and standard integer types" tool="c++test" lineHash="1544355218" unbViolId="db4191ac-0951-390b-8470-8d38b744b685" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b23033bf-ce65-3e2e-bed5-0b9d4ac1ee06" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="4" auth="devtest" locRef="4" rule="MISRAC2012-DIR_4_6-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="30fc3f57-0479-32a1-86fa-60fc2bbaf6e3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="983ded56-97af-329c-a48c-d30c0c53a846" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="MISRA2004-6_3_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="57c871b3-1f20-3c8a-83fa-32923a8a1818" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ab60fe3-6ead-383a-81f8-c75125b1fdd0" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="2" auth="devtest" locRef="4" rule="JSF-209_b" lnHash="1544355218" rule.header="Typedefs that indicate size and signedness shall be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="096972f9-598a-3810-ac23-8229ea5e2b58" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b17c0435-7412-36db-8f1a-82df10411d90" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="4" auth="devtest" locRef="4" rule="MISRA2012-DIR-4_6_b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="cc9ebee3-e68e-39c2-bbad-cb3eb23e8441" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f275a3af-d45c-332b-b5db-40301e844e23" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="HICPP-3_5_1-b" lnHash="1544355218" rule.header="typedefs should be used in place of the basic types" tool="c++test" lineHash="1544355218" unbViolId="443764b5-f090-367d-8bfc-040202e31925" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc5beb42-4722-3363-9d89-d1ba8d70066f" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="4" auth="devtest" locRef="4" rule="MISRA2008-3_9_2" lnHash="1544355218" rule.header="typedefs that indicate size and signedness should be used in place of the basic numerical types" tool="c++test" lineHash="1544355218" unbViolId="1d044578-eecb-3e30-a613-9a58fe6c3bd6" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c31aa9d-2b88-3bc7-9ea4-f4775c833a96" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The basic numerical type 'int' should not be used" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="MISRA-013" lnHash="1544355218" rule.header="The basic types of char, int, short, long, float and double should not be used, but specific-length equivalents should be typedef'd" tool="c++test" lineHash="1544355218" unbViolId="e2889950-3e4f-3b77-8c9c-7b14b4f46ed3" locStartPos="7" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="54468d1c-00ea-3118-9d3e-0f7e124936ab" locEndPos="8" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="'i' shall be declared as unsigned int or signed int" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="PORT-13" lnHash="1544355218" rule.header="The type int shall always be declared as unsigned int or signed int" tool="c++test" lineHash="1544355218" unbViolId="1aaa7433-d96c-380f-b5c3-b64bdcbd4a8f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5d37dd3-25c8-3561-8b23-2a2ad5165d3b" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Variable &quot;i&quot; declaration was found in control statement" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="OPT-10" lnHash="1544355218" rule.header="Do not declare variables in &quot;if&quot;, &quot;for&quot;, &quot;while&quot;, and &quot;do while&quot; statement" tool="c++test" lineHash="1544355218" unbViolId="2c402ba5-abcc-37f1-9e0b-aa4b08e7022a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8408c161-3f3f-3829-83fc-06139d4999cb" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="1544355218" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="1544355218" unbViolId="d007ffe2-0623-33e6-8497-5e81d6bac01c" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="451f095c-5eaf-3ec6-96cb-e0d9ca852bab" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The 'i' variable should be commented" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="1544355218" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="1544355218" unbViolId="e601a089-4c33-36e6-9b4f-6319a0d95361" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="187f92b0-9f15-380c-a4ed-09ffb7531894" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A8_5_2-a" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="f3162e8d-a92a-30ee-bca9-1e4a3b496d2a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c71f27b2-90d7-30f1-8675-9673bf60acf4" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="The definition of the 'i' variable should contain a braced initializer" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="CODSTA-MCPP-38" lnHash="1544355218" rule.header="Braced-initialization {}, without equals sign, shall be used for variable initialization" tool="c++test" lineHash="1544355218" unbViolId="79e7138a-fb5c-35a6-9cac-1aa25ea52c1f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0d5c5587-e021-3940-a5c9-a89b00d28c11" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Postfix operator applied to variable 'i'; prefer prefix type" ln="122" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="122" sev="3" auth="devtest" locRef="4" rule="OPT-04" lnHash="1544355218" rule.header="Prefer canonical form of ++ and --. Prefer calling the prefix forms" tool="c++test" lineHash="1544355218" unbViolId="9e85b47d-e316-3bba-8be7-a40a73abf3a9" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="406bb4f0-4543-364f-b26e-af37217c88ed" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="122" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="93835641-37a1-3685-afd0-f2dd0128f263" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9e11350-b8ad-31ee-b99c-e98d1b602fa1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="18cfdc15-342c-3aa8-870b-4a91e70c15e3" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cd5920a-5dd4-3afa-87ce-aad9e7c37f3b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="7aae3cfb-dbb6-3e28-afdf-b299858e5b4c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f734f8f9-7466-3c28-973c-cdc196774d86" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="16fd9cb2-2808-3de3-90fc-8fde9ecf7f52" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27e7a40f-4f65-3127-a80d-9711fa576138" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="2052cec8-1e74-3c78-b641-5e35b4d11ff5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="446de45a-e457-3870-ad57-67a5c3d5a205" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="42ce5dd0-52e9-3242-83f1-ebd2a3845867" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="817d71f7-b180-371f-bd0a-297a0418876c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="74173083-7f6b-386c-82af-478eba42c778" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="94eab89f-63a4-33a2-9d52-a04b4189f681" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="c51721a8-c6d6-3fed-a540-36a73eb4cd80" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1a2d65b-30bd-3d75-94fc-92c9336e9039" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="c1ea61a7-b88a-30f2-abf7-f44b21b268a6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37395d5b-31f5-334b-88cc-8b8dc0fd734e" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-251104526" rule.header="Tabs should be avoided" tool="c++test" lineHash="-251104526" unbViolId="d47bea95-08b7-3e45-914a-aa3b4fd060b8" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae80c06b-c796-34b2-8bc0-741377442890" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="278e524a-952b-38b6-b8b8-5fdde9315f0c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a013667-cc38-3e76-8c5f-3b3cfdc1b143" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-251104526" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-251104526" unbViolId="b4fc2b21-8636-32d8-8fa4-1c9dfbe9f5e9" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0bd45437-f1c9-3198-b758-c0a35946af7f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_lock' is called without scope resolution operator '::'" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-251104526" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-251104526" unbViolId="fc23fcf5-e8b2-35ca-876d-7ce32d2d01e7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3ca2476-3982-3a3c-8fa1-91fa82afec95" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="12341e7c-d806-3e22-833a-74b3d534925b" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bad23b7b-0d8a-314d-84ce-fdd0bdf2b1fb" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="23b1016f-3d69-38fb-b39e-d7b5977ce186" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f66ce44f-8dc6-35b2-9f85-72cce4d6d5db" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-251104526" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="e500b6e5-a4b6-3f9e-932f-95990fceb42c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0470519-0924-302c-98ce-d50060f11f5b" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_lock' return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-251104526" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-251104526" unbViolId="7621911e-daa0-3027-aba6-5f688fea30a3" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22905d29-d519-3958-b69f-f7a4c338830d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="fa1b1a03-75f8-3a60-bf88-de191eb80089" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03a109b9-9d2c-310a-a305-57a76f5a93ae" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="ffc472e7-ce56-37a7-a9d0-dcedf97a47b4" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3ad7a731-241a-3348-b889-73c93bea59f7" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="167398ad-c8d2-3620-9f25-3cbf0bb08ad1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6976107-01f9-3a17-b669-673dea76ad53" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="ed025a9b-25be-3b86-a58f-cd5fbe0ba491" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82776b8c-7e95-3939-bca2-2d1619adde98" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="01df9b83-1c03-37fe-a489-6a505b3486e1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6061fd8-0188-33b1-95d4-fe1a93e604f7" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-251104526" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-251104526" unbViolId="5503c4af-24cf-3486-923f-f6e226a0d84c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="862d622e-d128-3026-9cc2-2d0b3b7303ea" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="2dc47c97-4bdb-30a1-8221-aa6a4a7f5e97" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcb271ab-d0cf-3df7-86e4-c78df453c7b9" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-251104526" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="d47b65a2-0de7-3f1f-9c2d-765ff079b389" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5a3ba1b-d5f3-377d-b910-3723c944c68e" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-251104526" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-251104526" unbViolId="b702dfec-f522-38b2-b76c-6780bae5e304" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4061bd67-8c82-30df-8acd-ed5ecee66116" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_lock&quot; return value" ln="123" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="123" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-251104526" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-251104526" unbViolId="6eccc9a9-b9bc-32fd-9266-f701286ed909" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="084f4999-72de-3141-b7ba-0e9c036a879c" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="123" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="dbf3d422-3832-39fd-8427-78b6688ef3ef" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3dcddfdc-c2b6-35d8-9d26-5e4eaa7ff674" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="d853ae07-67d9-33e3-a140-b8ca1b4468a5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6de430c4-5d04-3b69-b65b-17002a9f2011" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="1eecd0b2-195c-38da-b366-e660ac4fe8e4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5e4d024-b721-3d5d-b88f-266c6c21f33c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <FlowViol msg="&quot;currentCameraVelocity&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Usage of &quot;currentCameraVelocity&quot; in second critical section" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="120" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;currentCameraVelocity&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="119" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-2013840605" lang="cpp" violId="53f11abd-ba32-3b6e-9e43-4c3b788fecff" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="4" tool="c++test" lineHash="-864998869" unbViolId="59fafef7-468e-3838-ad5e-008d20a4ea09" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType=".C" rngLn="119">
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1016738356" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="120" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="120" srcRngEndLn="121" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="123" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="123" srcRngEndLn="124" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;currentCameraVelocity&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <FlowViol msg="&quot;participants&quot; is used in two critical sections in context of single method, using one critical section will improve atomicity of operation" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ruleSAFMsg="Usage of &quot;participants&quot; in second critical section" FirstElSrcRngEndPos="0" auth="devtest" FirstElSrcRngEndLn="125" rule="BD-TRS-DIFCS" FirstElSrcRngStartPos="0" lnHash="-864998869" ruleSCSCMsg="Usage of &quot;participants&quot; in first critical section" pkg="Render" FirstElSrcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" rule.header="Variable should be used in context of single critical section" FirstElSrcRngStartln="124" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.flow" id="-656540360" lang="cpp" violId="c62da425-fab5-348f-8f99-c082bb44bac5" locEndPos="0" locEndLn="125" goals="0," locStartln="124" sev="2" locRef="4" tool="c++test" lineHash="-864998869" unbViolId="95afcc60-f1f9-3c73-943e-ed10ef217eb9" locType="sr" hash="-1769734618" causeLocRef="4">
      <Props>
        <Prop key="Tracked variables" val="Variable used in critical section" />
      </Props>
      <ElDescList>
        <ElDesc lineHash="-1229452372" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="117" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="117" srcRngEndLn="118" desc="while (!exitGame) {" ElType="." rngLn="117">
          <Anns>
            <Ann msg="Loop condition evaluation: !exitGame (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-2061438629" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="118" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="118" srcRngEndLn="119" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="118">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-1448027104" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="119" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="119" srcRngEndLn="120" desc="ring.getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="119" />
        <ElDesc lineHash="-1016738356" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="120" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="120" srcRngEndLn="121" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="120">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (assuming true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="123" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="123" srcRngEndLn="124" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition()" ElType=".C" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in first critical section" kind="cause" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition().translate(*currentCameraVelocity);" ElType="." rngLn="124" />
        <ElDesc lineHash="793595747" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="125" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="125" srcRngEndLn="126" desc="LOCK_RELEASE(changePositionMutex);" ElType="!" rngLn="125">
          <Anns>
            <Ann msg="Unlocking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-596932643" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="126" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="126" srcRngEndLn="127" desc="draw(participants[i]);" ElType="!" rngLn="126" />
        <ElDesc lineHash="1544355218" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="122" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="122" srcRngEndLn="123" desc="for(int i = 0; i &lt; participantsCount; i++) {" ElType="." rngLn="122">
          <Anns>
            <Ann msg="Loop condition evaluation: (i &lt; participantsCount) (true)" kind="condEval" />
            <Ann msg="Entering the loop" kind="condEval" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-251104526" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="123" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="123" srcRngEndLn="124" desc="LOCK_ACQUIRE(changePositionMutex);" ElType="!" rngLn="123">
          <Anns>
            <Ann msg="Locking: &amp;changePositionMutex" kind="comment" />
          </Anns>
        </ElDesc>
        <ElDesc lineHash="-864998869" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="124" srcRngStartPos="0" srcRngEndPos="0" srcRngStartln="124" srcRngEndLn="125" desc="participants[i]->getPosition()" ElType=".P" rngLn="124">
          <Anns>
            <Ann msg="Usage of &quot;participants&quot; in second critical section" kind="point" />
          </Anns>
        </ElDesc>
      </ElDescList>
    </FlowViol>
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="2a7a61be-1891-3e12-bb52-ad765edc42ac" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c46d6a63-609c-3827-9e40-a25cf7a1bbb5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="d53bbd83-fdd3-32e4-8cf9-85ce6c811901" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7f2bf4b-c0ae-34f4-8aa4-36f269322d09" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="e6b4617f-f59e-322c-96ff-ffb968b4d7fc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95188849-5f0a-3805-b825-3792461c3088" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="7fb4ed3a-7c38-3c73-9e31-9b32f228e1a9" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71f7485a-d78c-3ec9-9d32-cbe23558e5c6" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="6214db37-6faf-3b01-ac5b-6753042bf177" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9394ae95-273d-35ad-92f0-3fb15a14d759" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="573b37c2-49be-3bfc-8fe1-e846eefd889f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bae3177-0df9-3061-a659-0041ab783f03" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-864998869" rule.header="Tabs should be avoided" tool="c++test" lineHash="-864998869" unbViolId="fc0fc777-9c55-319f-9fc5-27e84c95b48c" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="942e7245-0639-39ef-872e-7a5c2a856445" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="4d482e38-9e67-33a3-b173-9a3432f6bd56" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5865a02e-b76b-3e96-9ca6-21b0dd4e2964" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="124" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="124" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-864998869" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-864998869" unbViolId="e04fcc44-5802-3320-8af6-1d2a345bc6ab" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2c03e3b-4a03-38a9-b59e-81e26872cdeb" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="124" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="8fdeea63-d341-3b34-bd5d-49f2d3d12eab" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0cdc1938-3654-3b7b-88a1-58973d9acd68" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="7806cc2a-4a2e-375b-a3fd-710d04213d21" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bdf2b3d5-ecae-3dce-a20b-f88794928d58" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="ffa38af4-ea32-3d36-a552-c149c67aa7a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="55847758-5859-30f4-8051-2690baac1871" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="4f689ed6-ee1b-3296-975c-d8f86610d325" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3df1dcca-5b91-3a8a-944d-fbbebef85641" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="310e6c67-e125-3944-bbc6-63cbc7a66a7b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="50d3bbd7-d70c-3e7f-8b98-320299179a22" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="202925b1-e422-3b9f-b94b-a7f395c82d2f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fde2b39d-7c0b-355b-8386-0fce567f4d79" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="8fa28586-69d7-3333-9459-71aa1d13c39c" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7034f40b-7fac-3291-92b7-8458d434c3be" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="b35eb72c-e299-3981-ad63-4f16d25240cd" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7f2d376-fa2b-3b8c-9279-9525ff050d5a" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="18d46b2b-8081-3e4f-b6ad-ba1ca74a984f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8648b192-8c33-3720-81f5-a2db565f4275" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="793595747" rule.header="Tabs should be avoided" tool="c++test" lineHash="793595747" unbViolId="4a062f47-f1f4-3cba-a9d0-6c90d3b9f84f" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="44bcce13-bf6d-3949-9210-5f10016bd9fc" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="67b493a2-ce97-3502-ac73-b4dc8abd4294" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="208ed362-f2fb-37f5-bc0d-2ca87c1f8bb1" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="793595747" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="793595747" unbViolId="2622d9de-479f-34ba-bd7a-7beb015b5954" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0551b77-18f6-3fae-9311-1332a41f5682" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="793595747" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="793595747" unbViolId="b09b2b9c-d883-303b-8dd0-b7167027a627" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e71a06f1-9959-313e-9e24-471ed8b80c5d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="8179e2ea-e7cf-3974-978a-fbecc5c3e015" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef7f7f02-4b4b-3db8-9491-249b965f982f" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="1fb5baf0-cfad-32b5-a7fd-ccf9622ebd03" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="99990bba-171e-3bfc-9977-42f04f15b584" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="793595747" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="e355b77d-321b-327d-b6af-78fb278d3517" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0f8cb92-0c60-34cb-ada7-c5fa21d0af20" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's 'pthread_mutex_unlock' return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="793595747" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="793595747" unbViolId="c3f5fc1c-68aa-31d8-8466-c70d1a88be5d" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="127cc618-8a2d-3994-8183-2313b5358bcc" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="2b0b6d60-c293-3ca3-8f62-a8431101305c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1ad8a2f9-fd42-347d-ac71-a237546522e0" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="aa408139-872e-37a4-b165-80bd9d190ae8" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b31acec-6813-3196-aebb-048803871bc0" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="9bd2aa6d-c52d-3ea2-bd8a-346e5ce624de" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e898849b-8b20-33fb-837b-2beba8c2b4f6" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="15361e36-5b32-37cf-8bc3-e4251bc0cfd7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9f79271-686f-3689-80d3-9df703884c37" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="caa85c62-85ba-3b56-86ab-c4ddc45be74f" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="228be3a3-fa08-378a-8477-dad03f651536" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="793595747" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="793595747" unbViolId="a8fc65b4-18e0-36c7-a4ef-cf01c365a05c" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="90d6a031-af33-38ee-815c-eef097625507" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="7ae63a0e-3d0e-3a73-9f94-a3bf650740a1" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e041f28b-b0c9-3a6d-b956-77406cae7dab" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="793595747" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="e515f48b-3c6b-3c0b-bbb3-7ff8bbf62882" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8525f7ad-74c6-34db-9075-6a81a9ba05e5" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="793595747" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="793595747" unbViolId="44f40550-ffce-3bf3-b9b9-f94c43b57db7" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4893ac3a-789f-3487-a8ce-dfa3f9c1058d" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_mutex_unlock&quot; return value" ln="125" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="125" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="793595747" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="793595747" unbViolId="daed1629-6756-3167-b049-a1af4703d102" locStartPos="4" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="287ae178-0030-3829-aae3-e50630ffc655" locEndPos="5" locType="sr" hash="-1769734618" locEndLn="125" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="2be85056-4d32-3766-ba1c-2692d0d8f2b0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5c34fa82-736f-3f35-b2e6-20876515cd8d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="91cc58a8-cd1b-338a-abbc-471567fdeeed" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b046454-4a51-3b4d-8668-16ab0046381c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="9580a594-426c-3ed3-bd79-60c9f6584aa7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0f00d48-6f6b-3f95-9da2-65410561994c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="9915e163-0b50-334d-acd4-c738ea9dff83" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a4d8d00-7a1b-3c3c-b39e-823015a89b7a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="91475b84-2895-3634-b2f1-fbb82a3abb2f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c96aee2b-7cb9-3777-a9d3-16ef85ab0493" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="18d54ec1-88c8-3b14-a02d-9564d4fb4eaf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fd3cb27-59a0-3937-9d34-4ed38955560c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="521ce8a3-676b-393e-9bf2-a14a44a39f9f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2b7b27e-b958-32f9-ad31-a49fea36d291" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="5082a2e9-d522-3db9-a717-4cc2f2e72ec6" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e950c2d7-aaa1-3fe7-b4f3-6b74c9ed7913" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="5ed67be0-f5bb-37c8-b628-2e408ff9cb53" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07138b02-8088-38ee-b214-c045024f2270" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-596932643" rule.header="Tabs should be avoided" tool="c++test" lineHash="-596932643" unbViolId="47420641-9959-33f8-aca0-68e721c9a508" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2bfc4d27-215b-31d9-bb2d-077a2093c6d7" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="16012fdc-75d1-37e4-9f8f-825033a43a2e" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="acba1d7e-392c-3a47-a35f-6710de0fafdc" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="126" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="126" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-596932643" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-596932643" unbViolId="68f8505d-8154-3782-a7cb-6c814774a31b" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d8072eac-ca62-3439-b831-6c787caa5fe9" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="126" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="6faad9f8-b508-3ec1-beed-d48b2a81b46f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b1dadd98-3bf2-3446-8c3b-06e62d4d7461" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="24ac2373-967f-3bcf-a1b4-21761c53da34" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef83a07b-b169-3255-a912-a3d0f6464534" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="b683b32a-d7f1-358e-af9f-ca3f97e69f98" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49492839-13cc-3a19-8b35-67b771bf0784" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="07f84291-95b4-3297-9473-13d9d161d66c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="527fc277-ff11-395e-b54e-ba479d5904bc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="4749e06a-55bd-3fff-8867-9b02f273e24d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e364b74c-e9b8-310f-a71a-732c551f2ef5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="224fe8a4-2af1-37cc-a2bf-766303c629a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b566c386-38a1-3f54-b5f1-3859ca6c42c1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="277172" rule.header="Tabs should be avoided" tool="c++test" lineHash="277172" unbViolId="08ce4808-d0ba-38f1-8929-9052c99e6935" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9df77f0c-e288-34b8-8507-675f46ce9bbd" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="b7cd5017-5479-3ebb-b187-0624db1ef820" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61ad538e-7f2d-34f4-8cbb-2d178a06f7ad" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="127" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="127" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="277172" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="277172" unbViolId="44677d71-1326-33de-94bd-1bcca2c14a22" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad005fb5-deec-3c47-aa3f-776f75c09dad" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="127" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="a03f52f4-8ca4-39b6-b204-e8cedca81e39" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3147dae0-e07a-3a58-8f82-84f03ded36a9" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="d52ebdfb-847c-3bda-b0e3-9ed0abb1f6f7" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="81785081-515a-318c-a2e6-3aa3d512506e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="dda04d9f-2afe-3231-85d2-6cbf42bed76c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5be7e809-fa69-3410-bc0a-18e0f7e4e309" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="2a0cb7da-69b7-39e8-8141-bf7ea3ca423a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb87b51a-5b68-3020-a8ea-808b3ecf5361" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="37d03bdb-5dd3-356d-8e66-9b35a0edbdba" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="747d2d33-6283-3638-a59e-08ea594ec8ed" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="aeab1080-aee9-3770-9e03-7d42d3ec9957" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="06ae5368-8994-3fe1-8499-90474036652b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="1234365944" rule.header="Tabs should be avoided" tool="c++test" lineHash="1234365944" unbViolId="6a9a6b80-d919-3b6d-aac5-b8fdac8a3c22" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7e0bbf88-2a4a-3d61-8e2d-ddac8fe28d9c" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="7e8fbe6a-af81-36ce-9466-421430f4f559" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0392b403-3e50-3c0f-b60c-abf2151fe8e7" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="1234365944" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="1234365944" unbViolId="0ebe19dd-3441-3a8b-b3ff-0ee2648e5f4b" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47ac2ce5-f87e-3e90-8595-58f2950d1ea9" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="The global function 'sleep' is called without scope resolution operator '::'" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="1234365944" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="1234365944" unbViolId="90386bac-2424-316b-b41b-8696fea2ae08" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4dabc991-fe6a-36aa-8a8c-7477706cf19f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="f17cf85f-bd62-3a42-a57a-b8cc0395c4ca" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc625f15-09d4-3cb2-8f11-5a3fcafaf35f" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="5ce4430d-ec21-3f30-a1d6-e223b558c8e8" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d0f0321c-d1a6-394c-bc39-ddd6428aa325" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="1234365944" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="9013d48a-5f62-3064-b77a-64066699a4fb" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fb8bf11-9459-3252-9354-f453379ef330" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's 'sleep' return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="1234365944" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="1234365944" unbViolId="73158ede-b5fb-3372-902e-cbc50bbba1c0" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d200cd36-315d-3798-afd4-20026ac27dff" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="d3477b0f-44de-388a-98b7-7715ed905370" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d39cfd41-ccea-3193-a6b7-b9f8b1ec210e" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="5efc6580-3477-3a31-8233-416e9ac14dd7" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76720a96-4598-3cbc-9ce9-15ae897c25ad" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="e4a428cb-48fe-369d-8f64-72ad22345bca" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da5513ef-7388-39be-a2ed-0e09850178fd" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="b4f1eaa4-8208-34a2-9369-23e062009cb1" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3216e16c-0cf8-31a8-b614-bd0563c7e5e9" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="eb6634ae-0344-329a-8e83-196ced4dec49" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0303c46-9e34-3147-bb75-4c02b76b11f8" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="1234365944" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="1234365944" unbViolId="954e2b9a-97cb-38d4-8f38-1a58414d3744" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87990df0-ac95-3ac3-a7e7-4c8c477ee252" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="e9c9b37b-a046-3b7c-b4d5-05d71b7731ef" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1753608d-6a6e-3781-be18-cea5462cb7e0" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="1234365944" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="16c1f384-4dfa-3ea1-8302-6614e6741cd5" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aa39c2b9-c596-3c60-a852-c096a972ce96" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="1234365944" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="1234365944" unbViolId="64b71296-8d28-355e-97ac-81903687dec5" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cbbd4e88-7076-3586-9f0e-0f31e49a0bcb" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Unused function's &quot;sleep&quot; return value" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="1234365944" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="1234365944" unbViolId="47f1c8e1-fb38-3ccc-8ce8-5f75114f4705" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef3812db-2def-396a-aecd-3940c9943131" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="The type 'int' of function argument number '1' does not match declared type 'unsigned int'" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="PB-11" lnHash="1234365944" rule.header="Declared types of formal and actual parameters to functions must match" tool="c++test" lineHash="1234365944" unbViolId="6cf4985f-7099-3b98-95ec-b311ebd9acb3" locStartPos="3" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e4996f2-650e-336e-a48b-f44d699d8455" locEndPos="4" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="A 'U' suffix shall be applied to constant: 20" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="HICPP-4_2_1-a" lnHash="1234365944" rule.header="Apply the U suffix to literals used in a context that requires an unsigned integral expression" tool="c++test" lineHash="1234365944" unbViolId="9c9c672c-bbec-3829-ad4a-2f74e0dc012a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef55488e-3570-352d-942e-bad39985ee72" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="MISRA2008-5_0_4_a" lnHash="1234365944" rule.header="An implicit integral conversion shall not change the signedness of the underlying type" tool="c++test" lineHash="1234365944" unbViolId="20b81273-80bd-3e9d-a3fa-e4886bfe5fcf" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f8e3613-f525-36aa-a6be-b0d2d7905e43" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M5_0_4-a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="4ea8d317-8c6b-36de-9ea1-8775be1534d1" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d796c27c-f35a-355d-8b05-64bada1693a6" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used" ln="128" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="128" sev="3" auth="devtest" locRef="4" rule="MISRA2004-10_1_a" lnHash="1234365944" rule.header="Avoid implicit conversions between signed and unsigned integer types" tool="c++test" lineHash="1234365944" unbViolId="ece512f3-0f8f-39a1-b313-e21c6c37e4cd" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="64c4fee7-0b1e-3a43-9d39-49d977d29c85" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="128" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="129" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="6aaee212-81b1-3b4f-9310-52bc705a5e2c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="752c034e-b5b8-3647-bf97-eb0240e1c389" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="129" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="4a174dee-4f58-39cb-8185-a0bf3458658a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1c65b472-5dc3-3216-a6fd-7620c4d946a7" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="129" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="9a3913fd-85fb-3001-8125-77c2d8454fc9" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="95431ae8-4abc-3015-bb31-1b137a98e848" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="129" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="9053" rule.header="Tabs should be avoided" tool="c++test" lineHash="9053" unbViolId="da89e728-e218-38b2-aabb-ccaa8060b13b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91bbefe7-bfcb-35c8-aad2-9217a7378c6b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="129" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="152aa345-4a4c-32b8-bf52-efd93a19adde" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="354fb150-3547-3524-bc84-707c2f46bf96" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="129" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="129" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="9053" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="9053" unbViolId="375626e6-25f0-3048-8a0b-c2b83280952b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2baede35-cbd6-382b-81dc-def721e5b8c1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="129" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="14026035-9cca-30fa-bbb9-f693c993e3c6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d224063a-812e-3a5b-8bb7-a9afb8296091" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="f7f6f277-bdaa-34d3-aea6-7d1406428afa" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd3707d6-0bd6-35a2-a8a6-a971f14d45b5" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="f1a4d5b0-897a-3435-91c5-43efed5eb6a0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca8fc3d1-1211-3de4-943a-399f6365176c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1688062501" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1688062501" unbViolId="623fff6e-4b56-3521-8d15-43e75473e362" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7402663-ad2f-3d5b-b0df-3c42a9ea3704" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="2b7d82a8-f222-31c1-bd32-35e811446af1" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6050a62c-da53-3d99-bcbd-620b76f157c7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1688062501" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1688062501" unbViolId="a38ca145-970c-3208-8138-46f7db0465ef" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65c67821-88bf-32d5-bdbc-e6b4edd32e2e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="'return' statement should be used with parenthesis" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="3" auth="devtest" locRef="4" rule="FORMAT-25_b" lnHash="-1688062501" rule.header="Parenthesis shall be used with the &quot;return&quot; statement" tool="c++test" lineHash="-1688062501" unbViolId="f29a3d23-ba30-3a8b-9f1f-21b792a2f36f" locStartPos="2" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a507a1bf-f9db-31dd-9d4e-1848bac44ae5" locEndPos="3" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_a" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="ea6335d7-c459-3649-bed1-eb0a62f1ef31" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4bb687cf-2952-363c-870a-cf6150c867e9" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M4_10_2-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="a29e874c-8609-3ab3-b7ae-22595f2df3cd" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e4f6e0b8-4ba8-342d-a162-2c463b4248c3" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="2" auth="devtest" locRef="4" rule="MISRA2008-4_10_2" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="ddfac9c4-d15a-31c9-bf8b-0e3a40144c4d" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11b0e482-5aed-35fd-bc50-32a63779af0a" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-63" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="71aa2903-b340-3591-8b89-8351ba053dc5" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9bcdd90-4e72-314d-9fdb-b747b377f364" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-a" lnHash="-1688062501" rule.header="Literal zero (0) shall not be used as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="364798be-a687-38c2-8181-6cbaca96f005" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7988c155-4eeb-3a73-b5ae-c72f137bf3e3" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="417306ae-c514-3f71-a5e2-a34f0933a27f" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82dc4710-0095-37f8-8f38-5c6315c25a8e" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="f589e817-d08b-334f-b416-21aa3bd48877" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75fb950a-c3c8-36ee-a11a-61e5a10bc554" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1688062501" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1688062501" unbViolId="93e71659-e941-3026-958f-dfe48d33161b" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bab0a970-c940-3f35-872b-5c1b6647012d" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="276910a8-43a7-3ee1-86e1-55fa019fed6a" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="db7466bc-3da0-3122-b652-3e892fcdef01" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1688062501" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1688062501" unbViolId="4b1d76b7-74be-3e39-b093-49bc5fc603f1" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5a6b6b8-ad6d-39b0-8c9e-7d7ba759eec8" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Function with pointer return type returns '0'" ln="130" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="130" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1688062501" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1688062501" unbViolId="2e27aba8-f041-3c18-991f-d536c27661e8" locStartPos="9" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3932be11-4697-3cb4-8a8f-7704b771f820" locEndPos="10" locType="sr" hash="-1769734618" locEndLn="130" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="131" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="404" rule.header="Tabs should be avoided" tool="c++test" lineHash="404" unbViolId="f40cc08c-30f7-3cd8-8b17-e1791e375b52" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4a8816e9-f791-3015-b498-0254442029aa" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="131" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="698d44e5-4c31-3510-8e85-2f7a80b6c319" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3b436fce-fcbc-3d7c-a554-18e90f52109b" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="131" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="131" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="404" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="404" unbViolId="4053b888-f8cf-3494-8851-a6eeb55b623d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="57efe325-ad07-3c7a-8b7a-9791093bd0f2" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="131" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'runGameThreads'" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="FORMAT-28" lnHash="-106623271" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="-106623271" unbViolId="47f0bbfa-dc52-3024-9a50-6bc965c039d9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cefd2583-be26-37d4-9c8b-2e80d0d57c9c" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has Cyclomatic Complexity value: 1" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="-106623271" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="-106623271" unbViolId="9f764c99-fec4-33b7-8f15-582ea8793a93" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="49a54e5c-ad0b-31f8-a67c-9b41c75c0274" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has Essential Complexity value: 1" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="-106623271" rule.header="Report Essential Complexity" tool="c++test" lineHash="-106623271" unbViolId="c4d6c94a-d472-3f67-bb6b-3cc63db5fdb7" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42a39e92-8c92-306c-b842-bc34b7c031f4" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Naming convention not followed: runGameThreads" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="NAMING-17" lnHash="-106623271" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="-106623271" unbViolId="6dd5c23e-6b1c-3f81-a5fa-289e5290f73f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6eba67be-0ffa-328c-bb33-900c7cd58768" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="a4e8fc78-b0dc-308c-a5fc-1ec3c343e30e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="037ffad2-9a0e-3ad4-b9d2-17d44ea0f5fa" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads' function is not preceded by a comment" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="-106623271" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="-106623271" unbViolId="83001088-a024-3ce2-92a6-d41a5b4874bd" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66e3ed2e-3671-3352-921f-992806b08483" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="f0ea04a9-2c96-367a-b187-1767281c092f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebe2e37c-3446-3620-8f90-ae8950ddfa06" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="1ec711da-d66b-31b5-8cc0-c511a8cb4440" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="788b205f-d298-37a3-b677-2282425247c9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="-106623271" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="-106623271" unbViolId="55fe38e2-b066-3977-8ddc-5ba79a386363" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="76827640-6d54-36d1-84d4-3fb4c2131812" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="cb98884d-3faf-3868-b26b-482784aa9dfb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65c07b40-07f5-327a-a7ab-7683bcb4f1c2" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="a563c91b-86e7-3466-b852-c3a9ffb3a8f4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b2b2754-0c50-38d5-acfb-26e04d641558" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="ae176381-2d2c-3530-9b8e-9f975f836356" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d7d8ab19-850c-331e-ab30-7b2309fb2185" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Function 'runGameThreads' has external linkage and is not declared in the header" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="-106623271" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="-106623271" unbViolId="84854b2c-0199-385c-84ab-2aaa16908aaf" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="745b21b8-6196-3d59-b740-57cc34b9c56a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="0392711c-d679-35df-99aa-6ca89d0c32d9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4b7e0498-6096-30a8-ab37-2df7f5681b6d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The name 'runGameThreads' should be composed only of lowercase letters" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="-106623271" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="-106623271" unbViolId="15ba7d94-8856-379a-9e98-113f24e917b9" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1696a9a6-1ae5-3d64-9e9e-00118043acf7" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="-106623271" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="-106623271" unbViolId="68b94191-fbca-323c-8c35-e6a417cc55e2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b0934c2d-b816-38c7-af4c-b9816a185635" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="ac738ad7-c0b8-3059-8c26-259ee9f60649" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22839007-2641-3a1d-88d5-ae6aa1313d27" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="-106623271" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="-106623271" unbViolId="3d2ccf57-0aeb-32f7-86b3-571be12ff7ab" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c16fd670-b424-399b-9617-2f8f046eb127" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="Global function 'runGameThreads' is declared in global namespace" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="-106623271" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="-106623271" unbViolId="fdc54ee5-3218-39bf-a6e2-abee02648588" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b48e332c-323b-3370-9ee7-abbf9e5ee262" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="d2bf604b-8ad0-3f5e-a467-81cfba3b3ac2" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="beba15a0-fe61-385d-b597-e5a40e8fcd9d" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="-106623271" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="-106623271" unbViolId="362af1fe-ed47-3376-85a0-fd38dfb5847f" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="005b49a5-2370-3141-b180-ecfcc7529266" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="3" auth="devtest" locRef="4" rule="GLOBAL-UNUSEDFUNC" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="202e7739-0422-3494-a631-dfb59e1e6f34" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4696ab2d-d852-3810-b643-d88527f8f1f9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="4" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="-106623271" unbViolId="b93d1907-d3f9-3db4-b4ac-62717674b895" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="14fd43e5-cda0-3d94-a398-86f1dce9eb4e" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <StdViol msg="The 'runGameThreads' function is not used in the testing scope" ln="134" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="134" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_10_b" lnHash="-106623271" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="-106623271" unbViolId="35d8a3e9-db74-3308-a93c-bc013056f5aa" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a3faedd6-8dd1-327e-9674-da6ad16d8fa5" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="134" goals="0," />
    <DupViol msg="Duplicated function: 'void runGameThreads ( ) { exitGame = 0 ; THREAD thread1 ,...'" ln="135" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="135" sev="2" auth="devtest" locRef="4" rule="CDD-DUPM" lnHash="123" rule.header="Avoid function duplication" tool="c++test" lineHash="123" unbViolId="e067e598-7545-3f64-af2b-6e410e4b2af6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="fea07569-9c43-370b-bcf6-4e133f443b3b" locEndPos="1" locType="sr" urgent="true" hash="-1769734618" locEndLn="142" goals="1,">
      <ElDescList>
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="135" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="135" srcRngEndLn="142" desc="[Line 135] Duplicated function in file 'DeadLock.cpp'" rngLn="135" />
        <ElDesc lineHash="123" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="145" srcRngStartPos="0" srcRngEndPos="1" srcRngStartln="145" srcRngEndLn="152" desc="[Line 145] Duplicated function in file 'DeadLock.cpp'" rngLn="145" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="135" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="135" sev="3" auth="devtest" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="60e62201-c538-346f-82d2-267691b197ec" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1170fa5d-762d-3b39-a565-f791093abd8a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="135" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="136" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="c3ec97bf-120f-3724-818e-6b43e9aa0e2e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fd9e5285-9f93-3826-9af5-82463c2132e8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="136" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="a3a3703b-c3ce-3e5f-8223-d3662374b111" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0f82acb2-4951-3c5e-a4a0-8641fcd1c1fc" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="136" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="136" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="e1307517-1deb-38bb-a76c-40af785d0065" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77fc2792-da8b-364c-9d54-6dc43f305a02" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads'" ln="136" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="136" sev="3" auth="devtest" locRef="4" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="6900872c-43b9-3eec-ad69-bc98266e4dcd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9521b67-1038-3fb5-b710-8b8e93179606" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="136" goals="0," />
    <DupViol msg="Duplicated code: 'exitGame = 0;&#x9;THREAD thread1, thread2, thread3, thread4;&#x9;THR...'" ln="136" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="136" sev="3" auth="devtest" locRef="4" rule="CDD-DUPC" lnHash="409232213" rule.header="Avoid code duplication" tool="c++test" lineHash="409232213" unbViolId="12dd5bc6-502b-3b57-b5dc-3a2dd6931be0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.dupcode" lang="cpp" violId="da0bd027-1fb9-3d54-b4e5-700f05cdf84f" locEndPos="47" locType="sr" urgent="true" hash="-1769734618" locEndLn="141" goals="1,">
      <ElDescList>
        <ElDesc lineHash="409232213" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="136" srcRngStartPos="1" srcRngEndPos="47" srcRngStartln="136" srcRngEndLn="141" desc="[Line 136] Duplicated code in file 'DeadLock.cpp'" rngLn="136" />
        <ElDesc lineHash="409232213" locType="sr" srcRnghash="-1769734618" locRef="4" srcRngFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" ln="146" srcRngStartPos="1" srcRngEndPos="47" srcRngStartln="146" srcRngEndLn="151" desc="[Line 146] Duplicated code in file 'DeadLock.cpp'" rngLn="146" />
      </ElDescList>
    </DupViol>
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="73fcd8d4-a4c5-3dcd-95a3-f87b0ef29a9c" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ebc0c95-17a2-3fd6-ba3e-b227565f4302" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="7551cb91-9197-34a4-9fa6-224b928136df" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a38444ec-f53d-3c0d-bdf3-67491a92d734" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="4d773c20-0d21-3ef3-b4bc-6933e5bc0127" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3d04a94-4ca6-34b3-8e5d-afba9d659ffe" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="6f90bb30-10ad-314d-892a-f20e46c20455" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c23bb1eb-80ac-3fc3-b962-d84e86e3f558" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="2d7a72f8-349e-36f8-9965-f0adf83e82e1" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09f11070-634d-3353-b8d8-c417ca0fb1f6" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="8f3f5909-f25c-3c57-a6e8-041875c7c47a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1db98923-ca62-378b-9a50-94be5089c844" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="08e2f0a0-04d5-3fa2-ba34-79fec2a5bd19" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a6f4351c-1467-39a3-a7b3-b3879f764fed" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread1" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="85a78562-8af2-315c-92c6-c4456afff249" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="742de2a0-6944-3424-92eb-1014abd74ec5" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="6225b7b6-2695-32b3-b95d-44b1fa3b0f6b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b758825a-7502-3e70-a5cf-fe474f13e8a6" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="8af189b9-c2bf-33ea-9d7e-918e564081df" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="1335ae72-a66c-3c28-a768-4524688cd5c8" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="bfb325b9-6025-3a02-9af7-d9aa477bb14b" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="7f1fcd4e-07a6-3c10-88a2-e6d95c775823" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="12b0f96c-f085-3a26-95b5-4130b96155f2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="2657aa43-c016-349f-95a2-ec9b91742a9d" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="91ce8d9c-207c-3690-bca7-09b8844e2548" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="0518688d-39e2-3dc8-907f-56a2474631f7" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="dcaa4ca1-f4b6-3db4-9eef-95ebc640268a" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="8719a118-6dce-3e3d-8526-afbb27c2bd63" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="60e08ccf-ce9f-34d0-854b-eb35a27b77da" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6e839292-7dd9-3c91-9d5d-13d55671c816" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread2" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="a083ade3-9061-3fc1-b833-210e68b25ca3" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f1c3a8bf-2109-3696-a034-d833e61dbd0f" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="961f8009-30c0-307b-88c7-dd3d8094f19e" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47693a62-321b-333f-9d1d-9279e2c8c96b" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="ffc76423-37eb-319d-9b2a-499a26c33cd8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="964778fb-808e-39cb-94a9-b5f097a9e711" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="8a96091a-f5eb-3865-a97c-383afad7ab47" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83063411-f9fc-35d7-ad6e-5d6a1987be51" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="fe8ea3df-774e-3e9d-bb60-1f388e85cae8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f40329e-1f4f-37ff-b0ea-3f4196569094" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="e3521f8e-23cf-373a-aeb8-74905a3dcff8" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2ac3d74-31c6-3561-9e96-0d0545b7111a" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a8ec8288-c511-3f8c-a326-dd4d6f624b8f" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67360efd-2e7d-3006-9e6d-f608044662fb" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="f5cc18df-0cbe-3f66-ae78-cfe99b5d141f" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61984418-0430-3534-a901-be26423a10cb" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0021eca5-dbde-31bf-a2ac-bdb106103eca" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40df50f9-3dd7-3633-a360-08574287ff3e" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="62c72ae9-7f63-3080-a445-a1e9deccfa05" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72c9d316-9803-32aa-8665-8e7126c49d62" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="95fdbd1b-a422-3ece-9a43-4b1efd203dd2" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97f89f60-2c2c-34b5-bfad-263ee988f2dc" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="5a65d79a-36b8-3975-8509-ccefbe0436d0" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="741a2576-2271-3a3f-8e8c-6ab4dbefb5a4" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="8c6eda7c-1705-380f-97e7-7f60ede75664" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="852484e2-63aa-322c-860f-2858468a1d39" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="dde0a42b-fa87-3052-a2c1-d7ffa79b411b" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="03a3ae9b-399e-346e-828d-4f2c8b116827" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="a9b6b94c-7ff5-30cf-8a02-ad00e7b98960" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="42c6baef-961a-3a52-b223-1e3f89bd1951" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="4b09a732-8a18-3d8d-a664-e46bd85223fc" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="91fd4f4e-2a06-3cc1-8555-acfcb0dbfe2f" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="0515facb-e903-38a0-a823-e8e5328bb7df" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="931866c8-4383-377a-acea-c28a92ad7077" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="2eb46f93-09cb-37dc-9305-e24a6e24b837" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c5af6c65-f7c6-39a1-bb56-fffcd0ff5a67" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="724f41a3-11f8-3357-a927-3583781609d9" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="16f366f0-0225-3272-81ba-208f3d9d7dfc" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="19c2969b-d2b8-317c-97e6-03e623838720" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1fe87451-b30f-38ec-8ae1-f7c8e6db2dd2" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="053aff7e-7119-34c1-8511-b79516cf4740" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2531dbef-ca0b-3c62-add8-5d3ce0ce04ec" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="6c1a33bb-2a5b-3a12-bd88-c7a87e69b686" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebd31ce2-7b29-3464-a4b3-9d8b020de699" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="134d4228-841a-37a3-8359-145d220dde4a" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0dd51f77-e2c6-36d7-8588-29fa2dbcb221" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="4a68bd27-eeae-33d2-9c84-59e80fa74060" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53effc02-1c06-36e9-890b-cb16e488555c" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="98ad3020-9d98-3396-aea7-3f087ac49e7f" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f282e2b1-52ca-3c07-95f4-f8860fb19c38" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="4cdb8a29-a276-3cac-8f7f-8455ff682d07" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4654ad12-0d2b-3475-a807-1b48a80aa8e6" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="4e77844f-384f-3727-b08d-c5f7a00b8c68" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5b674c56-843b-3a4e-8ce6-1057f5ff8699" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="a5d099e5-dbf2-3c1b-aa07-97932d9a5f39" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3c586de-d2c9-35eb-af78-825b6e562635" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread3" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="fcd90c58-d41a-3576-a180-74b8fa5a8fc3" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caa0ab6c-7e2e-3349-a92e-35d0bf153620" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="7f345e2c-cd40-33de-8458-aa90a6b3f4c1" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="fd4f9f2e-ae8f-3226-ac99-4f2356ce3970" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="53194be8-514c-3133-94ce-3e5f9dafd4e2" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="d57d5981-301a-3a03-8579-e417ad262088" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="075530b1-1252-36e2-9760-bc061533feec" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="6937d55b-cac7-3ef4-a32c-82aa14366c77" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="176c91e0-9619-331d-99df-ae3ca8a9a852" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="bd0efa05-d53f-3c21-9b83-6fc14bc243c8" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="db85001f-c93a-35ae-9230-cc1a65ef2253" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="417b6ea1-a977-3f05-8372-21ba898c005e" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="4d85fc6c-f9ed-3bca-b19d-2f069f20f783" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="dee5bdbe-f90b-3c8e-a2a5-80d708eac2bf" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="2ce18cba-6733-379c-ae64-d9ce40170378" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb28d91a-6c68-37df-8e19-bfcaf50e5f4a" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread4" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="60bcd72c-fe0c-316f-8674-80bf5b93e275" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0ba0d2a-01a0-37ed-874c-c874c4f0c386" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="13ae09c6-ae5f-3b6a-aaad-55002b28fdde" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a1b127af-3a21-3f85-9d99-6247d129a0d5" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="58af99e3-e0a0-3705-a7f5-c4a89f61f6de" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab1fa384-afd4-38eb-8ea9-cfb5fe98fab8" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="adba6e04-1858-3f76-a9e9-8132ad98e725" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cffa86d0-8dfa-3321-bc2b-4bc19a14f163" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="eeb7d57e-8ec7-3f18-969c-f97b8052693e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d1a3b105-b4b1-3b15-bb31-6468e06f40da" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="2aba2232-3ad7-3143-b294-1eb89a7e373e" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e5e71413-a0d2-3fb7-a549-5b5c4275cff8" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="fe32a96c-0c97-3fec-9a18-7514d54b9326" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="26da07e3-31f9-30e6-b842-371b87c3cb32" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="32be0455-5ae5-32b0-b2c0-108fefec7d4a" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="13881760-2b81-36ed-b7ae-625e294a3065" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a59e50f0-a477-34ee-b136-44f926128c15" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18e1848f-6028-3a0e-af03-04095fad1d6e" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="787abe7f-f8d0-3635-8011-426df104f33c" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d2622333-c721-3767-b177-ebb11760fe2e" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="f854ba98-745d-378c-ab6c-6d64fe9a5dbf" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c0c4b6cc-64e2-3770-91da-7dc7e21d7d2b" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="28d0840d-5fa7-3b5c-a356-d9513d848b14" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ab15a271-ab34-3db6-94bf-7bf16ed10fb5" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="477bcb11-49c1-36a6-924d-cd03435f8f35" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85176e4c-99cd-3d54-85c3-80a14e391050" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="137" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="137" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="72dc0bc3-73c8-36d2-9193-756204fac3a4" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="33bc4160-f175-3ab0-a44d-b790043c1f83" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="137" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="a5f398e5-9cd6-3a0b-bb85-cbab168ef821" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="376c4244-d185-367d-acee-7b5e9db2ea85" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="d50952ed-abc8-3cbc-964b-90068fc37c58" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="486f4033-bb8f-3937-8def-39f889291be4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="e5cb23e1-671e-308d-addb-3341284bdc7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61387efb-505f-3662-a87a-f57fe6450336" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-2033288726" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2033288726" unbViolId="d9656cff-b723-31b1-a2c4-f4e43bc2c927" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="048251c2-dd08-31e7-b1b9-afe737775012" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="b5d68289-1bf7-35ba-9846-60218398db2a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22a2d288-2d8c-3123-ba71-b36e99dc466a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="90747575-95b0-3b1a-8889-fce71d2b8622" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ef2fe85-dcdc-3f2a-889e-9ba0846263f9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="412cf416-ad4e-3646-a0ba-8d024c71f4b7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3a114f26-8761-3aae-91d9-5f402c2111c9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-2033288726" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="ce7c0b31-04a0-3c44-b031-294f342f257a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b1135a7-d652-3189-859d-e98d82265929" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="f77fa7e6-0472-32d8-ae7e-f2ca49da6979" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c7eeb6e-40dd-3b32-9419-e74ddb97840c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="f04cc7d4-736b-34af-a57b-4de98d1d1e76" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5160e4bd-a984-3faf-9f76-44e8f8732bca" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="7cc5764e-a87c-36d9-ae2b-ee7487a1c390" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="edb990e4-6452-3020-894a-fd9343a064d4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="26ed9b18-ef37-38eb-be51-22538f353f59" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04922c0d-bb8c-376a-bed9-8e0c68896c6e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="2dbc87a7-2b43-3eae-9e2a-35e9570de403" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="25ae652c-6a9b-3f85-bf95-c55ac57678ae" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="9220da9c-495d-390e-bd56-7e54db90448a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="04fd43bd-afff-3c3c-bfd5-b0a561a39254" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="b27551f1-082e-39bb-b15a-af0be973c63e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="97f9392b-f4cb-3435-a0dd-3925496088ce" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="60ab859c-2ad9-34c2-9ef1-6e5e9209af41" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="92c36e6e-a403-3ad1-87ed-bcb1751e1fc9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-2033288726" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="bc641d57-88b8-31f3-b83d-252ce061fdac" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b9678195-78fb-340d-bc14-75c0563c48e0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-2033288726" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-2033288726" unbViolId="ab44ffda-4878-3f63-928b-e6d37f838964" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f283393-399f-3919-862a-c64d029a7fa8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="134bc69b-21a4-3693-8ab9-2cde2e7ccf5d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70541e51-38db-3f62-bb30-a1ce84980488" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="3a283761-0c8f-3fcc-ad10-3a2ee783c964" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="889b06e1-ed71-3161-b224-f8349cee127b" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="02fc8371-ce76-35b6-b849-a83a520bd9b0" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8003c30e-7ba2-3ed0-a50f-960574f2a381" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="8c215415-23e2-39a4-9f3f-97472042f8eb" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="40227124-9229-3f3c-b0e0-0d5e2b7b2f3b" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="b7a52f00-e494-3673-aff2-a16b1df03c9c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="22da4bd6-7035-3d8d-a8d7-4199193b98e9" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="b3222b56-cf7c-3161-af23-3f9e2e4aae25" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9fd65677-a5fb-3744-8efb-13206de5add1" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="7d721ae6-f5ac-34a3-8dbe-958d50f04d89" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f57ac876-b894-320d-90c4-772bde4cc60f" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="14f45d38-ee3c-3640-bf17-3176cc00b849" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9412c1c4-0cbb-377c-b527-c9ba32af8ac7" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="99d18b0e-e89f-31b0-ad58-a8a7f0a076b9" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65ad627c-1c92-31d2-b5d8-58348b3dad50" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="d39562e4-001d-3331-a87d-6fa00b263336" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8f1bb215-4bc4-3c40-b798-422c161025ae" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="5339f655-0c14-327d-bd67-00eb13edf614" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9aee045a-5282-3aff-a500-dc0b8f140ad8" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="858fb2cb-b4ef-3222-8b8a-21bf221c6af3" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a01baaef-8782-3098-a493-26965b6504da" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="d1291209-41bc-36b8-bd3e-d0ddce015909" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="198a858f-fdb0-3459-bb5b-e794bd0da706" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="138" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="138" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="c76b2ed4-bc6c-3fa1-9af1-65bb71a71f19" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="caed817f-94da-3721-9ed1-aec51e9e52fc" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="138" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="9396d2c0-6a18-3ddd-9866-fa0391cef572" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="618e1f45-c17d-3098-902d-df1cb46d22b3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="a6f0f7ab-f6d9-3d90-90b0-dfd27733278e" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d3b70063-271d-3d4c-b8dc-8787d01a0f18" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="e8e980d3-3276-31ba-be18-b872ff544621" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="567a758e-dd6d-3032-992c-f692f8c823a4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-1824414877" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1824414877" unbViolId="f107f0e9-7dc5-3604-8536-5094367f6933" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="48ccdcaa-6146-3b85-9c53-3fc42e91eb7e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="3f049435-657b-302f-942f-1c747ff7d8f8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2f446c71-03e6-32a7-95bb-20069c108550" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="5c287517-6236-3f93-99f9-986abb54d39e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71b28d05-dc30-37f9-abc6-5617f02d00f3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="e6b41a06-844e-3f71-991d-dee6c6745b0e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="da7bbca1-ee8c-35e4-a0ef-76103b888fca" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-1824414877" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="bbcc3cde-829c-3dcc-b794-801a63a7deda" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e02f3371-0b43-3b85-b668-f24577966c7b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="cf8d454e-f504-3e4b-a427-d6a73722d201" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fb49236-9728-34ca-aa8f-41fd46404220" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="be855380-5d1b-34e4-b85f-66d3d62f9ed4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e051cc99-e490-3e81-a252-86ea4aeca008" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="29cb539e-d046-365a-9854-b14e2ed0a53b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5df0db3-61ec-39ac-8f7d-7bde920a2a7c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="ad182677-ef77-3481-9f9a-35e279649538" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e168b2f-b62a-39b9-8a55-b1b0728db813" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="97416768-d1df-33b0-adf6-23065fd651a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e655fad-2624-3d50-9d70-86f52c90de6d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="d498ca14-3c19-33c3-9836-375c28540c78" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0e838869-1423-3fbd-a33c-a0410bd68c3e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="30588c32-8561-3025-b48e-409a8bc6f0cf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e1367b0-8f10-3933-9909-9f182e24f39b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="01f2849d-f3d8-3309-bb14-c3fa80dd118c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="70a448b4-dd64-3b0d-9b7e-712a721f320b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1824414877" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="f7f02d22-2e89-3e6a-83e3-31e1981efcda" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9763e8ef-b429-32cf-958f-7a016cb5f75a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-1824414877" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1824414877" unbViolId="34521e2a-4924-3611-b696-7feb5df45019" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dd12dc88-48f8-3971-a200-bb6d10564911" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="a6ce34b8-cef2-322b-9fee-25e663dfa6a6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aacbf307-66ae-3a91-b8ba-eae8194f4873" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="a09c04c6-de7f-350f-8f77-b1b549385ba5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e2b23be9-db67-3695-aeba-e14534f48548" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="cede462c-b6d3-31b9-b987-dcb6f2c442af" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="281e5f86-188c-3e47-ad4b-cfd280b4eabe" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="734f2403-97c2-309f-8be0-1a0f9c643379" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="85539243-a22a-33b1-9ab4-f01a7f8f3b0f" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="76ec0e84-4bc0-3f3a-97e0-c14ed4c6f003" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b8aaab86-eb67-3ac3-8176-0c7165485fc8" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="e8a3be2a-a159-3bc9-8378-354f54ead851" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c11092d2-6e8f-31c0-b312-10066e3b8a19" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="f4472776-b6cf-39aa-a878-c23d2943408a" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d6c02c74-d804-3725-b7ef-e8615a60a6dd" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="759a8562-59ec-3740-ac00-383830953376" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b429a280-f0df-3a18-a4b6-e074fb7c2092" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="594fe120-a944-3cd9-a05f-6573930afa1f" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a13461e0-181e-38df-a77b-ea95cf84df1b" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="da994b97-f52c-3cb0-831b-47136a330a50" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e91ae07b-04dc-3be0-9b6a-6acb5066f89a" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="c0ee94cb-e738-354e-bb48-c5ed6b7588e9" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68b3d9f1-b7d3-30f7-9015-2bc2b8454e79" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="63c4835f-0637-3492-b998-80fb05781637" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f86ef865-df1e-38ad-85b6-ffc78804773a" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="2458cb94-f35f-3f51-8e75-ea2d6355ab5f" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7b3cb3cd-1f9c-3bcb-81ba-feba50df5992" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="139" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="139" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="cdb37d5a-4e11-3ead-af73-7a120accf315" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed3d9fcf-7943-32c9-867d-50933efd8eaa" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="139" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="55189481-f621-31c4-9628-1f8cda118a9f" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8bfb5321-8351-3bd4-a981-f62aba32b6b3" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="b05b7892-2f2e-39a0-9735-af633348f852" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a305fb37-e5e9-3b85-9f9d-0e358a8f1baf" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="db301c31-371d-3c90-b105-230ad9704ab0" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="281f4d79-4ed0-3f4b-bb97-bce8275e400c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-1305984162" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1305984162" unbViolId="9803de67-c4ee-35ea-bbdd-6db19b7637ed" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2148fb2f-a8f2-3fff-95de-94a83f530555" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="eaf950fb-344f-3b72-9f29-4ca9dfe01043" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2047937b-f6aa-3662-bc47-48f88f64be95" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="c7167b2f-2a78-3a43-9b5b-4b050b70ede8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47f3dbb5-fd9d-3485-80ef-407571f807b6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="3c7675af-573a-3d08-820a-f8e0cc7ce48f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c73ca945-8e27-3bbb-8057-61ef9090c1bd" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-1305984162" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="2d35d2f4-3972-3fa1-a029-a6caabbc0d6a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a62d03c-0f30-317a-bd0c-b6bf24ebc00b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="0a4f78d3-41fe-3b8a-80ac-57161218b6d0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca67f05d-1322-3cd1-9930-5606e0f67e13" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="c5ff412f-ae56-3e64-857a-aa8867f0d07a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b0bee00-5948-387f-b504-60528e71ccc6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="aea87af0-a6c8-3df5-af42-7621b0b6a745" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb6f7b5b-9f9a-3a66-87a6-2a57a31072e2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="65af8104-bdce-3d86-b50a-91a5598173f4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b422160b-feb0-35cb-a7db-469980911922" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="93acc1ee-3c19-38f9-a66a-e21444feece0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b77201a4-0611-36c1-8f6b-cd2eb3ad13bd" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="a07c8495-d22a-3929-bd6f-3c5a07d0920b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="321b2543-0b8e-3bd8-b0e9-4f866c4e333d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="2b0e395d-53da-34c3-9e28-c16893ce3695" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a9a70227-a5c5-39a7-bba1-a1d24a702a27" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="48bec72d-5bad-3b37-8f9b-ca155c9b4e27" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c9101965-31d7-3cfb-ba49-fbc416241dc7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1305984162" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="58e0ba96-ac0d-379f-967f-3a3346399cf8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6707265e-d98b-39c5-a326-86ac7afcdf2c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-1305984162" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1305984162" unbViolId="c7291984-e9e6-36d4-b2e2-09aaa4a1e451" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43a04d03-aadd-34de-8184-70437c4a8f42" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="9a62f9c8-f77b-3d8d-8d8e-2e650c712a5b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b515036f-8071-38a1-92bb-7905997cd8a7" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="ce6c5bb7-6a29-3720-9829-1ab204b1ac11" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d21e6c3-2954-3478-957e-b9a99d474926" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="1f1614ce-97ba-3394-8db2-7233bca032d7" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24a1887a-441a-36e7-a9bb-a35cb744743a" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="6ef6bb67-dea9-3a55-ac96-92895ef6f4dd" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="829e0ccb-45f5-30ed-9e9f-aedebec1632d" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="3e157813-3af3-3165-bcaa-c38782b6b379" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="497ee41d-6077-35fc-9bf6-6a2a4c9e19eb" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="0ad97943-7740-386e-8c40-f331f653c6cc" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="12bb620d-3f17-3214-9d55-c54b9a9cdc18" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="f1b5fe2d-2d62-36dc-9fff-c81ea4f16b2e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f10685de-7106-37af-ba38-ac6d65b2e238" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="cb368909-d0bf-385b-9e87-9da5fbcc1d67" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff705beb-0ce1-33c2-a6e8-909c2d66444f" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="059aea22-bb6f-3ea4-bd18-7fb485ce7e4d" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="302fdadc-ddc7-33e4-85e0-620d19070d05" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="07e6efc2-08da-336c-bfb1-88593c33daec" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="837db93f-2e5c-3c87-b9f8-1af5892c51fb" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="19e2aa15-1e31-3d26-ae79-b3beae7c1503" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e9baca4c-cef0-3268-8d07-02ef7271e104" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="452c2bff-d427-3c2a-9281-59c775d300c8" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24a21187-e386-3bad-8a51-7a1d76e12087" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="7ba1c19a-46f3-3887-9970-4f08848123dc" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86b92b18-d10a-3877-b932-ab758e2c8f6e" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="140" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="140" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="05392283-e888-3157-b492-b456e853a1cf" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="67a5362c-74d2-35ba-9903-b3a97d480224" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="140" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="707b55c9-c506-3783-86f1-544d86b523a8" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9c0621d0-d9c0-3e66-a66b-204a970bdc7f" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="52fe4329-a471-3ff8-9bda-082ffcdbb9ea" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7237eab-a360-31da-a07c-cad911acf84e" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="053a9242-7e73-3d0a-8f58-cfe23f536f8a" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efafc4bd-ee92-3861-87e4-68d5333265f1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-604051279" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-604051279" unbViolId="54eb4a5d-a3ca-3a18-b88b-5fa09351b2dc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d71da807-25a2-32e6-b1e7-010dc562f82e" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="ea749274-7c18-3fb0-8234-85aebba03a55" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="912c384e-a000-3197-b165-f4af8c424580" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="e349512f-bf26-3278-b538-2516cc151c3a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10d53917-3aec-3e82-8cff-1446babb7cbe" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="e50ef8fe-5460-3377-84fd-975913de40a6" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="452d6d02-a37c-360a-927d-f6f8a3441b29" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-604051279" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="f1db4ccb-1386-3de1-9025-0adcbf93287e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ae678a99-00d3-3657-83f0-43b2ee080b66" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="7ad44c7e-bdc7-3ed3-8e0f-294700403ba9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ac991d40-3079-3fa2-87e3-f6db3a9672bf" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="064b9e1c-cd3f-33ab-8408-4a37c1f63bf7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98eed4de-4619-3356-9f9f-a0b535ddde55" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="f70733ca-e835-3582-813c-0a9cf5dd44ba" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fd959e9-2810-371c-b32b-d0d30c63219b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="a2787d7a-99bf-3e7c-a49b-069345236cbe" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d089c9bf-3b42-3ac9-a9a6-bbbbf2aef930" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="6b38313c-05ef-3509-9ed8-441d6c2ffcab" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7f93dd44-d69e-3398-a6c3-da842f3dbf35" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="b38f5b9d-8415-37b1-8634-e550b3b6adc7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a0ecba4c-c3c6-3146-ae54-fb64950d7a17" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="f62bc14c-b068-37ea-bac2-931f6142744b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed34370b-d737-308d-b0fc-c882498b670b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="1117beba-8e3d-3c09-a8a4-da81127497d7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="18374f16-ca73-36db-a7d9-82994d150276" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-604051279" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="5c280cf0-7c4e-3a9f-a8f8-d7e3cdba72c9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="687967f5-6672-3fb7-acfd-364e29762bff" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-604051279" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-604051279" unbViolId="5e3600f8-80ae-35bd-88bc-9375e1dac676" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8d4edfcd-6404-36d7-903c-d9c00f7d941c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="01e8b656-5e5d-399a-9793-8aadf9dd2dd4" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b37cb996-0081-39a6-afae-feadc3433c47" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="7aa99324-7d66-30a7-a14b-a61d0839a308" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4c8a1f4f-69fa-3a45-bb5b-653782b8c263" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="e6f6ed79-a649-3426-b3b4-b2f30630e9b6" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4db049c0-3969-36af-b8d0-db6bb2b68584" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="af28e24e-3722-3580-8acf-9584f649fee5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="715bc739-4c16-3243-b6cb-7e766eb59ff1" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="6a9a9548-25bd-392c-87ff-6263931a38f5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d34ed490-065c-303a-bff9-23d8578ad51e" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="983c72e3-3ca1-38f0-8972-84bd01104c95" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2b76c292-7910-3056-9aec-3e0eea799531" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="6107b722-7b55-3653-b374-33853ff34b8c" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34b35c7f-5064-3515-b9c9-be11ac4f2785" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="13847eb6-47ea-3adb-9750-a78d5b27672a" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c571549b-0dde-3406-be5d-25537cf40466" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="d57ca6ae-c897-3047-869a-453f57fb7343" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="046e5429-8c89-3061-bbde-aba70a7cf915" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="25c648ad-9790-3953-9d6d-a344c0596232" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0b7b7bfa-fdd0-34f1-af69-cd6e0f63f393" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="1ba62d14-3a64-324a-9fa5-123ce5d583cc" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e0cc1fb7-2502-3809-bdde-99304edd61f2" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="62cdca12-5f2d-39bf-8317-7a540725092d" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="08cdaba1-32a6-3fa5-b177-0d184857af46" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="bb4db248-4338-3ac7-bf24-661e85580017" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="31a894f6-6934-396d-9471-4a0d9c50c301" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="141" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="141" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="9d49fd33-8369-35d4-a8c2-f80cd8fc72c9" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6b9be66-b14e-3c63-81ea-a5abbc731b77" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="141" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="COMMENT-04" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="e1e6aed3-5f3f-3664-be38-da35c14f801c" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5bb62de-3fda-3e79-b0dc-5e489063af28" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The definition of the 'runGameThreads2' function is not preceded by a comment" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="4" auth="devtest" locRef="4" rule="JSF-134" lnHash="989655515" rule.header="Document functions in comments that precede function definitions" tool="c++test" lineHash="989655515" unbViolId="c39560f2-4305-3b5c-bf64-d02961f24050" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5431d8f9-7abb-3f97-95fc-3325a57a11bb" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="4" auth="devtest" locRef="4" rule="OWASP2019-API9-e" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="233a82b9-57e8-3ab2-8ae6-73a41f8c39ee" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c78d79e0-4998-36d2-8d28-de4ac1744d78" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A3_3_1-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="0d7698d3-0af0-3c46-b115-dc2e5d0022c6" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c57f33cc-b33e-39f8-b577-b2f5b98c0297" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="4" auth="devtest" locRef="4" rule="JSF-137" lnHash="989655515" rule.header="All declarations at file scope should be static where possible" tool="c++test" lineHash="989655515" unbViolId="60208d83-7b14-3414-b435-803f21d07cbb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6de21a32-163f-3306-88d6-18fd51ef8150" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="4" auth="devtest" locRef="4" rule="MISRA-023" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="b4aad0f7-4ad8-3829-ab4c-6437ce3348ad" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd04e7c0-8799-3668-b199-2b286b877eaf" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="2" auth="devtest" locRef="4" rule="MISRA2008-3_3_1" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="e9f66f46-ae85-30cf-b5fa-9970aeb883e4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f39edeb-9eaf-371b-9676-09c9e6d4f8be" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL15-a" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="cf843428-2b2c-3277-b4eb-7c84a571a918" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b5724cf5-7881-3c80-9170-0303169327ca" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has external linkage and is not declared in the header" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="4" auth="devtest" locRef="4" rule="MISRA2004-8_10" lnHash="989655515" rule.header="Objects or functions with external linkage shall be declared in a header file" tool="c++test" lineHash="989655515" unbViolId="247696d4-6d4a-3da4-b848-673f6a04b0dc" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a9e1367-06fa-33e2-bed7-fa31448d4ccd" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="JSF-051" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="36588857-a04b-3c85-a22d-56ccc9f0e225" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1135f029-c2c9-3aef-a5c8-e3ae4407175a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The name 'runGameThreads2' should be composed only of lowercase letters" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="NAMING-44" lnHash="989655515" rule.header="All letters contained in function and variable names will be composed entirely of lowercase letters" tool="c++test" lineHash="989655515" unbViolId="d0904b77-d0e3-30b2-9734-d0cc47c40a7e" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4eb8e4c1-8c58-3e3b-a540-0921c691b0ab" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="4" auth="devtest" locRef="4" rule="JSF-098" lnHash="989655515" rule.header="Every nonlocal name, except main(), should be placed in some namespace" tool="c++test" lineHash="989655515" unbViolId="1098d248-6ea7-3677-9006-727d5e4c8e62" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="df9eff70-3a4b-3631-83e6-31d82eb2d5b9" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-36" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="0ac752e2-a4e6-360b-afe7-2d13b08f7e30" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84baf83a-b49f-3d49-82f1-b35bf11c510b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M7_3_1-a" lnHash="989655515" rule.header="The global namespace shall only contain main() and namespace declarations" tool="c++test" lineHash="989655515" unbViolId="e31c9da0-bf46-356a-92be-e186f165f3cb" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c58b7dd5-534f-3a02-b6ee-922680de045f" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Global function 'runGameThreads2' is declared in global namespace" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="2" auth="devtest" locRef="4" rule="MISRA2008-7_3_1" lnHash="989655515" rule.header="The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations" tool="c++test" lineHash="989655515" unbViolId="aaf840af-5dd4-30bc-82a5-afba7f67e2e4" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2aaf434d-1de4-30a6-9d32-1945cdd95c0a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="COMMENT-14" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="d68e247f-951e-314e-ba67-afadd9a0a7ed" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ff1b26eb-0da6-3729-b433-2862396e7a72" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A2_7_3-a" lnHash="989655515" rule.header="All declarations of types, data members, and functions should be preceded by a comment annotated with the '@brief' tag" tool="c++test" lineHash="989655515" unbViolId="1a0c3476-21f6-32b4-8593-3435bb48ec4d" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a58a18ec-fcb5-3888-b764-db62b77692d0" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Return type is not placed in line before function 'runGameThreads2'" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="FORMAT-28" lnHash="989655515" rule.header="In a function definition, the return type of the function should be written on a separate line directly above the function name" tool="c++test" lineHash="989655515" unbViolId="c6e8e415-91e4-3638-ae34-2fcbb89ea664" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ca382f40-28b2-343c-8628-ddd311b8fa76" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has Cyclomatic Complexity value: 1" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="5" auth="devtest" locRef="4" rule="METRICS-29" lnHash="989655515" rule.header="Report Cyclomatic Complexity" tool="c++test" lineHash="989655515" unbViolId="a60028e6-4935-36a6-858a-e89748ca114a" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43e37726-7be3-31e6-89f4-f77873acc3ba" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Function 'runGameThreads2' has Essential Complexity value: 1" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="5" auth="devtest" locRef="4" rule="METRICS-33" lnHash="989655515" rule.header="Report Essential Complexity" tool="c++test" lineHash="989655515" unbViolId="fa5095a7-da4b-3b9b-99d5-05b37e038ad5" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0c477f5f-ed83-3e60-8256-31174382ec92" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Naming convention not followed: runGameThreads2" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="NAMING-17" lnHash="989655515" rule.header="Begin all function names with uppercase letter" tool="c++test" lineHash="989655515" unbViolId="a3521f89-a992-3d93-a55f-e69360a1bb15" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fef9ee9-6ca6-36fc-92d3-e36ff9c4bdbb" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="3" auth="devtest" locRef="4" rule="GLOBAL-UNUSEDFUNC" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="5d745e70-1a6d-3e9e-a6ad-0c6df3159e59" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e48c02e1-0ed8-3ff0-bed5-1e754736afa8" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="4" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_10-a" lnHash="989655515" rule.header="Every defined function with external linkage shall be used at least once" tool="c++test" lineHash="989655515" unbViolId="e64d88c1-f0d4-3bdc-bba6-7c37c212ef85" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="121b5b76-3b10-3ace-b07e-560f27fdb00a" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="The 'runGameThreads2' function is not used in the testing scope" ln="144" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="144" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_10_b" lnHash="989655515" rule.header="Every defined function with external linkage shall be used" tool="c++test" lineHash="989655515" unbViolId="3499d589-2a18-3327-9121-a3ead7dc6c25" locStartPos="5" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b176abf1-f74d-31da-a3ac-1fcb5f80753b" locEndPos="6" locType="sr" hash="-1769734618" locEndLn="144" goals="0," />
    <StdViol msg="Percentage of comment lines vs. all method's lines is: 0" ln="145" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="145" sev="3" auth="devtest" locRef="4" rule="METRICS-19" lnHash="123" rule.header="The percentage of comment lines versus the total number of module lines should be between 20 and 60" tool="c++test" lineHash="123" unbViolId="8f6565b8-39b5-349e-8519-b9846132f392" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e58e63cf-240e-3ec3-8174-963935bb6760" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="145" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="146" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="409232213" rule.header="Tabs should be avoided" tool="c++test" lineHash="409232213" unbViolId="3ed5d518-0bb9-339a-9cba-1bbdec9b8cd4" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82309f0c-90fd-311d-abf4-3b581a949de8" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="146" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="2c76da63-a23d-3a66-9c1d-836990dbe7b5" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3473e04d-cc2c-3d2f-a26f-3431f658ef9c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="146" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="146" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="409232213" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="409232213" unbViolId="03c1d782-dd23-3708-acf5-c9b9244052ae" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6dca97e5-d2fd-361e-b6ec-f2068570522c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Global variable 'exitGame' is modified in function 'runGameThreads2'" ln="146" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="146" sev="3" auth="devtest" locRef="4" rule="CODSTA-27" lnHash="409232213" rule.header="Avoid functions that modify global variables" tool="c++test" lineHash="409232213" unbViolId="0b27c985-717b-36d1-bd75-8fbc3870d4db" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d39786ef-e0f6-3f79-8c9f-f51aa4beb245" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="146" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1123182240" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1123182240" unbViolId="100c3c3b-42b1-37e0-aa9b-06d2e392efcc" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2a67ddf-e43e-3b8b-9edb-96e83b16c6a1" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="5780c352-643a-35c5-95f8-bfe5c443d778" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34a38828-1e58-3d75-b686-aa949914503a" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1123182240" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1123182240" unbViolId="a4664f68-631d-3b31-afd3-698f46481438" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2d6dcfb-d2a6-382b-b4c2-0b5c32a3ec3c" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread1' uninitialized when declared" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="000e3404-73d9-32d1-bd1c-b3920eea1c2f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c69c7b3e-5054-36df-a1e5-d85b561321d2" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="00306a80-5412-37af-9701-57e7e12eb056" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7bfccef3-0cae-3169-9f6c-2845e9b0314d" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="a9c19584-9ee3-39d1-b8a1-dd4a6589e0ec" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bd5dc217-0b06-36d4-a653-879ab0b6ed11" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread1" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="3419ac53-74ed-3500-b675-8c5053f1cf3a" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="359ad6f5-83f4-335d-b875-20e5875d55e5" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread1" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="df99e1b2-4e69-3c38-9a5a-0f5432908fce" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3db8844e-72a6-313a-88b5-3fffb8e499eb" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="208b1886-729d-30bc-89e1-fdf3f68a3256" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="c1f1c416-dc8b-3efd-927a-2270a064ac61" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="41c3dd38-4a58-3987-af56-4355294a915f" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="bd351647-d570-3de3-afc2-10f0a58a0016" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread1' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="f20d212a-e08f-3eaa-9e12-ed088eccca8e" locStartPos="11" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="4fada664-5555-388f-849a-8c5c2023e095" locEndPos="12" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="74ffb1b5-bf6b-33ec-bdc3-7e98631d3b2d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e081c4a1-2be4-31dd-985f-b48abf45314c" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="036bbe90-8bd9-3c7d-95d4-78a7d439cde7" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="2ced5325-aedb-3d04-a4d2-52760861b1f2" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="01839e55-417a-3f6c-ba54-885a52b6d50a" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="a9f28d4f-2e6e-38ab-9e6d-bd5d6b29f8cb" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread2" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="58c5618e-8653-30e5-9509-e2697e5cc045" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="65aaa40c-85e0-3db4-813b-3e6ae1b26004" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread2" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="7c7d3b2e-9c63-35d0-adc7-5a9d89a04701" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d5ecf607-68c9-37e3-98f5-b1dee28d4fff" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c90042db-9b58-3171-beb2-c350a1c896d5" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ded523f-7315-3465-9e60-b84c8c37c4e5" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="73e60d62-4a3d-35f5-adb3-761e9c205142" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6ca218e2-b062-3f99-856e-f00b7bbb0566" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="63c0da81-e0f5-33b4-ac4c-2f95abe20c23" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ed2b5897-ae9f-32c8-84f7-3e7d158070a8" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="ea035377-0052-321a-8f13-e668bf06551b" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="98b953ca-03c4-3cb1-8f02-3c13305623bf" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="59cc2b48-1cae-34ab-af13-c673df39d26d" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d21f451c-f90e-3554-b668-37a1e1526d6b" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="ef342317-13b7-3fa0-81e2-799176fa5381" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6784d569-e660-3831-97de-10eaa0866046" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="51493a6e-dc86-3ebf-8c97-dceea5b0e7b6" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78e8c7b8-106c-3bcc-9fd7-5340b6b3b4fd" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="012847ee-7508-39e3-bb60-2d5c34e40af7" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f56145d9-8dbb-3ebc-996c-5b0366d963e0" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a10776c9-8cd3-361f-a22e-abac6fb0b2b3" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="de00dbf1-5709-3776-b57a-b8511e409876" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread2' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="751a18ba-6c91-3bd7-8935-aa142984df74" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9726f4d9-0a2a-35ba-843f-3f5b4db6a33e" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread2' uninitialized when declared" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="36ebcb91-d3b9-30a8-83de-a38a595e68c9" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="11dbf8a0-92e4-3f56-aeed-2429300b18b6" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="4633250d-a4ee-303f-ae80-188c43cd9d59" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="68da259e-6744-3e0b-8aa9-cb7005e42ebb" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread2' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="a91f7ece-db4b-37d4-a1c1-831d889890c9" locStartPos="20" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="09cd2afb-64b6-38d4-9b40-b664e69a8661" locEndPos="21" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="302e5808-586c-3920-bc39-501dd139efa2" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc8c2951-d71e-3f38-a316-6343f6eb9841" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="1ac183e6-18c1-36c7-8350-e63d256dc81d" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b6940ac7-1dde-3549-9831-b75de5ebf80e" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="0c3b9f4c-244a-3fb0-9eb2-d56a34d02441" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eb5ce7fc-57b6-3809-b8fa-9af0414204ff" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c18b6dbb-f9fc-3fce-b10b-13c77ebf2409" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="77cb4820-e8e0-39e6-852d-ea985a7de3fd" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0dc7cc07-beb8-3a8f-8698-5947d385e794" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="43e7ca90-3600-3608-8fec-393c25ff05b5" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="f797d78f-3804-335b-bdea-d6e8d89dd903" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0360459e-6efb-318a-a625-31667dbf2a4a" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="c615d5ff-6994-3e66-ab90-f3faad12078a" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fcd43980-9da8-383f-86ca-e1af0690b6ab" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="5ea00246-de69-3f20-9ed4-02f26e66bc86" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8a2fe4a4-ccd7-34bb-ad28-d2513735fbc5" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="935a036f-63fa-3076-bb0f-b021fe3bdc9b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2fbfdfe2-d471-3048-b6d4-762ec505cdde" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread3' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="a64cb05c-a194-3683-8e0c-25d9cfb8e22e" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="80602d05-1c16-381a-b208-5818f9ce20e1" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread3' uninitialized when declared" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="15dbcc7f-adde-33c9-97ca-4774dd832049" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e7a979e0-5b5b-3357-a6b5-933115fc9587" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="4723db62-37fd-3588-bed6-5c3f52d587d6" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f7c9d51-cce4-371d-b56d-bc8b8a15ad98" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="b49ad914-c412-3d7d-940a-e3c35b424396" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5cb0e782-cce8-3acb-ab5d-7bdacaab748d" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread3" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="276aedb4-9c0a-3076-b65c-b07d9e702263" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2cd3947f-a2fe-32d4-a10d-47d10f27c107" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread3" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="aba8d597-2133-3d0e-a9f2-e5312d2fcb7d" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e95005dc-fe4d-3920-b6aa-dc6ab1251062" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="cf49c3b1-f0e0-3f3f-8c58-b91beaa65ff7" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="5c68b800-6d02-3a94-83a5-44f19eb9a670" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="c85d768d-6219-3d40-90fc-cbfbcf558138" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="ca2fd7f5-5211-3918-ae17-11384a1c0864" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread3' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="e8fb28c9-d13d-3faf-ac42-a0ce7434c195" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="33e38da0-3453-3dbf-a010-174f35108606" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_1_4-a" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="188dc218-d63b-3f3b-bd3f-1a1954cd3223" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="e33054d6-5219-33c0-a0a0-2c8286355606" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_4" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="fc397c4c-884c-30d4-8cdc-61a0470113e6" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b2273426-ac53-39af-9904-6117559e03c1" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable has only one use" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="GLOBAL-ONEUSEVAR" lnHash="-1123182240" rule.header="A project shall not contain non-volatile POD variables having only one use" tool="c++test" lineHash="-1123182240" unbViolId="c63d87ba-e900-395d-a19f-c3511c2398ce" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.global" lang="cpp" violId="b2f6d0c4-5458-319d-894b-03967c734fb0" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer or array type is declared: thread4" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-94" lnHash="-1123182240" rule.header="Do not declare pointer or array type" tool="c++test" lineHash="-1123182240" unbViolId="8fad27f5-4c8b-3f90-913e-d1fccb711d2f" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="738df9ed-36b1-37fa-b40b-6c290d5c0cdf" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The variable of pointer type is declared: thread4" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CODSTA-95" lnHash="-1123182240" rule.header="Do not declare pointer type" tool="c++test" lineHash="-1123182240" unbViolId="3a3881b2-160c-3b0a-aff7-863281d47dcb" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2a7a63fc-6b7b-33c1-bc3a-a3771c2de186" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="JSF-152" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="cb4eefd3-9374-315e-8ab0-83559d7db8da" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ba903e19-dd0f-3685-bddf-3ce021ce8b7b" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-b" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="c2e46073-351c-315a-8a8e-e8f300733911" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b994954c-97f1-371f-823f-c779e41158fd" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-a" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="f048940e-16ec-3179-87f5-5827b281efbd" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d5c8099-0213-3011-bd6a-e9f49397e588" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate line" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="FORMAT-29" lnHash="-1123182240" rule.header="Multiple variable declarations shall not be allowed on the same line" tool="c++test" lineHash="-1123182240" unbViolId="d6772f3a-6724-3a64-bb7f-39ac5be15b1a" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58987d5d-e534-3a61-81c0-f3021de3956a" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A7_1_7-c" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="5374a3a5-b073-38d9-bf45-c60326bc620b" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0183135b-f99f-3664-984e-3088c97562db" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="FORMAT-33" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="06745c89-69fa-37a2-8f5a-ac42468fef22" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="27e0b94c-cd10-3e06-a702-dc4b568f67d4" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="MISRA2008-8_0_1" lnHash="-1123182240" rule.header="An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively" tool="c++test" lineHash="-1123182240" unbViolId="8bcc827d-e6fb-3437-adc8-247241f9c4b8" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bf91122c-8488-31a5-bc8f-7b0ff12690cb" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="HICPP-7_1_1-b" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="0b17da6a-1d54-35b7-a627-56e0e203faac" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="59c1c359-f91b-37f5-91f3-9c35e1f58498" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M8_0_1-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="76289ba7-c37b-3aec-8d50-aae062312c08" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3463394f-7fd6-3d11-88a9-9bcdafd7d094" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Declare variable 'thread4' in a separate declaration statement" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="CERT_C-DCL04-a" lnHash="-1123182240" rule.header="Each variable should be declared in a separate declaration statement" tool="c++test" lineHash="-1123182240" unbViolId="7a67aa77-a827-3bd3-8e08-a50861e795fe" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="705d3f80-44fa-3c9a-ad9f-e6592207044f" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Pointer variable 'thread4' uninitialized when declared" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="2" auth="devtest" locRef="4" rule="INIT-04" lnHash="-1123182240" rule.header="Initialize all pointer variables" tool="c++test" lineHash="-1123182240" unbViolId="51db7041-afaa-3894-ab20-22f9f2ad6de2" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c21afbe3-287b-3022-90b4-4dfbe62acf38" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="JSF-132_a" lnHash="-1123182240" rule.header="Each variable declaration will be commented" tool="c++test" lineHash="-1123182240" unbViolId="ba5e2e0b-29dd-3d9c-a189-620c877d5696" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5a408e66-14f3-346a-a63f-b9f7b56f774c" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="The 'thread4' variable should be commented" ln="147" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="147" sev="3" auth="devtest" locRef="4" rule="COMMENT-05" lnHash="-1123182240" rule.header="Each variable declaration should be commented" tool="c++test" lineHash="-1123182240" unbViolId="022ccc28-456f-37c7-9a80-63da4de0e5fd" locStartPos="38" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2dfa1747-3a71-3c2a-a0d2-34800d3b6365" locEndPos="39" locType="sr" hash="-1769734618" locEndLn="147" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-2033288726" rule.header="Tabs should be avoided" tool="c++test" lineHash="-2033288726" unbViolId="3ecae61e-9580-314b-b892-78dee1948c7b" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="75e1160b-85c3-3fe1-ac95-0d7718f8acef" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="ef9ca8fb-cbb7-3fd2-af42-4b3b80903ef6" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9d2689a2-91fc-3ea1-9d8b-c85d73c191b6" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-2033288726" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-2033288726" unbViolId="18284903-0c5f-3d52-9f98-897e714e9805" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ebcebd9d-b97b-311e-8743-bf6d62a4654d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-2033288726" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-2033288726" unbViolId="e43ef5ee-2994-3a7c-b4f5-69fd08e60912" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9de7c775-be74-323f-875f-2e2ee79579cb" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="49314646-4430-3cda-9c5b-31f6ccd771a8" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="efe15eb5-815d-3b5b-a106-13788cd35028" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="7841a155-a3ee-35e3-bfec-30835c66ba8a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bca0fb22-1abc-3290-885b-23178b4695e7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-2033288726" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="a5a5a939-4ce7-3c3a-aacd-c963f95d64bb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1f2aeed5-ef2f-3a39-95a6-7d6cd57122e5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-2033288726" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-2033288726" unbViolId="8e36fb49-089e-3cd7-8044-41bcdc8ae71c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="86e54140-2074-3a26-bf7a-2b024f0dbddc" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="4067c8c0-279f-385c-9ff8-70ddbe1402ff" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc623e74-6c64-3791-974c-b1356a7510e4" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="315ca47c-ced4-3f5f-b185-8bdf1aaaf1ca" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1119cfcd-accc-33d0-8301-1c1c7824b3fa" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="3198b192-7fb1-3f44-beed-83c54b727aa0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="eae74df1-2d80-3e81-a77b-674a51522446" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="6e18775c-e672-3316-b6b9-4dcc77df2661" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="234b90ea-6a87-34fc-960b-e8b7d0791965" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="f83612cf-f373-3faf-9f43-f9d2f0df4635" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c7b9b80b-5a2f-3e48-af60-bdd90aaa1467" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-2033288726" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-2033288726" unbViolId="db8b6dd0-b80e-3d57-b8b8-d83af45aed57" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bb7453ea-de18-3206-bc9a-695b1101cb07" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="51916c6c-611a-3c56-b5d9-d16aaa718d2d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="337a654d-8b1e-3b62-8137-5e046dac73af" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-2033288726" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="05fe060e-772f-3c5d-9c49-8934078011dd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c20224cc-5e4c-38f0-8508-b48d97e52ae9" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-2033288726" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-2033288726" unbViolId="0c9c3a21-62fd-33d8-bc04-f40445928f42" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2199f696-2955-3a78-9275-45f08449ba90" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-2033288726" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-2033288726" unbViolId="a12c98de-7ae6-3e10-af29-b5e19999a45e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4864c2de-d64c-37dc-883f-54c84ca1854b" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="0d4f3120-ee63-3db4-9ae1-978b3e3d40c5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bc263398-38c2-35b5-8fab-2f842f2a5091" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="8d41c3f5-6cff-37f1-a9ab-cdd70f596b33" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="84c0230e-e861-32b1-8916-4cce93c6909c" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="680defe4-7354-35a0-a940-44ba8c131ea5" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f47c607-d48a-38b1-811d-95efaa4e73ab" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="98a63a8a-ebcc-3713-ae8a-cf8943f1f424" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="10f56b25-9e2e-3418-a6c7-1da495295dc2" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="7422627d-879c-3c8a-9af6-66e48fe79b1d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3e688fab-ffd7-36f6-b6c5-ec12c7b54f8f" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="f5941113-985a-37a8-bcdc-7c6db121e59b" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b2830204-893e-36a2-8551-78ef56ca7c5f" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="11492cc7-cd36-3e89-b687-afdaa82b5005" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="438db486-675f-31f3-8f23-38a546dfb004" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-2033288726" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-2033288726" unbViolId="f4ddd405-c2ec-3de1-a8db-5a5e93bb6696" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87bcb383-659b-38da-a508-b3eb080fe79f" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="ab62e561-addf-360d-ae1f-d938393dbd10" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b57454dc-3021-3fd4-aa66-3aefcee90a58" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="d5df3ebe-7ee5-3496-b40c-1fd3938855b2" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="30e899af-da35-356b-9fa1-87db4983d203" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-2033288726" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-2033288726" unbViolId="68f6ab2f-00fb-3f72-b1bd-4af1fe2ed6ca" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3369446f-c431-30b4-997a-dfea224466d1" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="fc5939aa-61de-398b-9c16-63fa5ab4b602" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5aae2bb8-de4b-3ce0-9a82-38c637f0aa16" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-2033288726" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-2033288726" unbViolId="e922a704-2cc2-3d24-b6a9-5347c5833462" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="964f4f2a-1f79-3619-87cf-0e557b77d695" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="148" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="148" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-2033288726" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-2033288726" unbViolId="7ff5a025-73a1-3f7d-95d6-58ca71c58bda" locStartPos="41" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e003950c-41be-37dc-ab7d-4d696913e092" locEndPos="42" locType="sr" hash="-1769734618" locEndLn="148" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1824414877" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1824414877" unbViolId="b07507ff-5e0f-393a-a847-ae285a245b61" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d1c198e-334a-389b-bf58-52d3868fcfde" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="9640d5d2-cbe1-3062-9e78-407aacc11680" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="24790eb9-d88d-39aa-b904-af612a703e67" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1824414877" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1824414877" unbViolId="ffa6177b-3772-3170-a39c-d08586fa2383" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c34e6458-7d12-3103-9e30-a91c9e0a0789" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-1824414877" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1824414877" unbViolId="66261c69-85db-3f4c-b3ed-0b129bd22c5c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="6f445840-c661-3028-924b-a7adda8b0b61" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="0eb65f8e-b53d-3775-b8b0-aad30adfa5c2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1d586a5a-4e33-3b24-8296-be8a4eb261ec" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="cff746f6-6324-3551-9251-8d227568f87a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5919fcb0-cfe3-3597-8343-e6aaca347662" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1824414877" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="043e07ee-93bd-3579-bfb6-c9dd7a779ff7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="29321af9-64b8-3723-bac8-1d849137ed28" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-1824414877" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1824414877" unbViolId="5240f15d-a839-310f-8c7a-05d7140d48e2" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="af7d1f2f-7815-31ea-b669-39904187145c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="b38a4d54-ac4f-3367-9ec3-6d2e17eec705" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a73f46a4-b2d1-3fcb-95f9-0d71c88888da" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="4e801c62-53dd-3343-b372-ff744228bd3b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="34e8f8da-619c-3cca-9274-112f55101361" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="0bbfc472-2b01-3143-a9fa-a392758fe5db" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2e84f717-9bc6-3cc5-8ef5-3c8881e220d1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="20a702f4-99dd-336d-bf60-53a782a4cb84" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3f4442cf-1deb-3667-9e70-d70d5ae798e8" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="f64e0dca-5f92-3e7a-86f0-272a17373e11" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="dc034f0f-a45c-3ac5-a219-e4de035c14e6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1824414877" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1824414877" unbViolId="7509c3e0-9f9a-3dcc-b4bb-4c203316602a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2987d924-c3cb-3a77-aa3e-faaae0fbda16" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="fca1d865-1dde-3cb8-b3b9-b62abfd6d9f4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b69f1edd-28fe-3c82-ac62-e571a01ea292" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1824414877" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="ea234241-27fd-3af1-9b94-9d73fabfc075" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b7269e71-d8f0-37ae-bc41-d1ff0f88db97" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1824414877" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1824414877" unbViolId="b8117dc4-bc20-3756-918f-8a80132160d7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f6745441-8da3-3169-aeac-00c599538f96" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-1824414877" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1824414877" unbViolId="f2856dd8-7395-3207-b77d-3d676f9715d5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2eed10f-0c7b-3647-b2a3-efebde6563cd" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="de099bb1-8489-3f4b-a213-d7c9e8e7dae8" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c53e0409-9471-3b43-a82e-5f57045b364c" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="47b491b9-7453-362f-a394-1d32cc88931d" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c1df0b2c-c267-3baf-8ade-6d121fd40162" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="df409887-ce25-391d-b4cb-f5e59601ea33" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5bc4bfc2-b05d-33d7-a560-9f59e8e95d15" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="c9598b86-b7ba-32bd-b027-a56c341c381a" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="cfee94fb-9b8b-326d-9a40-bdceafd393b8" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="aab134a9-aa57-32af-b09b-f7b012387128" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0ebf8780-a1b9-3191-b9be-fb9469bd569d" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="c9d46ada-759e-36a0-9945-eb38b0be4e2e" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a023e2b8-261c-3356-9dd0-f3476ebc59e6" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="36d7ef63-bcec-302f-87b9-71497f7c680d" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c6fbd2b2-0525-3b55-b8dc-36d187060034" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-1824414877" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1824414877" unbViolId="91bc6b89-cdaf-337c-8e59-ee9e2c224923" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="15152d89-933c-3e70-99eb-6f1d1350496f" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="7639c76c-d549-3a03-88b8-98a928b32f37" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7421d12a-49ed-3a06-9d6f-261e92f689ed" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="6863f7c7-123d-342a-afe2-5328f9b9fcb9" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="7ad8f1f3-ed52-307a-8a48-91771bbf5f30" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1824414877" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1824414877" unbViolId="d1feeb67-dbb9-33af-8764-b0b44d228d37" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ecaaef3d-a8ee-3155-a252-11df6a9d08d2" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="6d181818-29f3-3671-bd0a-f59c1fc5ad1d" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="71b43350-f3b4-3803-b37c-47c11e084ce4" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1824414877" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1824414877" unbViolId="dc3f47f0-fce7-37af-adbc-d388c9c9695b" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="733d9795-6970-3143-97bc-a98907ab2041" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="149" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="149" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1824414877" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1824414877" unbViolId="18a5e45b-a7a6-35b3-ac74-3b2af7c59ba3" locStartPos="42" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="006cc9d5-9815-35d1-9314-44b0778f363f" locEndPos="43" locType="sr" hash="-1769734618" locEndLn="149" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-1305984162" rule.header="Tabs should be avoided" tool="c++test" lineHash="-1305984162" unbViolId="04544dab-d853-337f-8953-af5ac6a8a886" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a8b123ae-886a-3313-b509-e7733e8d27db" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="f9b873a2-777e-3849-a929-8a888762402d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d92dc30c-a388-3d9d-9c1c-b0fa27e7f14d" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-1305984162" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-1305984162" unbViolId="57b0c9b8-a514-315e-8e4e-095ce21a44b1" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="61cec9e4-caca-3a0c-82ae-e98d91575128" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-1305984162" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-1305984162" unbViolId="75a2911c-d630-3d1e-8e04-0fac9c45adfd" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="37fe79dd-6a18-378b-a27f-31bbe0f3a9e2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="763879d3-4ffa-38cd-a854-e4bbaa948eeb" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1772ab64-c42f-38b8-83db-5739b4873a9f" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="3d0ccb71-0183-34f3-bf50-2f107b0a160b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9b2cc3f2-23a3-3a88-a62e-6fb20b8c70f3" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-1305984162" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="002f5793-0a9d-3404-bf1a-eb9ad5825bbf" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="2668b510-29ff-3629-9731-ff3814a673c5" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-1305984162" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-1305984162" unbViolId="8c7a719b-2d05-3c8c-b5dc-101b6bf2fb53" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a76f6206-3a76-3c79-ab81-efbd9702fa35" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="27416fe9-0de6-3f9d-937a-f9c4e7e0f3da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a09422d4-698b-3c66-94b7-6d2996ff0dc1" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="1f8f1b8f-3f01-3677-954f-ac64530df9a7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0be0ca38-70d6-3cfd-80bb-86fc6dbfa896" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="1710c9eb-62f2-3eba-9341-8b09cf1f4ecc" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ef280b6f-5683-3d57-9863-36466f6ef72d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="6e6f71e2-a0a4-34c5-8c9b-fcc47ad70641" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1e18860d-5733-361f-b2ef-d50164975588" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="c6174f3c-b20c-30de-b961-dd7e52e9043f" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="83a174a8-b09e-3b28-827a-491bc75f4ec6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-1305984162" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-1305984162" unbViolId="5bd25296-ef84-361e-b3a6-f7dd22ccd8e0" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0159cbca-8d42-3ede-bd16-4f4a59cbfb01" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="1ef76698-bab1-3152-8e27-eb8d2ab208fe" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="14494b81-b0e5-3121-a65c-f5516b97669d" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-1305984162" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="89e28bb6-9689-3092-b993-5fd96bdd0d6e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4022e811-fd8f-3a75-bdb4-39afc0867f97" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-1305984162" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-1305984162" unbViolId="d2abb93f-a4b0-3d20-b7bc-687b1c611b3d" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5d42fe2f-4e22-3d15-867c-7daac1cc858c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-1305984162" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-1305984162" unbViolId="24bfb5cc-896b-336f-8d6e-3324c0f5ffa9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="82643c14-a1f6-3ae6-9668-a7f6ab173580" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="73c0d69f-5530-3e8d-b610-8c09ad33da62" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66aa2ca9-a1ea-389b-bbdc-5769b792e5df" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="85c92b00-1c76-35dd-8b32-6b723bbc3212" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1be75f08-251e-3008-8307-010014901cc1" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="4be30c23-3a0a-3c7e-a96c-e3eb1224387c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="0a31cb7a-c1bc-3b48-80e0-043e56fa4b12" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="7e79b8d4-f8ad-3020-a8ea-e4eb5e9136a9" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fb28fe1a-5ddb-353d-b661-021d3fb1e2e2" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="8a8b25ce-f81c-3800-bfc6-05f98af7744a" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="733fef17-4591-3267-816a-a13188f5687b" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="310bb55e-ed9b-32cf-88dd-11a4a7387c63" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="240d0d91-17b6-3348-bd0d-fea03f31ded7" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="c7c98ea2-3c7c-3235-9b51-82c2a61cfab1" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f2054aa1-3c3a-33dc-b15a-def1395d3905" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-1305984162" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-1305984162" unbViolId="88904e43-d1a5-3d78-b765-02bdca84ab2b" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="8b30864a-5df5-3dd2-acaa-b8600b0b377c" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="d8ef71f9-466d-3bb4-8c06-47cc8bf50111" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad839515-8744-3d46-bd07-92804d6cf412" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="f58abe6e-2b61-34dc-971e-b980ddde9e84" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="d05c8051-17b7-367d-aaf2-d7a559cfbe6b" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-1305984162" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-1305984162" unbViolId="1e334926-5c9f-3531-91dc-6a3c75a5f0dc" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="abd13477-b171-357b-812e-be36a945dfc8" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="14b17db2-3287-302e-9abc-5db57bfc382b" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b4856dac-a56d-3006-b051-a66e1b5403ea" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-1305984162" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-1305984162" unbViolId="c04f8116-ddf9-3c59-ab7c-90cc08361130" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ee5e4366-d075-30bb-830d-2076af1aed49" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="150" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="150" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-1305984162" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-1305984162" unbViolId="503c7ce6-76d2-3564-bf80-0f4abd556f00" locStartPos="48" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ad962531-dee5-3aac-801d-ec71c6485ea5" locEndPos="49" locType="sr" hash="-1769734618" locEndLn="150" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="4" auth="devtest" locRef="4" rule="JSF-043" lnHash="-604051279" rule.header="Tabs should be avoided" tool="c++test" lineHash="-604051279" unbViolId="556bd3ce-2b14-3b8f-b02f-8d8efe1d4369" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="72014fd2-b685-3c4c-b08c-cce116e73791" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="5" auth="devtest" locRef="4" rule="FORMAT-01" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="0cc12174-b32c-34b9-ab35-5ee237718d2d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1a69de02-ac57-3f35-9ddf-177fc55a7be4" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Non-ascii tab found" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="5" auth="devtest" locRef="4" rule="HICPP-2_1_1-a" lnHash="-604051279" rule.header="Tabs that do not use ASCII spaces shall not be used" tool="c++test" lineHash="-604051279" unbViolId="5590d3f0-aaf1-3ab6-a105-b3798b3e081d" locStartPos="0" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9e9c0d33-b23d-30b1-bc94-7de0b3a9c884" locEndPos="1" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /><StdViol msg="The global function 'pthread_create' is called without scope resolution operator '::'" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="5" auth="devtest" locRef="4" rule="CODSTA-CPP-23" lnHash="-604051279" rule.header="Whenever a global function  is  referenced, use the :: operator" tool="c++test" lineHash="-604051279" unbViolId="c3a1002d-5f73-3909-9406-29d4185b2fb9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f3f0434d-e435-3cdd-86c6-62db39d4a552" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A0_1_2-a" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="da010aef-84bf-359e-aad3-ec1786de022c" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="58e3179f-b8d6-3599-bc30-1a05c627f0e7" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-58" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="ba075ec9-47c6-3765-b81a-616dc3709c21" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="53be1733-90b3-3076-a506-139dbeec9ff2" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_1_7" lnHash="-604051279" rule.header="The value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="a6975126-771c-32ab-ad2a-97892152a7c4" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9ac57598-7bec-3644-aab6-f1478293be1c" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's 'pthread_create' return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="4" auth="devtest" locRef="4" rule="JSF-115_a" lnHash="-604051279" rule.header="Value returned by a function having a non-void return type that is not an overloaded operator shall always be used" tool="c++test" lineHash="-604051279" unbViolId="321e2ad4-3e95-329c-b554-e130f22bcbe5" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="f9d2c3f9-ca4d-3341-a79f-b8e324de64f6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="CODSTA-122_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="82ef84d3-7593-3609-9b62-9260eb15b4da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b00d5680-feb0-3dac-ab66-f2da63302269" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="1" auth="devtest" locRef="4" rule="CERT_C-ERR33-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="007c5706-7b1b-359b-a791-a70abfdda403" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="1b0a4c3a-c62d-3d62-9853-00be82ddc183" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="1" auth="devtest" locRef="4" rule="CERT_C-POS54-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="8a7f4624-656b-3e9e-ad97-2ff8328ffa9b" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="87276328-8cb6-3ff9-9703-c9faa82c8d20" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_17_7-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="9181c416-86da-326e-9928-f0edc6eb022e" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="fc0abb2a-a113-3a43-a40c-c405ef4b63d6" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="CERT_C-EXP12-a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="474baa85-e1eb-3b9f-a254-97cb989359b7" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="473498db-15a5-3c5e-a6ab-d305d21a1086" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-17_7_a" lnHash="-604051279" rule.header="The value returned by a function having non-void return type shall be used" tool="c++test" lineHash="-604051279" unbViolId="89441d88-7345-3893-90f6-f1ead202f41a" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9f82c76d-eb2c-3806-869b-68fef40f7ec0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="MISRA2004-16_10" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="a0843eb3-d16d-3d82-98d7-56019c879ff9" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="c37c8e17-d890-3b91-bc0e-90addaab0db0" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-M0_3_2-a" lnHash="-604051279" rule.header="If a function returns error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="4e609ba2-0efb-32cb-b749-8add730edc81" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a80bee01-f006-363c-a1b6-e8b7b1c6b72a" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRA2008-0_3_2" lnHash="-604051279" rule.header="If a function generates error information, then that error information shall be tested" tool="c++test" lineHash="-604051279" unbViolId="8127c836-5787-3921-bfe5-52cce26602da" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="a7b3cbaa-a7fc-32de-8aa0-2e2f6715b026" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Unused function's &quot;pthread_create&quot; return value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="JSF-115" lnHash="-604051279" rule.header="If a function returns error information, then that error information will be tested" tool="c++test" lineHash="-604051279" unbViolId="263e1b96-e071-3e79-ac91-e1f944ab0d97" locStartPos="1" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="bfbb09cf-3943-370b-8c69-191140847584" locEndPos="2" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /><StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="3fa32952-a9a3-3309-b95c-e8f365559476" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="47a242a4-9a3a-3016-abc5-a3c12d58aef5" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="a596477a-4323-311f-9fb8-9709e51f0d46" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="66559250-b611-3a3b-8e07-dae3f3c55659" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="cf82c13e-daad-3e12-bf9a-880a06bf4306" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="ce625f62-c4e5-390d-a7f4-fec201525f83" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="e7c3f019-e0b4-323f-970a-e76edafc9805" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="b3d3dde3-9154-3d7f-8500-257fe1ecac26" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="f0ab9474-a1ee-323a-acff-7872398b910c" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="deb3f2d2-a2ee-3a7f-8357-5b8640844c5d" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '2' argument to function 'pthread_create' " ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="9e3ad90e-37be-3b7a-a9b5-8523dd9e6152" locStartPos="26" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="aff6418f-1a97-3936-8e87-006fcb8e9738" locEndPos="27" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="CERT_CPP-EXP56-a" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="94c050c3-a306-3fbe-9c3f-ae142f2bd341" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="4ebfec84-e482-32ea-815a-ab5371ab3bec" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="CODSTA-CPP-96" lnHash="-604051279" rule.header="Do not call a function with a mismatched language linkage" tool="c++test" lineHash="-604051279" unbViolId="d14c1a09-5dca-3608-8c41-2f8607333464" locStartPos="29" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="78ccd37e-7f6a-3ba8-b462-bc90b9dfd6bc" locEndPos="30" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="AUTOSAR-A4_10_1-b" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="b6fb3c8c-5386-387a-ae5f-5d9834bd8624" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="107bc354-6084-3a06-bf3e-4ddbe7ce1b0b" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="4" auth="devtest" locRef="4" rule="HICPP-2_5_3-a" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="2be46a17-16e9-319e-b24d-08a0298d3a49" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="5f43c0a4-1c7e-3bbb-a51f-d8d905e9b43a" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="Prefer 'nullptr' to '0' as the null pointer value" ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="4" auth="devtest" locRef="4" rule="CODSTA-MCPP-04" lnHash="-604051279" rule.header="Prefer 'nullptr' over 'NULL' or '0'(zero)" tool="c++test" lineHash="-604051279" unbViolId="a8b0d72c-71ee-3b5a-98d8-10b41753c53b" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="3fc06848-be22-3c3f-ad13-27708a41ef84" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="3" auth="devtest" locRef="4" rule="CODSTA-131" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="9618bfba-de31-3e9d-9e78-1cb2d2dc568c" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="07171cad-0769-3363-9e1b-e7763f9ba4ba" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRA2012-RULE-11_9_b" lnHash="-604051279" rule.header="The macro NULL shall be the only permitted form of integer null pointer constant" tool="c++test" lineHash="-604051279" unbViolId="8bc54b25-b8f1-3a1a-838b-8cee567e31b5" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="e8b88252-64d1-3fce-b200-e0a2e0c2cbcd" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," />
    <StdViol msg="The value '0' is passed as '4' argument to function 'pthread_create' " ln="151" locFile="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locStartln="151" sev="2" auth="devtest" locRef="4" rule="MISRAC2012-RULE_11_9-b" lnHash="-604051279" rule.header="Use NULL instead of literal zero (0) as the null-pointer-constant" tool="c++test" lineHash="-604051279" unbViolId="f281c798-9b88-330d-9d55-7ac72572a5ef" locStartPos="46" analyzer="com.parasoft.xtest.cpp.analyzer.static.pattern" lang="cpp" violId="9892378e-2157-306c-8625-4aa929109c1b" locEndPos="47" locType="sr" hash="-1769734618" locEndLn="151" goals="0," /></StdViols>
      <TestedFilesDetails>
         <Total name="Total (Suppressed)" supp="0" total="2468">
            <Project id="cicd.findings.cpptest.static.analysis.report" name="cicd.findings.cpptest.static.analysis.report" supp="0" total="2468">
               <Res loc="/cicd.findings.cpptest.static.analysis.report/NullPointer.cpp" locRef="1" locType="sr" name="NullPointer.cpp" supp="0" total="178" />
               <Res loc="/cicd.findings.cpptest.static.analysis.report/DivisionByZero.cpp" locRef="2" locType="sr" name="DivisionByZero.cpp" supp="0" total="98" />
               <Res loc="/cicd.findings.cpptest.static.analysis.report/MemoryLeak.cpp" locRef="3" locType="sr" name="MemoryLeak.cpp" supp="0" total="324" />
               <Res loc="/cicd.findings.cpptest.static.analysis.report/DeadLock.cpp" locRef="4" locType="sr" name="DeadLock.cpp" supp="0" total="1868" />
            </Project>
         </Total>
      </TestedFilesDetails>
   </CodingStandards>
   <Statistics>
      
   </Statistics>
</ResultsSession>
