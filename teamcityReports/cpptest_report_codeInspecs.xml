<?xml version="1.0" encoding="UTF-8"?>
<pmd>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-31" ruleset="Metrics">The assertion density is lower than two assertions per function</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-03" ruleset="Naming Conventions">The filename 'NullPointer.cpp' should be in lowercase</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-38" ruleset="Naming Conventions">Implementation file 'NullPointer.cpp' should have the file name extension ".cc"</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="5" rule="PFO-04" ruleset="Physical File Organization">Implementation file 'NullPointer.cpp' should declare a local constant string that begins from characters "@(#)" </violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-02" ruleset="Comments">Add comment containing the copyright information at the begin of file 'NullPointer.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_b" ruleset="Joint Strike Fighter">Add comment containing the copyright information at the begin of file 'NullPointer.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-03" ruleset="Comments">Add comment containing the information on the file at the begin of file 'NullPointer.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_a" ruleset="Joint Strike Fighter">Add comment containing the information on the file at the begin of file 'NullPointer.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-032" ruleset="Joint Strike Fighter">Not a proper header file (*.h ) is being included: "Point.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-08" ruleset="Preprocessor">Not a proper header file (*.h ) is being included: "Point.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="PREPROC-09" ruleset="Preprocessor">Disallowed #include notation is being used: "Point.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="JSF-033" ruleset="Joint Strike Fighter">Disallowed #include notation is being used: "Point.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-18_0_1" ruleset="MISRA C++ 2008">Instead of C library header '&lt;stdlib.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-1_3_3-a" ruleset="HIC++ 1.3.3 Do not use the C Standard Library .h headers">Instead of C library header '&lt;stdlib.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A18_0_1-a" ruleset="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers">Instead of C library header '&lt;stdlib.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-CPP-59" ruleset="Coding Conventions for C++">Instead of C library header '&lt;stdlib.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A1_1_1-d" ruleset="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features">Instead of C library header '&lt;stdlib.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="4" rule="HICPP-17_2_1-a" ruleset="HIC++ 17.2.1 Wrap use of the C Standard Library">Ensure that C Standard Library is securely used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'main' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'main' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="COMMENT-14" ruleset="Comments">The 'main' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'main' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'argc' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'argv' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'main' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'main' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="PORT-13" ruleset="Portability">'main' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="CERT_CPP-ERR50-d" ruleset="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program">The 'main' function does not contain a catch(...) to catch all unhandled exceptions</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A15_3_3-a" ruleset="AUTOSAR A15-3-3 Main function and a task main function shall catch at least: base class exceptions from all third-party libraries used, std::exception and all otherwise unhandled exceptions">The 'main' function does not contain a catch(...) to catch all unhandled exceptions</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="HICPP-15_3_2-b" ruleset="HIC++ 15.3.2 Ensure that a program does not result in a call to std::terminate">The 'main' function does not contain a catch(...) to catch all unhandled exceptions</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="4" rule="MISRA2008-15_3_2" ruleset="MISRA C++ 2008">The 'main' function does not contain a catch(...) to catch all unhandled exceptions</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A15_5_3-d" ruleset="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly">The 'main' function does not contain a catch(...) to catch all unhandled exceptions</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="EXCEPT-06" ruleset="Exceptions">The 'main' function does not contain a catch(...) to catch all unhandled exceptions</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-15_5_3_d" ruleset="MISRA C++ 2008">The 'main' function does not contain a catch(...) to catch all unhandled exceptions</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="3" rule="FORMAT-28" ruleset="Formatting">Return type is not placed in line before function 'main'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'main' has Cyclomatic Complexity value: 2</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="4" endcolumn="5" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'main' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="9" endcolumn="10" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="9" endcolumn="10" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="3" rule="PORT-13" ruleset="Portability">'argc' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare parameter 'argc' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare parameter 'argc' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare parameter 'argc' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare parameter 'argc' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare parameter 'argc' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="3" rule="NAMING-HN-22" ruleset="Hungarian Notation">The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="3" rule="NAMING-HN-30" ruleset="Hungarian Notation">The 'argc' identifier should have the 'n' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="13" endcolumn="14" priority="3" rule="NAMING-HN-43" ruleset="Hungarian Notation">The 'argc' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="19" endcolumn="20" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'char' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="19" endcolumn="20" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'char' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="3" rule="HICPP-8_1_1-a" ruleset="HIC++ 8.1.1 Do not use multiple levels of pointer indirection">Declaration of variable 'argv' contains more than one level of pointer indirection</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="3" rule="CODSTA-89" ruleset="Coding Conventions">Declaration of variable 'argv' contains more than one level of pointer indirection</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="2" rule="JSF-097_c" ruleset="Joint Strike Fighter">Parameter 'argv' with array type was found in 'main' function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="2" rule="CODSTA-142" ruleset="Coding Conventions">Parameter 'argv' with array type was found in 'main' function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="3" rule="CERT_C-API00-a" ruleset="CERT-API00_C (REC) Functions should validate their parameters">Parameter 'argv' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="5" endline="5" begincolumn="25" endcolumn="26" priority="3" rule="CODSTA-86" ruleset="Coding Conventions">Parameter 'argv' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="6" endline="6" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 0</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-A8_5_2-a" ruleset="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization">The definition of the 'point' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-MCPP-38" ruleset="Coding Conventions for Modern C++">The definition of the 'point' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-45" ruleset="Naming Conventions">The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="JSF-048" ruleset="Joint Strike Fighter">The identifier 'point' differs only by case from identifier 'Point' declared in file 'Point.hpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: point</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: point</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-2_10_1" ruleset="MISRA C++ 2008">Identifier name: 'point' differs only by case from its type name: 'Point'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-2_4_1-a" ruleset="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier">Identifier name: 'point' differs only by case from its type name: 'Point'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-M2_10_1-a" ruleset="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous">Identifier name: 'point' differs only by case from its type name: 'Point'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-47" ruleset="Naming Conventions">Identifier name: 'point' differs only by case from its type name: 'Point'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="MRM-18" ruleset="Memory and Resource Management">Locally allocated memory is not deleted locally for : point</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="1" rule="CERT_C-MEM00-a" ruleset="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction">Locally allocated memory is not deleted locally for : point</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'point' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="8" endcolumn="9" priority="3" rule="COMMENT-05" ruleset="Comments">The 'point' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="2" rule="MISRA2012-RULE-11_9_a" ruleset="MISRA C 2012 Rules">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="2" rule="AUTOSAR-M4_10_2-a" ruleset="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="2" rule="MISRA2008-4_10_2" ruleset="MISRA C++ 2008">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="3" rule="CODSTA-CPP-63" ruleset="Coding Conventions for C++">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="2" rule="MISRAC2012-RULE_11_9-a" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="7" endline="7" begincolumn="16" endcolumn="17" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">Variable 'point' of pointer type is initialized with '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-23" ruleset="Coding Conventions">The 'if' statement doesn't have an 'else' clause</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="5" endcolumn="6" priority="2" rule="SECURITY-35" ruleset="Security">No value of command line should be trusted: argc</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="12" endcolumn="13" priority="3" rule="JSF-151" ruleset="Joint Strike Fighter">Literal constant '3' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="12" endcolumn="13" priority="3" rule="CODSTA-26" ruleset="Coding Conventions">Literal constant '3' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="12" endcolumn="13" priority="2" rule="AUTOSAR-A5_1_1-a" ruleset="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead">Literal constant '3' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="8" endline="8" begincolumn="12" endcolumn="13" priority="3" rule="HICPP-5_1_1-a" ruleset="HIC++ 5.1.1 Use symbolic names instead of literal values in code">Literal constant '3' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="2" endcolumn="3" priority="2" rule="SECURITY-35" ruleset="Security">No value of command line should be trusted: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="2" endcolumn="3" priority="3" rule="MRM-34" ruleset="Memory and Resource Management">Check the return value of new</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="2" endcolumn="3" priority="1" rule="CERT_CPP-MEM52-a" ruleset="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors">Check the return value of new</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="MISRA2012-DIR-4_12" ruleset="MISRA C 2012 Directives">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="MISRA2008-18_4_1" ruleset="MISRA C++ 2008">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="MISRAC2012-RULE_21_3-a" ruleset="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="AUTOSAR-A18_5_2-a" ruleset="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="JSF-206" ruleset="Joint Strike Fighter">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="MISRA2012-RULE-21_3" ruleset="MISRA C 2012 Rules">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="3" rule="MISRA2004-20_4" ruleset="MISRA C 2004">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="MISRAC2012-DIR_4_12-a" ruleset="Dir 4.12 (Required) Dynamic memory allocation shall not be used">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="SECURITY-35" ruleset="Security">No value of command line should be trusted: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="SECURITY-35" ruleset="Security">No value of command line should be trusted: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="MISRAC2012-RULE_21_7-a" ruleset="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h&gt; shall not be used">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="3" rule="CERT_CPP-ERR62-a" ruleset="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="MISRA2008-18_0_2" ruleset="MISRA C++ 2008">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="3" rule="CERT_C-ERR34-a" ruleset="CERT-ERR34_C (RULE) Detect errors when converting a string to a number">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="3" rule="MISRA2004-20_10" ruleset="MISRA C 2004">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="3" rule="CERT_C-MSC24-a" ruleset="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="CERT_C-ERR07-a" ruleset="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-A18_0_2-b" ruleset="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-A18_0_2-a" ruleset="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="MISRA2012-RULE-21_7" ruleset="MISRA C 2012 Rules">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="20" endcolumn="21" priority="2" rule="JSF-023" ruleset="Joint Strike Fighter">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="25" endcolumn="26" priority="2" rule="SECURITY-35" ruleset="Security">No value of command line should be trusted: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="SECURITY-35" ruleset="Security">No value of command line should be trusted: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="MISRAC2012-RULE_21_7-a" ruleset="Rule 21.7 (Required) The atof, atoi, atol and atoll functions of &lt;stdlib.h&gt; shall not be used">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="3" rule="CERT_CPP-ERR62-a" ruleset="CERT-ERR62_CPP (RULE) Detect errors when converting a string to a number">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="MISRA2008-18_0_2" ruleset="MISRA C++ 2008">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="3" rule="CERT_C-ERR34-a" ruleset="CERT-ERR34_C (RULE) Detect errors when converting a string to a number">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="3" rule="MISRA2004-20_10" ruleset="MISRA C 2004">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="3" rule="CERT_C-MSC24-a" ruleset="CERT-MSC24_C (REC) Do not use deprecated or obsolescent functions">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="CERT_C-ERR07-a" ruleset="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="AUTOSAR-A18_0_2-b" ruleset="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="AUTOSAR-A18_0_2-a" ruleset="AUTOSAR A18-0-2 The error state of a conversion from string to a numeric value shall be checked">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="MISRA2012-RULE-21_7" ruleset="MISRA C 2012 Rules">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="35" endcolumn="36" priority="2" rule="JSF-023" ruleset="Joint Strike Fighter">Usage of 'atoi' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="40" endcolumn="41" priority="2" rule="SECURITY-35" ruleset="Security">No value of command line should be trusted: argv</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="45" endcolumn="46" priority="3" rule="JSF-151" ruleset="Joint Strike Fighter">Literal constant '2' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="45" endcolumn="46" priority="3" rule="CODSTA-26" ruleset="Coding Conventions">Literal constant '2' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="45" endcolumn="46" priority="2" rule="AUTOSAR-A5_1_1-a" ruleset="AUTOSAR A5-1-1 Literal values shall not be used apart from type initialization, otherwise symbolic names shall be used instead">Literal constant '2' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="9" endline="9" begincolumn="45" endcolumn="46" priority="3" rule="HICPP-5_1_1-a" ruleset="HIC++ 5.1.1 Use symbolic names instead of literal values in code">Literal constant '2' is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="13" endline="13" begincolumn="1" endcolumn="2" priority="3" rule="FORMAT-25_b" ruleset="Formatting">'return' statement should be used with parenthesis</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-31" ruleset="Metrics">The assertion density is lower than two assertions per function</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-03" ruleset="Naming Conventions">The filename 'DivisionByZero.cpp' should be in lowercase</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-38" ruleset="Naming Conventions">Implementation file 'DivisionByZero.cpp' should have the file name extension ".cc"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="5" rule="PFO-04" ruleset="Physical File Organization">Implementation file 'DivisionByZero.cpp' should declare a local constant string that begins from characters "@(#)" </violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-02" ruleset="Comments">Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_b" ruleset="Joint Strike Fighter">Add comment containing the copyright information at the begin of file 'DivisionByZero.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-03" ruleset="Comments">Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_a" ruleset="Joint Strike Fighter">Add comment containing the information on the file at the begin of file 'DivisionByZero.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-032" ruleset="Joint Strike Fighter">Not a proper header file (*.h ) is being included: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-08" ruleset="Preprocessor">Not a proper header file (*.h ) is being included: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="PREPROC-09" ruleset="Preprocessor">Disallowed #include notation is being used: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="JSF-033" ruleset="Joint Strike Fighter">Disallowed #include notation is being used: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'double' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="GLOBAL-UNUSEDFUNC" ruleset="Global Static Analysis">The 'getShapeRatio' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="4" rule="AUTOSAR-M0_1_10-a" ruleset="AUTOSAR M0-1-10 Every defined function should be called at least once">The 'getShapeRatio' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-0_1_10_b" ruleset="MISRA C++ 2008">The 'getShapeRatio' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="CODSTA-MCPP-08_b" ruleset="Coding Conventions for Modern C++">The return type of the 'getShapeRatio' function should be declared as 'auto'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'getShapeRatio' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'getShapeRatio' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'getShapeRatio' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'getShapeRatio' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'getShapeRatio' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'getShapeRatio' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'getShapeRatio' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'getShapeRatio' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'getShapeRatio' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'getShapeRatio' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'getShapeRatio' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global function 'getShapeRatio' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global function 'getShapeRatio' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global function 'getShapeRatio' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global function 'getShapeRatio' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14" ruleset="Comments">The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'getShapeRatio' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'shape1' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'shape2' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'getShapeRatio' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="FORMAT-28" ruleset="Formatting">Return type is not placed in line before function 'getShapeRatio'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'getShapeRatio' has Cyclomatic Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'getShapeRatio' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-17" ruleset="Naming Conventions">Naming convention not followed: getShapeRatio</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared: shape1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared: shape1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare parameter 'shape1' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare parameter 'shape1' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare parameter 'shape1' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare parameter 'shape1' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare parameter 'shape1' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="CERT_C-API00-a" ruleset="CERT-API00_C (REC) Functions should validate their parameters">Parameter 'shape1' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-86" ruleset="Coding Conventions">Parameter 'shape1' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="2" rule="AUTOSAR-M7_1_2-b" ruleset="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified">Pass parameter "shape1" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="4" rule="MISRAC2012-RULE_8_13-a" ruleset="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible">Pass parameter "shape1" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="CERT_C-DCL13-a" ruleset="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const">Pass parameter "shape1" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="MISRA2004-16_7" ruleset="MISRA C 2004">Pass parameter "shape1" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="4" rule="MISRA2012-RULE-8_13_a" ruleset="MISRA C 2012 Rules">Pass parameter "shape1" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="4" rule="JSF-118" ruleset="Joint Strike Fighter">Pass parameter "shape1" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="2" rule="MISRA2008-7_1_2_a" ruleset="MISRA C++ 2008">Pass parameter "shape1" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="28" endcolumn="29" priority="3" rule="NAMING-HN-34" ruleset="Hungarian Notation">The 'shape1' identifier should have the 'p' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared: shape2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared: shape2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare parameter 'shape2' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare parameter 'shape2' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare parameter 'shape2' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare parameter 'shape2' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare parameter 'shape2' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="CERT_C-API00-a" ruleset="CERT-API00_C (REC) Functions should validate their parameters">Parameter 'shape2' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="CODSTA-86" ruleset="Coding Conventions">Parameter 'shape2' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="2" rule="AUTOSAR-M7_1_2-b" ruleset="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified">Pass parameter "shape2" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="4" rule="MISRAC2012-RULE_8_13-a" ruleset="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible">Pass parameter "shape2" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="CERT_C-DCL13-a" ruleset="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const">Pass parameter "shape2" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="MISRA2004-16_7" ruleset="MISRA C 2004">Pass parameter "shape2" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="4" rule="MISRA2012-RULE-8_13_a" ruleset="MISRA C 2012 Rules">Pass parameter "shape2" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="4" rule="JSF-118" ruleset="Joint Strike Fighter">Pass parameter "shape2" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="2" rule="MISRA2008-7_1_2_a" ruleset="MISRA C++ 2008">Pass parameter "shape2" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="3" begincolumn="43" endcolumn="44" priority="3" rule="NAMING-HN-34" ruleset="Hungarian Notation">The 'shape2' identifier should have the 'p' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="4" endline="4" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 0</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="1" endcolumn="2" priority="3" rule="FORMAT-25_b" ruleset="Formatting">'return' statement should be used with parenthesis</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="8" endcolumn="9" priority="5" rule="MISRA2008-0_4_2" ruleset="MISRA C++ 2008">floating-point arithmetic is not documented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="8" endcolumn="9" priority="3" rule="OWASP2019-API9-d" ruleset="OWASP API9 Improper Assets Management">floating-point arithmetic is not documented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="8" endcolumn="9" priority="3" rule="COMMENT-10" ruleset="Comments">floating-point arithmetic is not documented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="5" endline="5" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-M0_4_2-a" ruleset="AUTOSAR M0-4-2 Use of floating-point arithmetic shall be documented">floating-point arithmetic is not documented</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-18" ruleset="Preprocessor">&lt;stdio.h&gt; library shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="JSF-022" ruleset="Joint Strike Fighter">&lt;stdio.h&gt; library shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-31" ruleset="Metrics">The assertion density is lower than two assertions per function</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-03" ruleset="Naming Conventions">The filename 'MemoryLeak.cpp' should be in lowercase</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-38" ruleset="Naming Conventions">Implementation file 'MemoryLeak.cpp' should have the file name extension ".cc"</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="5" rule="PFO-04" ruleset="Physical File Organization">Implementation file 'MemoryLeak.cpp' should declare a local constant string that begins from characters "@(#)" </violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-18_0_1" ruleset="MISRA C++ 2008">Instead of C library header '&lt;stdio.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-1_3_3-a" ruleset="HIC++ 1.3.3 Do not use the C Standard Library .h headers">Instead of C library header '&lt;stdio.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A18_0_1-a" ruleset="AUTOSAR A18-0-1 The C library facilities shall only be accessed through C++ library headers">Instead of C library header '&lt;stdio.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-CPP-59" ruleset="Coding Conventions for C++">Instead of C library header '&lt;stdio.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A1_1_1-d" ruleset="AUTOSAR A1-1-1 All code shall conform to ISO/IEC 14882:2014 - Programming Language C++ and shall not use deprecated features">Instead of C library header '&lt;stdio.h&gt;' the corresponding C++ library header should be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-02" ruleset="Comments">Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_b" ruleset="Joint Strike Fighter">Add comment containing the copyright information at the begin of file 'MemoryLeak.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-03" ruleset="Comments">Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_a" ruleset="Joint Strike Fighter">Add comment containing the information on the file at the begin of file 'MemoryLeak.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="4" rule="HICPP-17_2_1-a" ruleset="HIC++ 17.2.1 Wrap use of the C Standard Library">Ensure that C Standard Library is securely used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-M27_0_1-a" ruleset="AUTOSAR M27-0-1 The stream input/output library &lt;cstdio&gt; shall not be used">&lt;stdio.h&gt; library shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-27_0_1" ruleset="MISRA C++ 2008">&lt;stdio.h&gt; library shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-20_9" ruleset="MISRA C 2004">&lt;stdio.h&gt; library shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Type 'IOException' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Type 'IOException' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Type 'IOException' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Type 'IOException' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-14" ruleset="Comments">The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The declaration of the 'IOException' type should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="2" rule="CODSTA-CPP-19" ruleset="Coding Conventions for C++">Class 'IOException' does not define any constructors</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="4" rule="AUTOSAR-A12_4_2-a" ruleset="AUTOSAR A12-4-2 If a public destructor of a class is non-virtual, then the class should be declared final">Class 'IOException' should be final</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-MCPP-23" ruleset="Coding Conventions for Modern C++">Class 'IOException' should be final</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-12_5_1-a" ruleset="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes">Explicitly declare default constructor in 'IOException'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-12_5_1-a" ruleset="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes">Explicitly declare destructor in 'IOException'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-12_5_1-a" ruleset="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes">Explicitly declare copy assignment operator in 'IOException'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-12_5_1-a" ruleset="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes">Explicitly declare move assignment operator in 'IOException'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-12_5_1-a" ruleset="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes">Explicitly declare copy constructor in 'IOException'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-12_5_1-a" ruleset="HIC++ 12.5.1 Define explicitly =default or =delete implicit special member functions of concrete classes">Explicitly declare move constructor in 'IOException'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="MRM-04" ruleset="Memory and Resource Management">Class 'IOException' missing assignment operator or special comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="MRM-05" ruleset="Memory and Resource Management">Class 'IOException' missing copy constructor or special comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-40" ruleset="Naming Conventions">All letters beside the first one in name 'IOException' should be lowercase</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="3" endline="3" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-HN-19" ruleset="Hungarian Notation">The 'IOException' identifier should have the 'C' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="CODSTA-MCPP-08_b" ruleset="Coding Conventions for Modern C++">The return type of the 'readIntegerArray' function should be declared as 'auto'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'readIntegerArray' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'readIntegerArray' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'readIntegerArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'readIntegerArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'readIntegerArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'readIntegerArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'readIntegerArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'readIntegerArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'readIntegerArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'readIntegerArray' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'readIntegerArray' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global function 'readIntegerArray' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global function 'readIntegerArray' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global function 'readIntegerArray' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global function 'readIntegerArray' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">Function 'readIntegerArray' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">Function 'readIntegerArray' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14" ruleset="Comments">The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'readIntegerArray' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'file' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'pSize' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'readIntegerArray' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="FORMAT-28" ruleset="Formatting">Return type is not placed in line before function 'readIntegerArray'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'readIntegerArray' has Cyclomatic Complexity value: 3</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'readIntegerArray' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="NAMING-17" ruleset="Naming Conventions">Naming convention not followed: readIntegerArray</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="3" rule="GLOBAL-UNUSEDFUNC" ruleset="Global Static Analysis">The 'readIntegerArray' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="4" rule="AUTOSAR-M0_1_10-a" ruleset="AUTOSAR M0-1-10 Every defined function should be called at least once">The 'readIntegerArray' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-0_1_10_b" ruleset="MISRA C++ 2008">The 'readIntegerArray' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="NAMING-45" ruleset="Naming Conventions">The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="JSF-048" ruleset="Joint Strike Fighter">The identifier 'file' differs only by case from identifier 'FILE' declared in file 'stdio.h'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared: file</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared: file</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="2" rule="MISRA2008-2_10_1" ruleset="MISRA C++ 2008">Identifier name: 'file' differs only by case from its type name: 'FILE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="HICPP-2_4_1-a" ruleset="HIC++ 2.4.1 Ensure that each identifier is distinct from any other visible identifier">Identifier name: 'file' differs only by case from its type name: 'FILE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="2" rule="AUTOSAR-M2_10_1-a" ruleset="AUTOSAR M2-10-1 Different identifiers shall be typographically unambiguous">Identifier name: 'file' differs only by case from its type name: 'FILE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="NAMING-47" ruleset="Naming Conventions">Identifier name: 'file' differs only by case from its type name: 'FILE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare parameter 'file' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare parameter 'file' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare parameter 'file' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare parameter 'file' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare parameter 'file' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="CERT_C-API00-a" ruleset="CERT-API00_C (REC) Functions should validate their parameters">Parameter 'file' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="CODSTA-86" ruleset="Coding Conventions">Parameter 'file' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="28" endcolumn="29" priority="3" rule="NAMING-HN-34" ruleset="Hungarian Notation">The 'file' identifier should have the 'p' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="34" endcolumn="35" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="CERT_C-API00-a" ruleset="CERT-API00_C (REC) Functions should validate their parameters">Parameter 'pSize' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="CODSTA-86" ruleset="Coding Conventions">Parameter 'pSize' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="2" rule="AUTOSAR-M7_1_2-b" ruleset="AUTOSAR M7-1-2 A pointer or reference parameter in a function shall be declared as pointer to const or reference to const if the corresponding object is not modified">Pass parameter "pSize" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="4" rule="MISRAC2012-RULE_8_13-a" ruleset="Rule 8.13 (Advisory) A pointer should point to a const-qualified type whenever possible">Pass parameter "pSize" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="CERT_C-DCL13-a" ruleset="CERT-DCL13_C (REC) Declare function parameters that are pointers to values not changed by the function as const">Pass parameter "pSize" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="MISRA2004-16_7" ruleset="MISRA C 2004">Pass parameter "pSize" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="4" rule="MISRA2012-RULE-8_13_a" ruleset="MISRA C 2012 Rules">Pass parameter "pSize" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="4" rule="JSF-118" ruleset="Joint Strike Fighter">Pass parameter "pSize" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="2" rule="MISRA2008-7_1_2_a" ruleset="MISRA C++ 2008">Pass parameter "pSize" with const specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="NAMING-HN-23" ruleset="Hungarian Notation">The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="NAMING-HN-31" ruleset="Hungarian Notation">The 'pSize' identifier should have the 'n' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="5" endline="5" begincolumn="39" endcolumn="40" priority="3" rule="NAMING-HN-44" ruleset="Hungarian Notation">The 'pSize' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="6" endline="6" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 0</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_21_6-a" ruleset="Rule 21.6 (Required) The Standard Library input/output functions shall not be used">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-21_6" ruleset="MISRA C 2012 Rules">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-ERR02-a" ruleset="CERT-ERR02_C (REC) Avoid in-band error indicators">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-110" ruleset="Coding Conventions">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="CERT_C-ERR07-b" ruleset="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'fscanf' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'fscanf' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'fscanf' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'fscanf' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "fscanf" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="APSC_DV-002390-c" ruleset="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways.">There should be number describing size of variable in '%d' on position:1</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="SECURITY-14" ruleset="Security">There should be number describing size of variable in '%d' on position:1</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-01" ruleset="Coding Conventions for C++">Prefer iostream.h to stdio.h</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-STR07-a" ruleset="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A27_0_4-b" ruleset="AUTOSAR A27-0-4 C-style strings shall not be used">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-INT05-a" ruleset="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="1" endcolumn="2" priority="2" rule="SECURITY-13" ruleset="Security">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="14" endcolumn="15" priority="5" rule="CWE-798-a" ruleset="CWE-798 Use of Hard-coded Credentials">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="14" endcolumn="15" priority="5" rule="CODSTA-203" ruleset="Coding Conventions">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="14" endcolumn="15" priority="1" rule="APSC_DV-003110-a" ruleset="APSC_DV-003110 The application must not contain embedded authentication data.">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="14" endcolumn="15" priority="1" rule="CERT_C-MSC41-a" ruleset="CERT-MSC41_C (RULE) Never hard code sensitive information">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="14" endcolumn="15" priority="2" rule="AUTOSAR-A27_0_4-d" ruleset="AUTOSAR A27-0-4 C-style strings shall not be used">The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="7" endline="7" begincolumn="14" endcolumn="15" priority="3" rule="PB-76" ruleset="Possible Bugs">The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="1" endcolumn="2" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A8_5_2-a" ruleset="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization">The definition of the 'data' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-MCPP-38" ruleset="Coding Conventions for Modern C++">The definition of the 'data' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="2" rule="CODSTA-MCPP-08_a" ruleset="Coding Conventions for Modern C++">The 'data' variable should be declared with the 'auto' type specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare local variable 'data' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare local variable 'data' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare local variable 'data' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare local variable 'data' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare local variable 'data' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'data' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-05" ruleset="Comments">The 'data' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="MRM-34" ruleset="Memory and Resource Management">Check the return value of new</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="1" rule="CERT_CPP-MEM52-a" ruleset="CERT-MEM52_CPP (RULE) Detect and handle memory allocation errors">Check the return value of new</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-22" ruleset="Naming Conventions">Naming convention not followed: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-HN-16" ruleset="Hungarian Notation">The 'data' identifier should have the 'prg' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-HN-23" ruleset="Hungarian Notation">The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-HN-31" ruleset="Hungarian Notation">The 'data' identifier should have the 'n' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-HN-34" ruleset="Hungarian Notation">The 'data' identifier should have the 'p' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-HN-44" ruleset="Hungarian Notation">The 'data' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="2" rule="MISRA2012-DIR-4_12" ruleset="MISRA C 2012 Directives">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="2" rule="MISRA2008-18_4_1" ruleset="MISRA C++ 2008">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="2" rule="MISRAC2012-RULE_21_3-a" ruleset="Rule 21.3 (Required) The memory allocation and deallocation functions of &lt;stdlib.h&gt; shall not be used">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="2" rule="AUTOSAR-A18_5_2-a" ruleset="AUTOSAR A18-5-2 Non-placement new or delete expressions shall not be used">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="2" rule="JSF-206" ruleset="Joint Strike Fighter">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="2" rule="MISRA2012-RULE-21_3" ruleset="MISRA C 2012 Rules">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="3" rule="MISRA2004-20_4" ruleset="MISRA C 2004">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="2" rule="MISRAC2012-DIR_4_12-a" ruleset="Dir 4.12 (Required) Dynamic memory allocation shall not be used">'new' operator should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="13" endcolumn="14" priority="3" rule="STL-10" ruleset="STL Best Practices">Use vector or string instead of dynamically allocated array</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="8" begincolumn="17" endcolumn="18" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-83" ruleset="Coding Conventions">A loop does not have a fixed upper nor lower bound</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="6" endcolumn="7" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="2" rule="AUTOSAR-A8_5_2-a" ruleset="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization">The definition of the 'i' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="3" rule="CODSTA-MCPP-38" ruleset="Coding Conventions for Modern C++">The definition of the 'i' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="3" rule="PORT-13" ruleset="Portability">'i' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'i' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="10" endcolumn="11" priority="3" rule="COMMENT-05" ruleset="Comments">The 'i' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="17" endcolumn="18" priority="1" rule="APSC_DV-002560-k" ruleset="APSC_DV-002560 The application must not be subject to input handling vulnerabilities.">User input was directly used as a loop boundary: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="17" endcolumn="18" priority="1" rule="APSC_DV-002550-k" ruleset="APSC_DV-002550 The application must not be vulnerable to XML-oriented attacks.">User input was directly used as a loop boundary: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="17" endcolumn="18" priority="2" rule="APSC_DV-001290-b" ruleset="APSC_DV-001290 The application must protect audit information from unauthorized modification.">User input was directly used as a loop boundary: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="17" endcolumn="18" priority="2" rule="SECURITY-38" ruleset="Security">User input was directly used as a loop boundary: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="17" endcolumn="18" priority="2" rule="CWE-20-j" ruleset="CWE-20 Improper Input Validation">User input was directly used as a loop boundary: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="17" endcolumn="18" priority="2" rule="APSC_DV-002530-k" ruleset="APSC_DV-002530 The application must validate all input.">User input was directly used as a loop boundary: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="17" endcolumn="18" priority="2" rule="APSC_DV-002520-k" ruleset="APSC_DV-002520 The application must protect from canonical representation vulnerabilities.">User input was directly used as a loop boundary: pSize</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="9" begincolumn="29" endcolumn="30" priority="3" rule="OPT-04" ruleset="Optimization">Postfix operator applied to variable 'i'; prefer prefix type</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="2" endcolumn="3" priority="3" rule="CODSTA-23" ruleset="Coding Conventions">The 'if' statement doesn't have an 'else' clause</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="2" rule="MISRAC2012-RULE_21_6-a" ruleset="Rule 21.6 (Required) The Standard Library input/output functions shall not be used">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2012-RULE-21_6" ruleset="MISRA C 2012 Rules">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="3" rule="CERT_C-ERR02-a" ruleset="CERT-ERR02_C (REC) Avoid in-band error indicators">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-110" ruleset="Coding Conventions">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="2" rule="CERT_C-ERR07-b" ruleset="CERT-ERR07_C (REC) Prefer functions that support error checking over equivalent functions that don't">Usage of 'fscanf' function is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="2" rule="APSC_DV-002390-c" ruleset="APSC_DV-002390 XML-based applications must mitigate DoS attacks by using XML filters, parser options, or gateways.">There should be number describing size of variable in '%d' on position:1</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="2" rule="SECURITY-14" ruleset="Security">There should be number describing size of variable in '%d' on position:1</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="5" rule="CODSTA-CPP-01" ruleset="Coding Conventions for C++">Prefer iostream.h to stdio.h</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="1" rule="CERT_C-STR07-a" ruleset="CERT-STR07_C (REC) Use the bounds-checking interfaces for string manipulation">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A27_0_4-b" ruleset="AUTOSAR A27-0-4 C-style strings shall not be used">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="3" rule="CERT_C-INT05-a" ruleset="CERT-INT05_C (REC) Do not use input functions to convert character data if they cannot handle all possible inputs">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="6" endcolumn="7" priority="2" rule="SECURITY-13" ruleset="Security">Unsafe string function 'fscanf' is being used</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="19" endcolumn="20" priority="5" rule="CWE-798-a" ruleset="CWE-798 Use of Hard-coded Credentials">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="19" endcolumn="20" priority="5" rule="CODSTA-203" ruleset="Coding Conventions">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="19" endcolumn="20" priority="1" rule="APSC_DV-003110-a" ruleset="APSC_DV-003110 The application must not contain embedded authentication data.">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="19" endcolumn="20" priority="1" rule="CERT_C-MSC41-a" ruleset="CERT-MSC41_C (RULE) Never hard code sensitive information">The string literal is embedded directly in the code: %d</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="19" endcolumn="20" priority="2" rule="AUTOSAR-A27_0_4-d" ruleset="AUTOSAR A27-0-4 C-style strings shall not be used">The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="19" endcolumn="20" priority="3" rule="PB-76" ruleset="Possible Bugs">The string literal should not be passed as an argument of the 'const char *' type in the 'fscanf' function call</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="26" endcolumn="27" priority="3" rule="MISRA2004-17_4" ruleset="MISRA C 2004">Avoid indexing non-array objects</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2008-5_0_15" ruleset="MISRA C++ 2008">Avoid indexing non-array objects</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="10" endline="10" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-M5_0_15-a" ruleset="AUTOSAR M5-0-15 Array indexing shall be the only form of pointer arithmetic">Avoid indexing non-array objects</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="3" endcolumn="4" priority="2" rule="JSF-208" ruleset="Joint Strike Fighter">c++ exception handling structure is used in function 'readIntegerArray'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="11" endline="11" begincolumn="3" endcolumn="4" priority="2" rule="EXCEPT-05" ruleset="Exceptions">c++ exception handling structure is used in function 'readIntegerArray'</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="12" endline="12" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="12" endline="12" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="12" endline="12" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="14" endline="14" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="14" endline="14" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="14" endline="14" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="14" endline="14" begincolumn="1" endcolumn="2" priority="3" rule="FORMAT-25_b" ruleset="Formatting">'return' statement should be used with parenthesis</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-032" ruleset="Joint Strike Fighter">Not a proper header file (*.h ) is being included: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-08" ruleset="Preprocessor">Not a proper header file (*.h ) is being included: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="PREPROC-09" ruleset="Preprocessor">Disallowed #include notation is being used: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="2" rule="JSF-033" ruleset="Joint Strike Fighter">Disallowed #include notation is being used: "Shapes.hpp"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-31" ruleset="Metrics">The assertion density is lower than two assertions per function</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-03" ruleset="Naming Conventions">The filename 'DeadLock.cpp' should be in lowercase</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="NAMING-38" ruleset="Naming Conventions">Implementation file 'DeadLock.cpp' should have the file name extension ".cc"</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="5" rule="PFO-04" ruleset="Physical File Organization">Implementation file 'DeadLock.cpp' should declare a local constant string that begins from characters "@(#)" </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-02" ruleset="Comments">Add comment containing the copyright information at the begin of file 'DeadLock.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_b" ruleset="Joint Strike Fighter">Add comment containing the copyright information at the begin of file 'DeadLock.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="COMMENT-03" ruleset="Comments">Add comment containing the information on the file at the begin of file 'DeadLock.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="1" endline="1" begincolumn="0" endcolumn="1" priority="3" rule="JSF-133_a" ruleset="Joint Strike Fighter">Add comment containing the information on the file at the begin of file 'DeadLock.cpp'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-10_c" ruleset="Preprocessor">#if pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_e" ruleset="MISRA C++ 2008">#if pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-f" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">#if pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-11_b" ruleset="Preprocessor">The #if preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="3" endline="3" begincolumn="0" endcolumn="1" priority="2" rule="JSF-026_b" ruleset="Joint Strike Fighter">The #if preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="7" endline="7" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'THREAD' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="8" endline="8" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'THREAD_CREATE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'THREAD_CREATE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'THREAD_CREATE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="36" endcolumn="37" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="36" endcolumn="37" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="36" endcolumn="37" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="36" endcolumn="37" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="36" endcolumn="37" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="36" endcolumn="37" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="64" endcolumn="65" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="64" endcolumn="65" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="64" endcolumn="65" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="64" endcolumn="65" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="64" endcolumn="65" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="9" endline="9" begincolumn="64" endcolumn="65" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="11" endline="11" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'LOCK' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'LOCK_ACQUIRE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'LOCK_ACQUIRE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="49" endcolumn="50" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="49" endcolumn="50" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="49" endcolumn="50" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="49" endcolumn="50" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="49" endcolumn="50" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="12" endline="12" begincolumn="49" endcolumn="50" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'LOCK_RELEASE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'LOCK_RELEASE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'LOCK_RELEASE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="49" endcolumn="50" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="49" endcolumn="50" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="49" endcolumn="50" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="49" endcolumn="50" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="49" endcolumn="50" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="13" endline="13" begincolumn="49" endcolumn="50" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'SLEEP' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'SLEEP' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="15" endline="15" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'SLEEP' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="17" endline="17" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_c" ruleset="MISRA C++ 2008">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="17" endline="17" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-c" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="17" endline="17" begincolumn="0" endcolumn="1" priority="2" rule="JSF-026" ruleset="Joint Strike Fighter">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="17" endline="17" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-11" ruleset="Preprocessor">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-10_c" ruleset="Preprocessor">#if pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_e" ruleset="MISRA C++ 2008">#if pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-f" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">#if pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-11_b" ruleset="Preprocessor">The #if preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="2" rule="JSF-026_b" ruleset="Joint Strike Fighter">The #if preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-04" ruleset="Formatting">Line has over 79 characters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="3" rule="JSF-041" ruleset="Joint Strike Fighter">Line contains more than 120 characters: 302</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="19" endline="19" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-26" ruleset="Metrics">Line contains more than 120 characters: 302</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="21" endline="21" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-18_1_1-a" ruleset="HIC++ 18.1.1 Do not use platform specific multi-threading facilities">Do not use platform-specific multi-threading facilities: &lt;pthread.h&gt;</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="24" endline="24" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-26" ruleset="Preprocessor">#else pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="24" endline="24" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-a" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">#else pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="24" endline="24" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_c" ruleset="MISRA C++ 2008">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="24" endline="24" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-c" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="24" endline="24" begincolumn="0" endcolumn="1" priority="2" rule="JSF-026" ruleset="Joint Strike Fighter">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="24" endline="24" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-11" ruleset="Preprocessor">The #else preprocessor directive is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="30" endline="30" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="35" endline="35" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="37" endline="37" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="39" endline="39" begincolumn="11" endcolumn="12" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="41" endline="41" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-10_b" ruleset="Preprocessor">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="41" endline="41" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_d" ruleset="MISRA C++ 2008">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="41" endline="41" begincolumn="0" endcolumn="1" priority="3" rule="JSF-028_b" ruleset="Joint Strike Fighter">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="41" endline="41" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-e" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="41" endline="41" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-26" ruleset="Preprocessor">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="41" endline="41" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-a" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'THREAD'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="43" endline="43" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'THREAD' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="4" rule="PREPROC-04" ruleset="Preprocessor">'THREAD_RETURN_TYPE' part of statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'THREAD_RETURN_TYPE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="44" endline="44" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'THREAD_RETURN_TYPE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'THREAD_CREATE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'THREAD_CREATE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'THREAD_CREATE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: THREAD_CREATE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'THREAD_CREATE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="52" endcolumn="53" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="52" endcolumn="53" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="52" endcolumn="53" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="52" endcolumn="53" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="52" endcolumn="53" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="52" endcolumn="53" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'thread' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="64" endcolumn="65" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="64" endcolumn="65" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="64" endcolumn="65" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="64" endcolumn="65" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="64" endcolumn="65" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="45" endline="45" begincolumn="64" endcolumn="65" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'func' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'LOCK'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="47" endline="47" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'LOCK' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'LOCK_ACQUIRE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'LOCK_ACQUIRE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'LOCK_ACQUIRE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: LOCK_ACQUIRE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'LOCK_ACQUIRE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="47" endcolumn="48" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="47" endcolumn="48" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="47" endcolumn="48" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="47" endcolumn="48" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="47" endcolumn="48" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="48" endline="48" begincolumn="47" endcolumn="48" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'LOCK_RELEASE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'LOCK_RELEASE' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'LOCK_RELEASE'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: LOCK_RELEASE</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'LOCK_RELEASE' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="49" endcolumn="50" priority="3" rule="MISRA2004-19_10" ruleset="MISRA C 2004">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="49" endcolumn="50" priority="2" rule="MISRA2008-16_0_6" ruleset="MISRA C++ 2008">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="49" endcolumn="50" priority="2" rule="MISRA2012-RULE-20_7" ruleset="MISRA C 2012 Rules">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="49" endcolumn="50" priority="2" rule="AUTOSAR-M16_0_6-a" ruleset="AUTOSAR M16-0-6 In the definition of a function-like macro, each instance of a parameter shall be enclosed in parentheses, unless it is used as the operand of # or ##">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="49" endcolumn="50" priority="1" rule="CERT_C-PRE01-a" ruleset="CERT-PRE01_C (REC) Use parentheses within macros around parameter names">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="49" endline="49" begincolumn="49" endcolumn="50" priority="2" rule="MISRAC2012-RULE_20_7-a" ruleset="Rule 20.7 (Required) Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses">Each instance of parameter: 'lock' should be enclosed in parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_0_4" ruleset="MISRA C++ 2008">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_9-a" ruleset="Dir 4.9 (Advisory) A function should be used in preference to a function-like macro where they are interchangeable">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-19_7" ruleset="MISRA C 2004">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="2" rule="JSF-029" ruleset="Joint Strike Fighter">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_9" ruleset="MISRA C 2012 Directives">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="CERT_C-PRE00-a" ruleset="CERT-PRE00_C (REC) Prefer inline or static functions to function-like macros">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-096" ruleset="MISRA C 1998">Body of macro 'SLEEP' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="1" rule="CERT_C-PRE02-a" ruleset="CERT-PRE02_C (REC) Macro replacement lists should be parenthesized">Body of macro 'SLEEP' is defined without parentheses</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'SLEEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not define function-like macro: SLEEP</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="51" endline="51" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-14" ruleset="Preprocessor">Not all body of macro 'SLEEP' is enclosed in braces</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="53" endline="53" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-10_b" ruleset="Preprocessor">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="53" endline="53" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_d" ruleset="MISRA C++ 2008">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="53" endline="53" begincolumn="0" endcolumn="1" priority="3" rule="JSF-028_b" ruleset="Joint Strike Fighter">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="53" endline="53" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-e" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">#endif pre-processor directive should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="2" rule="JSF-030" ruleset="Joint Strike Fighter">Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-03" ruleset="Coding Conventions">Define constant 'MAX_OBJECTS' using 'const' or 'enum' instead of '#define'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'MAX_OBJECTS'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'MAX_OBJECTS'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'MAX_OBJECTS'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'MAX_OBJECTS'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'MAX_OBJECTS'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'MAX_OBJECTS'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'MAX_OBJECTS'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="55" endline="55" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-37" ruleset="Coding Conventions">Replace the 'MAX_OBJECTS' macro with a constant variable</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-37" ruleset="Coding Conventions">Replace the 'STEP' macro with a constant variable</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="2" rule="JSF-030" ruleset="Joint Strike Fighter">Define constant 'STEP' using 'const' or 'enum' instead of '#define'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-03" ruleset="Coding Conventions">Define constant 'STEP' using 'const' or 'enum' instead of '#define'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="3" rule="JSF-031" ruleset="Joint Strike Fighter">Do not use the macro definition 'STEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_1_a" ruleset="MISRA C++ 2008">Do not use the macro definition 'STEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-16_1_1-a" ruleset="HIC++ 16.1.1 Use the preprocessor only for implementing include guards, and including header files with include guards">Do not use the macro definition 'STEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-01" ruleset="Preprocessor">Do not use the macro definition 'STEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A16_0_1-d" ruleset="AUTOSAR A16-0-1 The pre-processor shall only be used for unconditional and conditional file inclusion and include guards, and using the following directives: (1) #ifndef, (2) #ifdef, (3) #if, (4) #if defined, (5) #elif, (6) #else, (7) #define, (8) #endif, (9) #include">Do not use the macro definition 'STEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="2" rule="MISRA2008-16_2_2" ruleset="MISRA C++ 2008">Do not use #define to define constant: 'STEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="56" endline="56" begincolumn="0" endcolumn="1" priority="3" rule="PREPROC-12" ruleset="Preprocessor">Do not use #define to define constant: 'STEP'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'condition' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'message' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="FORMAT-28" ruleset="Formatting">Return type is not placed in line before function 'assertion'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'assertion' has Cyclomatic Complexity value: 2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'assertion' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="NAMING-17" ruleset="Naming Conventions">Naming convention not followed: assertion</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'assertion' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'assertion' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'assertion' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'assertion' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'assertion' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'assertion' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'assertion' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'assertion' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'assertion' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global function 'assertion' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global function 'assertion' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global function 'assertion' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global function 'assertion' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14" ruleset="Comments">The 'assertion' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'assertion' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="15" endcolumn="16" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="3" rule="PORT-13" ruleset="Portability">'condition' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare parameter 'condition' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare parameter 'condition' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare parameter 'condition' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare parameter 'condition' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare parameter 'condition' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="3" rule="NAMING-HN-22" ruleset="Hungarian Notation">The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="3" rule="NAMING-HN-30" ruleset="Hungarian Notation">The 'condition' identifier should have the 'n' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="19" endcolumn="20" priority="3" rule="NAMING-HN-43" ruleset="Hungarian Notation">The 'condition' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="30" endcolumn="31" priority="3" rule="FORMAT-47_a" ruleset="Formatting">The 'const' qualifier should be placed on the right hand side of the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="30" endcolumn="31" priority="3" rule="HICPP-7_1_4-a" ruleset="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to">The 'const' qualifier should be placed on the right hand side of the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="36" endcolumn="37" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'char' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="36" endcolumn="37" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'char' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="36" endcolumn="37" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'char' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="36" endcolumn="37" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'char' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare parameter 'message' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare parameter 'message' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare parameter 'message' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare parameter 'message' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare parameter 'message' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="CERT_C-API00-a" ruleset="CERT-API00_C (REC) Functions should validate their parameters">Parameter 'message' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="CODSTA-86" ruleset="Coding Conventions">Parameter 'message' is not validated before use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="NAMING-HN-05" ruleset="Hungarian Notation">The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="NAMING-HN-09" ruleset="Hungarian Notation">The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="NAMING-HN-10" ruleset="Hungarian Notation">The 'message' identifier should have the 'c' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="NAMING-HN-34" ruleset="Hungarian Notation">The 'message' identifier should have the 'p' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared: message</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="58" endline="58" begincolumn="42" endcolumn="43" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared: message</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="59" endline="59" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 0</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-23" ruleset="Coding Conventions">The 'if' statement doesn't have an 'else' clause</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="5" endcolumn="6" priority="3" rule="CODSTA-CPP-67" ruleset="Coding Conventions for C++">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-M5_3_1-a" ruleset="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-5_3_1" ruleset="MISRA C++ 2008">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="5" endcolumn="6" priority="5" rule="CODSTA-46" ruleset="Coding Conventions">In 'assertion' function use positive logic rather than negative logic whenever possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="60" endline="60" begincolumn="5" endcolumn="6" priority="3" rule="MISRA2004-12_6_a" ruleset="MISRA C 2004">The operand of logical operator '!' is not 'effectively Boolean'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="2" endcolumn="3" priority="3" rule="HICPP-15_1_1-a" ruleset="HIC++ 15.1.1 Only use instances of std::exception for exceptions">Throw only instances of std::exception</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="2" endcolumn="3" priority="4" rule="AUTOSAR-A15_1_1-a" ruleset="AUTOSAR A15-1-1 Only instances of types derived from std::exception shall be thrown">Throw only instances of std::exception</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="2" endcolumn="3" priority="2" rule="JSF-208" ruleset="Joint Strike Fighter">c++ exception handling structure is used in function 'assertion'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="2" endcolumn="3" priority="2" rule="EXCEPT-05" ruleset="Exceptions">c++ exception handling structure is used in function 'assertion'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="2" endcolumn="3" priority="4" rule="MISRA2008-15_0_2" ruleset="MISRA C++ 2008">Exception of type 'const char *' is thrown by pointer; throw by value instead</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="2" endcolumn="3" priority="2" rule="AUTOSAR-A15_1_2-a" ruleset="AUTOSAR A15-1-2 An exception object shall not be a pointer">Exception of type 'const char *' is thrown by pointer; throw by value instead</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="61" endline="61" begincolumn="2" endcolumn="3" priority="3" rule="EXCEPT-09" ruleset="Exceptions">Exception of type 'const char *' is thrown by pointer; throw by value instead</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="62" endline="62" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="62" endline="62" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="62" endline="62" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'changePositionMutex' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="5" rule="CODSTA-CPP-18" ruleset="Coding Conventions for C++">'changePositionMutex' should be encapsulated in a class</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="HICPP-7_4_1-a" ruleset="HIC++ 7.4.1 Ensure that any objects, functions or types to be used from a single translation unit are defined in an unnamed namespace in the main source file">The 'static' keyword is used in 'changePositionMutex' variable declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="CODSTA-CPP-50" ruleset="Coding Conventions for C++">The 'static' keyword is used in 'changePositionMutex' variable declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="JSF-207" ruleset="Joint Strike Fighter">Consider encapsulating 'changePositionMutex'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="CODSTA-CPP-82" ruleset="Coding Conventions for C++">Consider encapsulating 'changePositionMutex'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'changePositionMutex' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="COMMENT-05" ruleset="Comments">The 'changePositionMutex' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="HICPP-3_3_1-a" ruleset="HIC++ 3.3.1 Do not use variables with static storage duration">Use of variable "changePositionMutex" with static storage duration is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="5" rule="MISRA-022" ruleset="MISRA C 1998">Global variable 'changePositionMutex' is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="NAMING-18" ruleset="Naming Conventions">Naming convention not followed: changePositionMutex</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="NAMING-HN-38" ruleset="Hungarian Notation">The 'changePositionMutex' identifier should have the 's' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'changePositionMutex' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'changePositionMutex' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global variable 'changePositionMutex' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global variable 'changePositionMutex' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global variable 'changePositionMutex' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global variable 'changePositionMutex' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: changePositionMutex</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="65" endline="65" begincolumn="23" endcolumn="24" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: changePositionMutex</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_3_2-a" ruleset="AUTOSAR A3-3-2 Static and thread-local objects shall be constant-initialized">The declaration of variable 'ring' contains a non-constant initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-MCPP-32" ruleset="Coding Conventions for Modern C++">The declaration of variable 'ring' contains a non-constant initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A8_5_2-a" ruleset="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization">The definition of the 'ring' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-MCPP-38" ruleset="Coding Conventions for Modern C++">The definition of the 'ring' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Global variable 'ring' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Global variable 'ring' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Global variable 'ring' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Global variable 'ring' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Global variable 'ring' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Global variable 'ring' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Global variable 'ring' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global variable 'ring' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global variable 'ring' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global variable 'ring' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global variable 'ring' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="5" rule="CODSTA-CPP-18" ruleset="Coding Conventions for C++">'ring' should be encapsulated in a class</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="JSF-207" ruleset="Joint Strike Fighter">Consider encapsulating 'ring'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-CPP-82" ruleset="Coding Conventions for C++">Consider encapsulating 'ring'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'ring' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-05" ruleset="Comments">The 'ring' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-M15_3_1-a" ruleset="AUTOSAR M15-3-1 Exceptions shall be raised only after start-up and before termination">The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="CERT_CPP-ERR58-a" ruleset="CERT-ERR58_CPP (RULE) Handle all exceptions thrown before main() begins executing">The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-15_3_1" ruleset="MISRA C++ 2008">The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A15_5_3-f" ruleset="AUTOSAR A15-5-3 The std::terminate() function shall not be called implicitly">The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="CERT_CPP-ERR50-f" ruleset="CERT-ERR50_CPP (RULE) Do not abruptly terminate the program">The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="EXCEPT-08" ruleset="Exceptions">The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-15_5_3_f" ruleset="MISRA C++ 2008">The 'Point' constructor called during the creation of the 'ring' object should be declared as exception-safe</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-3_3_1-a" ruleset="HIC++ 3.3.1 Do not use variables with static storage duration">Use of variable "ring" with static storage duration is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-7_1_8-a" ruleset="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call">Variable 'ring' should be declared using 'auto' specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="5" rule="MISRA-022" ruleset="MISRA C 1998">Global variable 'ring' is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-18" ruleset="Naming Conventions">Naming convention not followed: ring</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="PB-11" ruleset="Possible Bugs">The type 'int' of function argument number '2' does not match declared type 'double'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="7" endcolumn="8" priority="3" rule="PORT-16" ruleset="Portability">Argument type conversion from "shorter" type to "longer" type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="24" endcolumn="25" priority="2" rule="MISRA2008-5_0_5_b" ruleset="MISRA C++ 2008">Implicit conversion from integral to floating type in function's argument</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="24" endcolumn="25" priority="3" rule="CERT_C-EXP39-a" ruleset="CERT-EXP39_C (RULE) Do not access a variable through a pointer of an incompatible type">Implicit conversion from integral to floating type in function's argument</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="24" endcolumn="25" priority="2" rule="AUTOSAR-M5_0_5-a" ruleset="AUTOSAR M5-0-5 There shall be no implicit floating-integral conversions">Implicit conversion from integral to floating type in function's argument</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="67" endline="67" begincolumn="24" endcolumn="25" priority="3" rule="MISRA2004-10_1_b" ruleset="MISRA C 2004">Implicit conversion from integral to floating type in function's argument</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="6" endcolumn="7" priority="3" rule="JSF-062" ruleset="Joint Strike Fighter">The operator '*', used for 'participants' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="6" endcolumn="7" priority="4" rule="FORMAT-32" ruleset="Formatting">The operator '*', used for 'participants' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="5" rule="CODSTA-CPP-18" ruleset="Coding Conventions for C++">'participants' should be encapsulated in a class</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="JSF-207" ruleset="Joint Strike Fighter">Consider encapsulating 'participants'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-CPP-82" ruleset="Coding Conventions for C++">Consider encapsulating 'participants'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'participants' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-05" ruleset="Comments">The 'participants' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-3_3_1-a" ruleset="HIC++ 3.3.1 Do not use variables with static storage duration">Use of variable "participants" with static storage duration is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="5" rule="MISRA-022" ruleset="MISRA C 1998">Global variable 'participants' is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-18" ruleset="Naming Conventions">Naming convention not followed: participants</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-HN-01" ruleset="Hungarian Notation">The 'participants' identifier should have the 'rg' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Global variable 'participants' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Global variable 'participants' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Global variable 'participants' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Global variable 'participants' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Global variable 'participants' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Global variable 'participants' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Global variable 'participants' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="STL-37" ruleset="STL Best Practices">The 'participants' array should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A18_1_1-a" ruleset="AUTOSAR A18-1-1 C-style arrays shall not be used">The 'participants' array should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global variable 'participants' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global variable 'participants' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global variable 'participants' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global variable 'participants' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-8_1_1-a" ruleset="HIC++ 8.1.1 Do not use multiple levels of pointer indirection">Declaration of variable 'participants' contains more than one level of pointer indirection</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-89" ruleset="Coding Conventions">Declaration of variable 'participants' contains more than one level of pointer indirection</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: participants</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="68" endline="68" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: participants</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="PORT-13" ruleset="Portability">'participantsCount' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="5" rule="CODSTA-CPP-18" ruleset="Coding Conventions for C++">'participantsCount' should be encapsulated in a class</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="JSF-207" ruleset="Joint Strike Fighter">Consider encapsulating 'participantsCount'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-82" ruleset="Coding Conventions for C++">Consider encapsulating 'participantsCount'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'participantsCount' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="COMMENT-05" ruleset="Comments">The 'participantsCount' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="HICPP-3_3_1-a" ruleset="HIC++ 3.3.1 Do not use variables with static storage duration">Use of variable "participantsCount" with static storage duration is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="5" rule="MISRA-022" ruleset="MISRA C 1998">Global variable 'participantsCount' is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-18" ruleset="Naming Conventions">Naming convention not followed: participantsCount</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-19" ruleset="Naming Conventions">Naming convention not followed: participantsCount</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-HN-22" ruleset="Hungarian Notation">The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-HN-30" ruleset="Hungarian Notation">The 'participantsCount' identifier should have the 'n' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-HN-43" ruleset="Hungarian Notation">The 'participantsCount' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="2" rule="JSF-142_b" ruleset="Joint Strike Fighter">The variable "participantsCount" was not initialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="INIT-03" ruleset="Initialization">The variable "participantsCount" was not initialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Global variable 'participantsCount' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Global variable 'participantsCount' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Global variable 'participantsCount' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Global variable 'participantsCount' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Global variable 'participantsCount' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Global variable 'participantsCount' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Global variable 'participantsCount' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'participantsCount' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'participantsCount' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global variable 'participantsCount' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global variable 'participantsCount' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global variable 'participantsCount' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="69" endline="69" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global variable 'participantsCount' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="0" endcolumn="1" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="PORT-13" ruleset="Portability">'exitGame' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="5" rule="CODSTA-CPP-18" ruleset="Coding Conventions for C++">'exitGame' should be encapsulated in a class</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="JSF-207" ruleset="Joint Strike Fighter">Consider encapsulating 'exitGame'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-82" ruleset="Coding Conventions for C++">Consider encapsulating 'exitGame'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'exitGame' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="COMMENT-05" ruleset="Comments">The 'exitGame' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="HICPP-3_3_1-a" ruleset="HIC++ 3.3.1 Do not use variables with static storage duration">Use of variable "exitGame" with static storage duration is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="5" rule="MISRA-022" ruleset="MISRA C 1998">Global variable 'exitGame' is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-18" ruleset="Naming Conventions">Naming convention not followed: exitGame</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-19" ruleset="Naming Conventions">Naming convention not followed: exitGame</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-HN-22" ruleset="Hungarian Notation">The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-HN-30" ruleset="Hungarian Notation">The 'exitGame' identifier should have the 'n' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-HN-43" ruleset="Hungarian Notation">The 'exitGame' identifier should have the 'i' prefix followed by a capital letter or an underscore</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="2" rule="JSF-142_b" ruleset="Joint Strike Fighter">The variable "exitGame" was not initialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="INIT-03" ruleset="Initialization">The variable "exitGame" was not initialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Global variable 'exitGame' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Global variable 'exitGame' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Global variable 'exitGame' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Global variable 'exitGame' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Global variable 'exitGame' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Global variable 'exitGame' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Global variable 'exitGame' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'exitGame' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'exitGame' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global variable 'exitGame' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global variable 'exitGame' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global variable 'exitGame' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="70" endline="70" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global variable 'exitGame' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="CODSTA-MCPP-08_b" ruleset="Coding Conventions for Modern C++">The return type of the 'GameLogic_Thread' function should be declared as 'auto'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'GameLogic_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'GameLogic_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'GameLogic_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'GameLogic_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'GameLogic_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'GameLogic_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'GameLogic_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'GameLogic_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'GameLogic_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'GameLogic_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'GameLogic_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global function 'GameLogic_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global function 'GameLogic_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global function 'GameLogic_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global function 'GameLogic_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A7_1_2-b" ruleset="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time">Consider using 'constexpr' for the 'GameLogic_Thread' function</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="4" rule="CODSTA-MCPP-11_b_cpp11" ruleset="Coding Conventions for Modern C++">Consider using 'constexpr' for the 'GameLogic_Thread' function</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">Function 'GameLogic_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">Function 'GameLogic_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-14" ruleset="Comments">The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'GameLogic_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'GameLogic_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A15_4_4-a" ruleset="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification">The 'GameLogic_Thread' function should be declared 'noexcept'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-MCPP-09" ruleset="Coding Conventions for Modern C++">The 'GameLogic_Thread' function should be declared 'noexcept'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'GameLogic_Thread' has Cyclomatic Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'GameLogic_Thread' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-34" ruleset="Naming Conventions">The incorrect global function name GameLogic_Thread was found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="23" endcolumn="24" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="72" endline="72" begincolumn="23" endcolumn="24" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="74" endline="74" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="74" endline="74" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="74" endline="74" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="1" endcolumn="2" priority="3" rule="FORMAT-25_b" ruleset="Formatting">'return' statement should be used with parenthesis</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-5_4_1-a" ruleset="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call">C-style cast is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-CPP-11" ruleset="Coding Conventions for C++">C-style cast is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="2" rule="JSF-185" ruleset="Joint Strike Fighter">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-A5_2_2-a" ruleset="AUTOSAR A5-2-2 Traditional C-style casts shall not be used">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-5_2_4" ruleset="MISRA C++ 2008">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-CPP-66" ruleset="Coding Conventions for C++">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-4_2_2-b" ruleset="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression">Cast to primitive type should not be used if possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="4" rule="JSF-183" ruleset="Joint Strike Fighter">Cast to primitive type should not be used if possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-31" ruleset="Coding Conventions">Cast to primitive type should not be used if possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-5_2_8" ruleset="MISRA C++ 2008">Do not convert an object with integer type 'int' to an object with pointer type  'void *'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-65" ruleset="Coding Conventions">Do not convert an object with integer type 'int' to an object with pointer type  'void *'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-M5_2_8-a" ruleset="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type">Do not convert an object with integer type 'int' to an object with pointer type  'void *'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="15" endcolumn="16" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="15" endcolumn="16" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="75" endline="75" begincolumn="15" endcolumn="16" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="CODSTA-MCPP-08_b" ruleset="Coding Conventions for Modern C++">The return type of the 'Controller_Thread' function should be declared as 'auto'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'Controller_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'Controller_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'Controller_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'Controller_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'Controller_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'Controller_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'Controller_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'Controller_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'Controller_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'Controller_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'Controller_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global function 'Controller_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global function 'Controller_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global function 'Controller_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global function 'Controller_Thread' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A7_1_2-b" ruleset="AUTOSAR A7-1-2 The constexpr specifier shall be used for values that can be determined at compile time">Consider using 'constexpr' for the 'Controller_Thread' function</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="4" rule="CODSTA-MCPP-11_b_cpp11" ruleset="Coding Conventions for Modern C++">Consider using 'constexpr' for the 'Controller_Thread' function</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">Function 'Controller_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">Function 'Controller_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-14" ruleset="Comments">The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'Controller_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'Controller_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A15_4_4-a" ruleset="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification">The 'Controller_Thread' function should be declared 'noexcept'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-MCPP-09" ruleset="Coding Conventions for Modern C++">The 'Controller_Thread' function should be declared 'noexcept'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'Controller_Thread' has Cyclomatic Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'Controller_Thread' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-34" ruleset="Naming Conventions">The incorrect global function name Controller_Thread was found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="24" endcolumn="25" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="78" endline="78" begincolumn="24" endcolumn="25" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="80" endline="80" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="80" endline="80" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="80" endline="80" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="1" endcolumn="2" priority="3" rule="FORMAT-25_b" ruleset="Formatting">'return' statement should be used with parenthesis</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-4_2_2-b" ruleset="HIC++ 4.2.2 Ensure that data loss does not demonstrably occur in an integral expression">Cast to primitive type should not be used if possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="4" rule="JSF-183" ruleset="Joint Strike Fighter">Cast to primitive type should not be used if possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-31" ruleset="Coding Conventions">Cast to primitive type should not be used if possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-5_2_8" ruleset="MISRA C++ 2008">Do not convert an object with integer type 'int' to an object with pointer type  'void *'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-65" ruleset="Coding Conventions">Do not convert an object with integer type 'int' to an object with pointer type  'void *'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-M5_2_8-a" ruleset="AUTOSAR M5-2-8 An object with integer type or pointer to void type shall not be converted to an object with pointer type">Do not convert an object with integer type 'int' to an object with pointer type  'void *'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-5_4_1-a" ruleset="HIC++ 5.4.1 Only use casting forms: static cast (excl. void*), dynamic cast or explicit constructor call">C-style cast is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-CPP-11" ruleset="Coding Conventions for C++">C-style cast is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="2" rule="JSF-185" ruleset="Joint Strike Fighter">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-A5_2_2-a" ruleset="AUTOSAR A5-2-2 Traditional C-style casts shall not be used">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-5_2_4" ruleset="MISRA C++ 2008">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-CPP-66" ruleset="Coding Conventions for C++">C-style cast to 'void *' type is used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="15" endcolumn="16" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="15" endcolumn="16" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="81" endline="81" begincolumn="15" endcolumn="16" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="7" endcolumn="8" priority="3" rule="JSF-062" ruleset="Joint Strike Fighter">The operator '*', used for 'velocityArray' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="7" endcolumn="8" priority="4" rule="FORMAT-32" ruleset="Formatting">The operator '*', used for 'velocityArray' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="JSF-207" ruleset="Joint Strike Fighter">Consider encapsulating 'velocityArray'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-CPP-82" ruleset="Coding Conventions for C++">Consider encapsulating 'velocityArray'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'velocityArray' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="COMMENT-05" ruleset="Comments">The 'velocityArray' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-3_3_1-a" ruleset="HIC++ 3.3.1 Do not use variables with static storage duration">Use of variable "velocityArray" with static storage duration is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="5" rule="MISRA-022" ruleset="MISRA C 1998">Global variable 'velocityArray' is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-18" ruleset="Naming Conventions">Naming convention not followed: velocityArray</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-HN-01" ruleset="Hungarian Notation">The 'velocityArray' identifier should have the 'rg' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Global variable 'velocityArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Global variable 'velocityArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Global variable 'velocityArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Global variable 'velocityArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Global variable 'velocityArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Global variable 'velocityArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Global variable 'velocityArray' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'velocityArray' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'velocityArray' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="STL-37" ruleset="STL Best Practices">The 'velocityArray' array should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-A18_1_1-a" ruleset="AUTOSAR A18-1-1 C-style arrays shall not be used">The 'velocityArray' array should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-8_1_1-a" ruleset="HIC++ 8.1.1 Do not use multiple levels of pointer indirection">Declaration of variable 'velocityArray' contains more than one level of pointer indirection</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-89" ruleset="Coding Conventions">Declaration of variable 'velocityArray' contains more than one level of pointer indirection</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: velocityArray</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: velocityArray</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'velocityArray' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'velocityArray' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="86" endline="86" begincolumn="8" endcolumn="9" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'velocityArray' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'Physics_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'Physics_Thread' has Cyclomatic Complexity value: 3</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'Physics_Thread' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-34" ruleset="Naming Conventions">The incorrect global function name Physics_Thread was found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'Physics_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'Physics_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'Physics_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'Physics_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'Physics_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'Physics_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'Physics_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'Physics_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'Physics_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'Physics_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'Physics_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">Function 'Physics_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">Function 'Physics_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14" ruleset="Comments">The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'Physics_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="22" endcolumn="23" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="88" endline="88" begincolumn="22" endcolumn="23" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="89" endline="89" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 13</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="89" endline="89" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="89" endline="89" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="89" endline="89" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="2" endcolumn="3" priority="3" rule="CODSTA-83" ruleset="Coding Conventions">A loop does not have a fixed upper nor lower bound</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="9" endcolumn="10" priority="3" rule="CODSTA-CPP-67" ruleset="Coding Conventions for C++">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-M5_3_1-a" ruleset="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2008-5_3_1" ruleset="MISRA C++ 2008">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="9" endcolumn="10" priority="5" rule="CODSTA-46" ruleset="Coding Conventions">In 'Physics_Thread' function use positive logic rather than negative logic whenever possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="90" endline="90" begincolumn="9" endcolumn="10" priority="3" rule="MISRA2004-12_6_a" ruleset="MISRA C 2004">The operand of logical operator '!' is not 'effectively Boolean'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-83" ruleset="Coding Conventions">A loop does not have a fixed upper nor lower bound</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="3" endcolumn="4" priority="3" rule="FORMAT-12" ruleset="Formatting">Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="7" endcolumn="8" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="11" endcolumn="12" priority="3" rule="PORT-13" ruleset="Portability">'i' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="11" endcolumn="12" priority="3" rule="OPT-10" ruleset="Optimization">Variable "i" declaration was found in control statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="11" endcolumn="12" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'i' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="11" endcolumn="12" priority="3" rule="COMMENT-05" ruleset="Comments">The 'i' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="11" endcolumn="12" priority="2" rule="AUTOSAR-A8_5_2-a" ruleset="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization">The definition of the 'i' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-MCPP-38" ruleset="Coding Conventions for Modern C++">The definition of the 'i' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="91" endline="91" begincolumn="41" endcolumn="42" priority="3" rule="OPT-04" ruleset="Optimization">Postfix operator applied to variable 'i'; prefer prefix type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_mutex_lock' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="92" endline="92" begincolumn="4" endcolumn="5" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="11" endcolumn="12" priority="3" rule="OPT-10" ruleset="Optimization">Variable "position" declaration was found in control statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="11" endcolumn="12" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'position' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="11" endcolumn="12" priority="3" rule="COMMENT-05" ruleset="Comments">The 'position' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="11" endcolumn="12" priority="3" rule="HICPP-7_1_8-a" ruleset="HIC++ 7.1.8 Use auto id = expr when declaring a variable to have the same type as its initializer function call">Variable 'position' should be declared using 'auto' specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="11" endcolumn="12" priority="2" rule="AUTOSAR-A8_5_2-a" ruleset="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization">The definition of the 'position' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-MCPP-38" ruleset="Coding Conventions for Modern C++">The definition of the 'position' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="93" begincolumn="11" endcolumn="12" priority="2" rule="CODSTA-MCPP-08_a" ruleset="Coding Conventions for Modern C++">The 'position' variable should be declared with the 'auto&amp;' type specifier</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="94" begincolumn="24" endcolumn="25" priority="3" rule="PB-01" ruleset="Possible Bugs">Dereferenced pointer type expression should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="4" endcolumn="5" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'assertion' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="39" endcolumn="40" priority="5" rule="CWE-798-a" ruleset="CWE-798 Use of Hard-coded Credentials">The string literal is embedded directly in the code: Participant is out of ring</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="39" endcolumn="40" priority="5" rule="CODSTA-203" ruleset="Coding Conventions">The string literal is embedded directly in the code: Participant is out of ring</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="39" endcolumn="40" priority="1" rule="APSC_DV-003110-a" ruleset="APSC_DV-003110 The application must not contain embedded authentication data.">The string literal is embedded directly in the code: Participant is out of ring</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="39" endcolumn="40" priority="1" rule="CERT_C-MSC41-a" ruleset="CERT-MSC41_C (RULE) Never hard code sensitive information">The string literal is embedded directly in the code: Participant is out of ring</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="39" endcolumn="40" priority="2" rule="AUTOSAR-A27_0_4-d" ruleset="AUTOSAR A27-0-4 C-style strings shall not be used">The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="95" begincolumn="39" endcolumn="40" priority="3" rule="PB-76" ruleset="Possible Bugs">The string literal should not be passed as an argument of the 'const char *' type in the 'assertion' function call</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="4" endcolumn="5" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="4" endcolumn="5" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="4" endcolumn="5" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="5" endcolumn="6" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="5" endcolumn="6" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="5" endcolumn="6" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="6" endcolumn="7" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="6" endcolumn="7" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="6" endcolumn="7" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="7" endcolumn="8" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="7" endcolumn="8" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="7" endcolumn="8" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="8" endcolumn="9" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="8" endcolumn="9" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="8" endcolumn="9" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="9" endcolumn="10" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="9" endcolumn="10" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="9" endcolumn="10" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="10" endcolumn="11" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="10" endcolumn="11" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="10" endcolumn="11" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="11" endcolumn="12" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="11" endcolumn="12" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="96" endline="96" begincolumn="11" endcolumn="12" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="4" endcolumn="5" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="4" endcolumn="5" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="4" endcolumn="5" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="5" endcolumn="6" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="5" endcolumn="6" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="5" endcolumn="6" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="6" endcolumn="7" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="6" endcolumn="7" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="6" endcolumn="7" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="7" endcolumn="8" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="7" endcolumn="8" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="7" endcolumn="8" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="8" endcolumn="9" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="8" endcolumn="9" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="8" endcolumn="9" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="9" endcolumn="10" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="9" endcolumn="10" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="9" endcolumn="10" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="10" endcolumn="11" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="10" endcolumn="11" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="10" endcolumn="11" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="11" endcolumn="12" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="11" endcolumn="12" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="97" endline="97" begincolumn="11" endcolumn="12" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="98" endline="98" begincolumn="4" endcolumn="5" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="99" endline="99" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'sleep' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="3" endcolumn="4" priority="3" rule="PB-11" ruleset="Possible Bugs">The type 'int' of function argument number '1' does not match declared type 'unsigned int'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2008-5_0_4_a" ruleset="MISRA C++ 2008">Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-M5_0_4-a" ruleset="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type">Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="9" endcolumn="10" priority="3" rule="MISRA2004-10_1_a" ruleset="MISRA C 2004">Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="100" endline="100" begincolumn="9" endcolumn="10" priority="3" rule="HICPP-4_2_1-a" ruleset="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression">A 'U' suffix shall be applied to constant: 20</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="101" endline="101" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="101" endline="101" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="101" endline="101" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="101" endline="101" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="101" endline="101" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="101" endline="101" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="2" endcolumn="3" priority="3" rule="FORMAT-25_b" ruleset="Formatting">'return' statement should be used with parenthesis</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2012-RULE-11_9_a" ruleset="MISRA C 2012 Rules">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-M4_10_2-a" ruleset="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2008-4_10_2" ruleset="MISRA C++ 2008">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="3" rule="CODSTA-CPP-63" ruleset="Coding Conventions for C++">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="2" rule="MISRAC2012-RULE_11_9-a" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="102" endline="102" begincolumn="9" endcolumn="10" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="103" endline="103" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="103" endline="103" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="103" endline="103" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="7" endcolumn="8" priority="3" rule="JSF-062" ruleset="Joint Strike Fighter">The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="7" endcolumn="8" priority="4" rule="FORMAT-32" ruleset="Formatting">The operator '*', used for 'currentCameraVelocity' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'currentCameraVelocity' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="JSF-207" ruleset="Joint Strike Fighter">Consider encapsulating 'currentCameraVelocity'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-CPP-82" ruleset="Coding Conventions for C++">Consider encapsulating 'currentCameraVelocity'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'currentCameraVelocity' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="COMMENT-05" ruleset="Comments">The 'currentCameraVelocity' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="HICPP-3_3_1-a" ruleset="HIC++ 3.3.1 Do not use variables with static storage duration">Use of variable "currentCameraVelocity" with static storage duration is not allowed</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="5" rule="MISRA-022" ruleset="MISRA C 1998">Global variable 'currentCameraVelocity' is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-18" ruleset="Naming Conventions">Naming convention not followed: currentCameraVelocity</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-22" ruleset="Naming Conventions">Naming convention not followed: currentCameraVelocity</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-HN-34" ruleset="Hungarian Notation">The 'currentCameraVelocity' identifier should have the 'p' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Global variable 'currentCameraVelocity' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Global variable 'currentCameraVelocity' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Global variable 'currentCameraVelocity' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Global variable 'currentCameraVelocity' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Global variable 'currentCameraVelocity' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Global variable 'currentCameraVelocity' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Global variable 'currentCameraVelocity' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'currentCameraVelocity' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'currentCameraVelocity' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: currentCameraVelocity</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="108" endline="108" begincolumn="8" endcolumn="9" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: currentCameraVelocity</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'object' parameter does not have a corresponding '@param' tag in the comment before the function declaration</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A15_4_4-a" ruleset="AUTOSAR A15-4-4 A declaration of non-throwing function shall contain noexcept specification">The 'draw' function should be declared 'noexcept'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="3" rule="CODSTA-MCPP-09" ruleset="Coding Conventions for Modern C++">The 'draw' function should be declared 'noexcept'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="3" rule="FORMAT-28" ruleset="Formatting">Return type is not placed in line before function 'draw'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'draw' has Cyclomatic Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'draw' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="3" rule="NAMING-17" ruleset="Naming Conventions">Naming convention not followed: draw</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-0_1_8_b" ruleset="MISRA C++ 2008">Function 'draw' is empty</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="4" rule="OPT-32_b" ruleset="Optimization">Function 'draw' is empty</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-M0_1_8-b" ruleset="AUTOSAR M0-1-8 All functions with void return type shall have external side effect(s)">Function 'draw' is empty</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'draw' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'draw' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'draw' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'draw' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'draw' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'draw' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'draw' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'draw' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'draw' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="3" rule="COMMENT-14" ruleset="Comments">The 'draw' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="6" endcolumn="7" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'draw' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="11" endcolumn="12" priority="3" rule="FORMAT-47_a" ruleset="Formatting">The 'const' qualifier should be placed on the right hand side of the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="11" endcolumn="12" priority="3" rule="HICPP-7_1_4-a" ruleset="HIC++ 7.1.4 Place CV-qualifiers on the right hand side of the type they apply to">The 'const' qualifier should be placed on the right hand side of the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="23" endcolumn="24" priority="3" rule="JSF-062" ruleset="Joint Strike Fighter">The operator '*', used for 'object' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="23" endcolumn="24" priority="4" rule="FORMAT-32" ruleset="Formatting">The operator '*', used for 'object' declaration, should be directly connected with the type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="3" rule="CERT_C-DCL00-a" ruleset="CERT-DCL00_C (REC) Const-qualify immutable objects">Declare parameter 'object' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="2" rule="AUTOSAR-A7_1_1-a" ruleset="AUTOSAR A7-1-1 Constexpr or const specifiers shall be used for immutable data declaration">Declare parameter 'object' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="2" rule="MISRA2008-7_1_1" ruleset="MISRA C++ 2008">Declare parameter 'object' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="3" rule="CODSTA-CPP-53" ruleset="Coding Conventions for C++">Declare parameter 'object' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="3" rule="HICPP-7_1_2-a" ruleset="HIC++ 7.1.2 Use const whenever possible">Declare parameter 'object' as const</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="3" rule="NAMING-HN-34" ruleset="Hungarian Notation">The 'object' identifier should have the 'p' prefix</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="5" rule="PARSER-REMARK" ruleset="Parser diagnostics">R-828: parameter "object" was never referenced</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="2" rule="OPT-03" ruleset="Optimization">Parameter 'object' is not used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="2" rule="AUTOSAR-A0_1_4-a" ruleset="AUTOSAR A0-1-4 There shall be no unused named parameters in non-virtual functions">Parameter 'object' is not used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="3" rule="OPT-31" ruleset="Optimization">Parameter 'object' is not used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="2" rule="MISRA2008-0_1_11" ruleset="MISRA C++ 2008">Parameter 'object' is not used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared: object</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="110" endline="110" begincolumn="24" endcolumn="25" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared: object</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="111" endline="111" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="111" endline="111" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="111" endline="111" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="112" endline="112" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="112" endline="112" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="112" endline="112" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="112" endline="112" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="112" endline="112" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="112" endline="112" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="113" endline="113" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="113" endline="113" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="113" endline="113" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14_b" ruleset="Comments">The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-b" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'Render_Thread' function should be preceded by a comment that contains the '@return' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'Render_Thread' has Cyclomatic Complexity value: 3</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'Render_Thread' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-34" ruleset="Naming Conventions">The incorrect global function name Render_Thread was found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'Render_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'Render_Thread' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'Render_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'Render_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'Render_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'Render_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'Render_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'Render_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'Render_Thread' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'Render_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'Render_Thread' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">Function 'Render_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">Function 'Render_Thread' returns a pointer type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="3" rule="COMMENT-14" ruleset="Comments">The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'Render_Thread' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="21" endcolumn="22" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The parameter of pointer or array type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="115" endline="115" begincolumn="21" endcolumn="22" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The parameter of pointer type is declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="116" endline="116" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 0</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="116" endline="116" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="116" endline="116" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="116" endline="116" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="2" endcolumn="3" priority="3" rule="CODSTA-83" ruleset="Coding Conventions">A loop does not have a fixed upper nor lower bound</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="9" endcolumn="10" priority="3" rule="CODSTA-CPP-67" ruleset="Coding Conventions for C++">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-M5_3_1-a" ruleset="AUTOSAR M5-3-1 Each operand of the ! operator, the logical &amp;&amp; or the logical || operators shall have type bool">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2008-5_3_1" ruleset="MISRA C++ 2008">The operand of logical operator '!' has 'int' type instead of 'bool' type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="9" endcolumn="10" priority="5" rule="CODSTA-46" ruleset="Coding Conventions">In 'Render_Thread' function use positive logic rather than negative logic whenever possible</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="117" endline="117" begincolumn="9" endcolumn="10" priority="3" rule="MISRA2004-12_6_a" ruleset="MISRA C 2004">The operand of logical operator '!' is not 'effectively Boolean'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_mutex_lock' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="118" endline="118" begincolumn="3" endcolumn="4" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="119" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="120" endline="120" begincolumn="3" endcolumn="4" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="3" rule="JSF-061" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-42" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_a" ruleset="Joint Strike Fighter">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-43" ruleset="Formatting">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="3" rule="JSF-060_b" ruleset="Joint Strike Fighter">Opening '{' and closing '}' braces are not placed in the same column</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="0" endcolumn="1" priority="3" rule="FORMAT-02" ruleset="Formatting">Put the opening brace '{' on its own line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-83" ruleset="Coding Conventions">A loop does not have a fixed upper nor lower bound</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="3" endcolumn="4" priority="3" rule="FORMAT-12" ruleset="Formatting">Between conditional statement 'for' and its opening parenthesis '(' should be exactly one space</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="3" rule="CODSTA-223" ruleset="Coding Conventions">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="2" rule="AUTOSAR-A3_9_1-b" ruleset="AUTOSAR A3-9-1 Fixed width integer types from &lt;cstdint&gt;, indicating the size and signedness, shall be used in place of the basic numerical types">Use the fixed width integer type from &lt;cstdint&gt; instead of the 'int' basic numerical type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-7_1_6-b" ruleset="HIC++ 7.1.6 Use class types or typedefs to abstract scalar quantities and standard integer types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="4" rule="MISRAC2012-DIR_4_6-b" ruleset="Dir 4.6 (Advisory) typedefs that indicate size and signedness should be used in place of the basic numerical types">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="3" rule="MISRA2004-6_3_b" ruleset="MISRA C 2004">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="2" rule="JSF-209_b" ruleset="Joint Strike Fighter">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2012-DIR-4_6_b" ruleset="MISRA C 2012 Directives">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="3" rule="HICPP-3_5_1-b" ruleset="HIC++ 3.5.1 Do not make any assumptions about the internal representation of a value or object">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="4" rule="MISRA2008-3_9_2" ruleset="MISRA C++ 2008">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="7" endcolumn="8" priority="3" rule="MISRA-013" ruleset="MISRA C 1998">The basic numerical type 'int' should not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="11" endcolumn="12" priority="3" rule="PORT-13" ruleset="Portability">'i' shall be declared as unsigned int or signed int</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="11" endcolumn="12" priority="3" rule="OPT-10" ruleset="Optimization">Variable "i" declaration was found in control statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="11" endcolumn="12" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'i' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="11" endcolumn="12" priority="3" rule="COMMENT-05" ruleset="Comments">The 'i' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="11" endcolumn="12" priority="2" rule="AUTOSAR-A8_5_2-a" ruleset="AUTOSAR A8-5-2 Braced-initialization {}, without equals sign, shall be used for variable initialization">The definition of the 'i' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-MCPP-38" ruleset="Coding Conventions for Modern C++">The definition of the 'i' variable should contain a braced initializer</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="122" endline="122" begincolumn="41" endcolumn="42" priority="3" rule="OPT-04" ruleset="Optimization">Postfix operator applied to variable 'i'; prefer prefix type</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_mutex_lock' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_mutex_lock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="123" endline="123" begincolumn="4" endcolumn="5" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_mutex_lock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="124" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_mutex_unlock' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_mutex_unlock' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="125" endline="125" begincolumn="4" endcolumn="5" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_mutex_unlock" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="3" endcolumn="4" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="3" endcolumn="4" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="126" endline="126" begincolumn="3" endcolumn="4" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="127" endline="127" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="2" endcolumn="3" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="2" endcolumn="3" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="2" endcolumn="3" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'sleep' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'sleep' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "sleep" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="3" endcolumn="4" priority="3" rule="PB-11" ruleset="Possible Bugs">The type 'int' of function argument number '1' does not match declared type 'unsigned int'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="9" endcolumn="10" priority="3" rule="HICPP-4_2_1-a" ruleset="HIC++ 4.2.1 Ensure that the U suffix is applied to a literal used in a context requiring an unsigned integral expression">A 'U' suffix shall be applied to constant: 20</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2008-5_0_4_a" ruleset="MISRA C++ 2008">Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-M5_0_4-a" ruleset="AUTOSAR M5-0-4 An implicit integral conversion shall not change the signedness of the underlying type">Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="128" endline="128" begincolumn="9" endcolumn="10" priority="3" rule="MISRA2004-10_1_a" ruleset="MISRA C 2004">Implicit conversion between signed and unsigned type in the function call on argument '1' shall not be used</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="129" endline="129" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="129" endline="129" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="129" endline="129" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="129" endline="129" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="129" endline="129" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="129" endline="129" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="1" endcolumn="2" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="1" endcolumn="2" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="1" endcolumn="2" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="2" endcolumn="3" priority="3" rule="FORMAT-25_b" ruleset="Formatting">'return' statement should be used with parenthesis</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2012-RULE-11_9_a" ruleset="MISRA C 2012 Rules">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-M4_10_2-a" ruleset="AUTOSAR M4-10-2 Literal zero (0) shall not be used as the null-pointer-constant">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2008-4_10_2" ruleset="MISRA C++ 2008">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="3" rule="CODSTA-CPP-63" ruleset="Coding Conventions for C++">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="2" rule="MISRAC2012-RULE_11_9-a" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="130" endline="130" begincolumn="9" endcolumn="10" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">Function with pointer return type returns '0'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="131" endline="131" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="131" endline="131" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="131" endline="131" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="FORMAT-28" ruleset="Formatting">Return type is not placed in line before function 'runGameThreads'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'runGameThreads' has Cyclomatic Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'runGameThreads' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="NAMING-17" ruleset="Naming Conventions">Naming convention not followed: runGameThreads</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'runGameThreads' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'runGameThreads' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'runGameThreads' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'runGameThreads' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'runGameThreads' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'runGameThreads' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'runGameThreads' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'runGameThreads' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'runGameThreads' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'runGameThreads' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'runGameThreads' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global function 'runGameThreads' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global function 'runGameThreads' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global function 'runGameThreads' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global function 'runGameThreads' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14" ruleset="Comments">The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'runGameThreads' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="3" rule="GLOBAL-UNUSEDFUNC" ruleset="Global Static Analysis">The 'runGameThreads' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="4" rule="AUTOSAR-M0_1_10-a" ruleset="AUTOSAR M0-1-10 Every defined function should be called at least once">The 'runGameThreads' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="134" endline="134" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-0_1_10_b" ruleset="MISRA C++ 2008">The 'runGameThreads' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="135" endline="135" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 0</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="136" endline="136" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="136" endline="136" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="136" endline="136" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="136" endline="136" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-27" ruleset="Coding Conventions">Global variable 'exitGame' is modified in function 'runGameThreads'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread1' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread1' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread1' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread1' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread1' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="11" endcolumn="12" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread1' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread2' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread2' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread2' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="JSF-152" ruleset="Joint Strike Fighter">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-A7_1_7-b" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="HICPP-7_1_1-a" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="FORMAT-29" ruleset="Formatting">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-A7_1_7-c" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="FORMAT-33" ruleset="Formatting">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="MISRA2008-8_0_1" ruleset="MISRA C++ 2008">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="HICPP-7_1_1-b" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-M8_0_1-a" ruleset="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="CERT_C-DCL04-a" ruleset="CERT-DCL04_C (REC) Do not declare more than one variable per declaration">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread2' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread2' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="20" endcolumn="21" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread2' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="JSF-152" ruleset="Joint Strike Fighter">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-A7_1_7-b" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="HICPP-7_1_1-a" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="FORMAT-29" ruleset="Formatting">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-A7_1_7-c" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="FORMAT-33" ruleset="Formatting">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="MISRA2008-8_0_1" ruleset="MISRA C++ 2008">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="HICPP-7_1_1-b" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-M8_0_1-a" ruleset="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="CERT_C-DCL04-a" ruleset="CERT-DCL04_C (REC) Do not declare more than one variable per declaration">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread3' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread3' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread3' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread3</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread3</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread3' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread3' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="29" endcolumn="30" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread3' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread4' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread4' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread4' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread4</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread4</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="JSF-152" ruleset="Joint Strike Fighter">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-A7_1_7-b" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="HICPP-7_1_1-a" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="FORMAT-29" ruleset="Formatting">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-A7_1_7-c" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="FORMAT-33" ruleset="Formatting">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="MISRA2008-8_0_1" ruleset="MISRA C++ 2008">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="HICPP-7_1_1-b" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-M8_0_1-a" ruleset="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="CERT_C-DCL04-a" ruleset="CERT-DCL04_C (REC) Do not declare more than one variable per declaration">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread4' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread4' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="137" endline="137" begincolumn="38" endcolumn="39" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread4' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="41" endcolumn="42" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="41" endcolumn="42" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="41" endcolumn="42" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="41" endcolumn="42" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="41" endcolumn="42" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="138" endline="138" begincolumn="41" endcolumn="42" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="42" endcolumn="43" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="42" endcolumn="43" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="42" endcolumn="43" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="42" endcolumn="43" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="42" endcolumn="43" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="139" endline="139" begincolumn="42" endcolumn="43" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="48" endcolumn="49" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="48" endcolumn="49" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="48" endcolumn="49" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="48" endcolumn="49" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="48" endcolumn="49" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="140" endline="140" begincolumn="48" endcolumn="49" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="46" endcolumn="47" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="46" endcolumn="47" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="46" endcolumn="47" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="46" endcolumn="47" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="46" endcolumn="47" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="141" endline="141" begincolumn="46" endcolumn="47" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-04" ruleset="Comments">The definition of the 'runGameThreads2' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="4" rule="JSF-134" ruleset="Joint Strike Fighter">The definition of the 'runGameThreads2' function is not preceded by a comment</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="4" rule="OWASP2019-API9-e" ruleset="OWASP API9 Improper Assets Management">Function 'runGameThreads2' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A3_3_1-a" ruleset="AUTOSAR A3-3-1 Objects or functions with external linkage (including members of named namespaces) shall be declared in a header file">Function 'runGameThreads2' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="4" rule="JSF-137" ruleset="Joint Strike Fighter">Function 'runGameThreads2' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="4" rule="MISRA-023" ruleset="MISRA C 1998">Function 'runGameThreads2' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-3_3_1" ruleset="MISRA C++ 2008">Function 'runGameThreads2' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="CERT_C-DCL15-a" ruleset="CERT-DCL15_C (REC) Declare file-scope objects or functions that do not need external linkage as static">Function 'runGameThreads2' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="4" rule="MISRA2004-8_10" ruleset="MISRA C 2004">Function 'runGameThreads2' has external linkage and is not declared in the header</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="JSF-051" ruleset="Joint Strike Fighter">The name 'runGameThreads2' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="NAMING-44" ruleset="Naming Conventions">The name 'runGameThreads2' should be composed only of lowercase letters</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="4" rule="JSF-098" ruleset="Joint Strike Fighter">Global function 'runGameThreads2' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="CODSTA-CPP-36" ruleset="Coding Conventions for C++">Global function 'runGameThreads2' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-M7_3_1-a" ruleset="AUTOSAR M7-3-1 The global namespace shall only contain main, namespace declarations and extern &quot;C&quot; declarations">Global function 'runGameThreads2' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-7_3_1" ruleset="MISRA C++ 2008">Global function 'runGameThreads2' is declared in global namespace</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="COMMENT-14" ruleset="Comments">The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="2" rule="AUTOSAR-A2_7_3-a" ruleset="AUTOSAR A2-7-3 All declarations of &quot;user-defined&quot; types, static and non-static data members, functions and methods shall be preceded by documentation using &quot;///&quot; comments and &quot;@tag&quot; tags">The 'runGameThreads2' function should be preceded by a comment that contains the '@brief' tag</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="FORMAT-28" ruleset="Formatting">Return type is not placed in line before function 'runGameThreads2'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-29" ruleset="Metrics">Function 'runGameThreads2' has Cyclomatic Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="5" rule="METRICS-33" ruleset="Metrics">Function 'runGameThreads2' has Essential Complexity value: 1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="NAMING-17" ruleset="Naming Conventions">Naming convention not followed: runGameThreads2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="3" rule="GLOBAL-UNUSEDFUNC" ruleset="Global Static Analysis">The 'runGameThreads2' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="4" rule="AUTOSAR-M0_1_10-a" ruleset="AUTOSAR M0-1-10 Every defined function should be called at least once">The 'runGameThreads2' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="144" endline="144" begincolumn="5" endcolumn="6" priority="2" rule="MISRA2008-0_1_10_b" ruleset="MISRA C++ 2008">The 'runGameThreads2' function is not used in the testing scope</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="145" endline="145" begincolumn="0" endcolumn="1" priority="3" rule="METRICS-19" ruleset="Metrics">Percentage of comment lines vs. all method's lines is: 0</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="146" endline="146" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="146" endline="146" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="146" endline="146" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="146" endline="146" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-27" ruleset="Coding Conventions">Global variable 'exitGame' is modified in function 'runGameThreads2'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread1' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread1' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread1' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread1</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread1' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread1' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="11" endcolumn="12" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread1' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread2' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread2' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread2' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread2</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="JSF-152" ruleset="Joint Strike Fighter">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-A7_1_7-b" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="HICPP-7_1_1-a" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="FORMAT-29" ruleset="Formatting">Declare variable 'thread2' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-A7_1_7-c" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="FORMAT-33" ruleset="Formatting">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="MISRA2008-8_0_1" ruleset="MISRA C++ 2008">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="HICPP-7_1_1-b" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="AUTOSAR-M8_0_1-a" ruleset="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="CERT_C-DCL04-a" ruleset="CERT-DCL04_C (REC) Do not declare more than one variable per declaration">Declare variable 'thread2' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread2' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread2' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="20" endcolumn="21" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread2' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="JSF-152" ruleset="Joint Strike Fighter">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-A7_1_7-b" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="HICPP-7_1_1-a" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="FORMAT-29" ruleset="Formatting">Declare variable 'thread3' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-A7_1_7-c" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="FORMAT-33" ruleset="Formatting">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="MISRA2008-8_0_1" ruleset="MISRA C++ 2008">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="HICPP-7_1_1-b" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-M8_0_1-a" ruleset="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="CERT_C-DCL04-a" ruleset="CERT-DCL04_C (REC) Do not declare more than one variable per declaration">Declare variable 'thread3' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread3' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread3' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread3' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread3</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread3</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread3' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread3' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="29" endcolumn="30" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread3' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-M0_1_4-a" ruleset="AUTOSAR M0-1-4 A project shall not contain non-volatile POD variables having only one use">The 'thread4' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="MISRA2008-0_1_4" ruleset="MISRA C++ 2008">The 'thread4' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="GLOBAL-ONEUSEVAR" ruleset="Global Static Analysis">The 'thread4' variable has only one use</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="CODSTA-94" ruleset="Coding Conventions">The variable of pointer or array type is declared: thread4</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="CODSTA-95" ruleset="Coding Conventions">The variable of pointer type is declared: thread4</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="JSF-152" ruleset="Joint Strike Fighter">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-A7_1_7-b" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="HICPP-7_1_1-a" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="FORMAT-29" ruleset="Formatting">Declare variable 'thread4' in a separate line</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-A7_1_7-c" ruleset="AUTOSAR A7-1-7 Each expression statement and identifier declaration shall be placed on a separate line">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="FORMAT-33" ruleset="Formatting">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="MISRA2008-8_0_1" ruleset="MISRA C++ 2008">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="HICPP-7_1_1-b" ruleset="HIC++ 7.1.1 Declare each identifier on a separate line in a separate declaration">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="AUTOSAR-M8_0_1-a" ruleset="AUTOSAR M8-0-1 An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="CERT_C-DCL04-a" ruleset="CERT-DCL04_C (REC) Do not declare more than one variable per declaration">Declare variable 'thread4' in a separate declaration statement</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="2" rule="INIT-04" ruleset="Initialization">Pointer variable 'thread4' uninitialized when declared</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="JSF-132_a" ruleset="Joint Strike Fighter">The 'thread4' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="147" endline="147" begincolumn="38" endcolumn="39" priority="3" rule="COMMENT-05" ruleset="Comments">The 'thread4' variable should be commented</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="41" endcolumn="42" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="41" endcolumn="42" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="41" endcolumn="42" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="41" endcolumn="42" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="41" endcolumn="42" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="148" endline="148" begincolumn="41" endcolumn="42" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="42" endcolumn="43" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="42" endcolumn="43" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="42" endcolumn="43" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="42" endcolumn="43" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="42" endcolumn="43" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="149" endline="149" begincolumn="42" endcolumn="43" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="48" endcolumn="49" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="48" endcolumn="49" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="48" endcolumn="49" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="48" endcolumn="49" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="48" endcolumn="49" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="150" endline="150" begincolumn="48" endcolumn="49" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="0" endcolumn="1" priority="4" rule="JSF-043" ruleset="Joint Strike Fighter">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="0" endcolumn="1" priority="5" rule="FORMAT-01" ruleset="Formatting">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="0" endcolumn="1" priority="5" rule="HICPP-2_1_1-a" ruleset="HIC++ 2.1.1 Do not use tab characters in source files">Non-ascii tab found</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="5" rule="CODSTA-CPP-23" ruleset="Coding Conventions for C++">The global function 'pthread_create' is called without scope resolution operator '::'</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-A0_1_2-a" ruleset="AUTOSAR A0-1-2 The value returned by a function having a non-void return type that is not an overloaded operator shall be used">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-CPP-58" ruleset="Coding Conventions for C++">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_1_7" ruleset="MISRA C++ 2008">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="4" rule="JSF-115_a" ruleset="Joint Strike Fighter">Unused function's 'pthread_create' return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="3" rule="CODSTA-122_a" ruleset="Coding Conventions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-ERR33-a" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="1" rule="CERT_C-POS54-a" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="2" rule="MISRAC2012-RULE_17_7-a" ruleset="Rule 17.7 (Required) The value returned by a function having non-void return type shall be used">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="3" rule="CERT_C-EXP12-a" ruleset="CERT-EXP12_C (REC) Do not ignore values returned by functions">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2012-RULE-17_7_a" ruleset="MISRA C 2012 Rules">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="3" rule="MISRA2004-16_10" ruleset="MISRA C 2004">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="2" rule="AUTOSAR-M0_3_2-a" ruleset="AUTOSAR M0-3-2 If a function generates error information, then that error information shall be tested">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="2" rule="MISRA2008-0_3_2" ruleset="MISRA C++ 2008">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="1" endcolumn="2" priority="3" rule="JSF-115" ruleset="Joint Strike Fighter">Unused function's "pthread_create" return value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="26" endcolumn="27" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="26" endcolumn="27" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="26" endcolumn="27" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="26" endcolumn="27" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="26" endcolumn="27" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="26" endcolumn="27" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '2' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="29" endcolumn="30" priority="3" rule="CERT_CPP-EXP56-a" ruleset="CERT-EXP56_CPP (RULE) Do not call a function with a mismatched language linkage">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="29" endcolumn="30" priority="3" rule="CODSTA-CPP-96" ruleset="Coding Conventions for C++">Do not assing the pointer to the function with C++ language linkage to the pointer to the function with C language linkage</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="46" endcolumn="47" priority="2" rule="AUTOSAR-A4_10_1-b" ruleset="AUTOSAR A4-10-1 Only nullptr literal shall be used as the null-pointer-constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="46" endcolumn="47" priority="4" rule="HICPP-2_5_3-a" ruleset="HIC++ 2.5.3 Use nullptr for the null pointer constant">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="46" endcolumn="47" priority="4" rule="CODSTA-MCPP-04" ruleset="Coding Conventions for Modern C++">Prefer 'nullptr' to '0' as the null pointer value</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="46" endcolumn="47" priority="3" rule="CODSTA-131" ruleset="Coding Conventions">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="46" endcolumn="47" priority="2" rule="MISRA2012-RULE-11_9_b" ruleset="MISRA C 2012 Rules">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="151" endline="151" begincolumn="46" endcolumn="47" priority="2" rule="MISRAC2012-RULE_11_9-b" ruleset="Rule 11.9 (Required) The macro NULL shall be the only permitted form of integer null pointer constant">The value '0' is passed as '4' argument to function 'pthread_create' </violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="2" rule="AUTOSAR-A5_3_2-a" ruleset="AUTOSAR A5-3-2 Null pointers shall not be dereferenced">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="2" rule="AUTOSAR-M0_3_1-f" ruleset="AUTOSAR M0-3-1 Minimization of run-time failures shall be ensured by the use of at least one of: (a) static analysis tools/techniques; (b) dynamic analysis tools/techniques; (c) explicit coding of checks to handle run-time faults">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="1" rule="BD-PB-NP" ruleset="Possible Bugs">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="1" rule="CERT_C-ERR33-c" ruleset="CERT-ERR33_C (RULE) Detect and handle standard library errors">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="1" rule="CERT_C-EXP34-a" ruleset="CERT-EXP34_C (RULE) Do not dereference null pointers">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="3" rule="CERT_C-MSC19-b" ruleset="CERT-MSC19_C (REC) For functions that return an array, prefer returning an empty array over a null value">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="1" rule="CERT_C-POS54-c" ruleset="CERT-POS54_C (RULE) Detect and handle POSIX library errors">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="1" rule="CERT_CPP-STR51-a" ruleset="CERT-STR51_CPP (RULE) Do not attempt to create a std::string from a null pointer">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="1" rule="CWE-476-a" ruleset="CWE-476 NULL Pointer Dereference">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="1" rule="HICPP-5_2_1-c" ruleset="HIC++ 5.2.1 Ensure that pointer or array access is demonstrably within bounds of a valid object">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="5" rule="MISRA2008-0_3_1_b" ruleset="MISRA C++ 2008">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="2" rule="MISRA2012-DIR-4_1_b" ruleset="MISRA C 2012 Directives">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/NullPointer.cpp">
    <violation beginline="11" endline="12" begincolumn="0" endcolumn="0" priority="2" rule="MISRAC2012-DIR_4_1-b" ruleset="Dir 4.1 (Required) Run-time failures shall be minimized">"point" may possibly be null</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="4" begincolumn="0" endcolumn="0" priority="2" rule="AUTOSAR-A8_4_10-a" ruleset="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL">The "shape1" parameter of the "getShapeRatio" function cannot be NULL and should be passed by reference</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="4" begincolumn="0" endcolumn="0" priority="3" rule="BD-PB-REFPARAM" ruleset="Possible Bugs">The "shape1" parameter of the "getShapeRatio" function cannot be NULL and should be passed by reference</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="4" begincolumn="0" endcolumn="0" priority="2" rule="AUTOSAR-A8_4_10-a" ruleset="AUTOSAR A8-4-10 A parameter shall be passed by reference if it can't be NULL">The "shape2" parameter of the "getShapeRatio" function cannot be NULL and should be passed by reference</violation>
  </file>
  <file name="/FlowAnalysisCpp/DivisionByZero.cpp">
    <violation beginline="3" endline="4" begincolumn="0" endcolumn="0" priority="3" rule="BD-PB-REFPARAM" ruleset="Possible Bugs">The "shape2" parameter of the "getShapeRatio" function cannot be NULL and should be passed by reference</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="9" begincolumn="0" endcolumn="0" priority="2" rule="BD-SECURITY-TDALLOC" ruleset="Security">Data obtained from a file ("*pSize") is used to determine the size of memory allocation</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="9" begincolumn="0" endcolumn="0" priority="2" rule="CWE-770-a" ruleset="CWE-770 Allocation of Resources Without Limits or Throttling">Data obtained from a file ("*pSize") is used to determine the size of memory allocation</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="8" endline="9" begincolumn="0" endcolumn="0" priority="2" rule="OWASP2019-API4-a" ruleset="OWASP API4 Lack of Resources &amp; Rate Limiting">Data obtained from a file ("*pSize") is used to determine the size of memory allocation</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="9" endline="10" begincolumn="0" endcolumn="0" priority="1" rule="BD-SECURITY-TDLOOP" ruleset="Security">Data obtained from a file ("*pSize") is used in a loop condition</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="2" rule="APSC_DV-002000-a" ruleset="APSC_DV-002000 The application must terminate all network connections associated with a communications session at the end of the session.">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="2" rule="AUTOSAR-A15_0_2-a" ruleset="AUTOSAR A15-0-2 At least the basic guarantee for exception safety shall be provided for all operations. In addition, each function may offer either the strong guarantee or the nothrow guarantee">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="2" rule="AUTOSAR-A15_1_4-a" ruleset="AUTOSAR A15-1-4 If a function exits with an exception, then before a throw, the function shall place all objects/resources that the function constructed in valid states or it shall delete them">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="1" rule="BD-RES-LEAKS" ruleset="Resources">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="3" rule="CERT_C-CON30-a" ruleset="CERT-CON30_C (RULE) Clean up thread-specific storage">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="3" rule="CERT_C-FIO22-a" ruleset="CERT-FIO22_C (REC) Close files before spawning processes">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="3" rule="CERT_C-FIO42-a" ruleset="CERT-FIO42_C (RULE) Close files when they are no longer needed">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="1" rule="CERT_C-MEM00-e" ruleset="CERT-MEM00_C (REC) Allocate and free memory in the same module, at the same level of abstraction">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="3" rule="CERT_C-MEM12-a" ruleset="CERT-MEM12_C (REC) Consider using a goto chain when leaving a function on error when using and releasing resources">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="2" rule="CERT_C-MEM31-a" ruleset="CERT-MEM31_C (RULE) Free dynamically allocated memory when no longer needed">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="2" rule="CERT_C-WIN30-a" ruleset="CERT-WIN30_C (RULE) Properly pair allocation and deallocation functions">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="3" rule="CERT_CPP-ERR57-a" ruleset="CERT-ERR57_CPP (RULE) Do not leak resources when handling exceptions">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="3" rule="CERT_CPP-FIO51-a" ruleset="CERT-FIO51_CPP (RULE) Close files when they are no longer needed">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="1" rule="CWE-772-a" ruleset="CWE-772 Missing Release of Resource after Effective Lifetime">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="4" rule="MISRA2012-DIR-4_13_a" ruleset="MISRA C 2012 Directives">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="2" rule="MISRA2012-RULE-22_1" ruleset="MISRA C 2012 Rules">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="4" rule="MISRAC2012-DIR_4_13-a" ruleset="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="2" rule="MISRAC2012-RULE_22_1-a" ruleset="Rule 22.1 (Required) All resources obtained dynamically by means of Standard Library functions shall be explicitly released">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/MemoryLeak.cpp">
    <violation beginline="15" endline="16" begincolumn="0" endcolumn="0" priority="1" rule="OWASP2019-API4-b" ruleset="OWASP API4 Lack of Resources &amp; Rate Limiting">Memory not deallocated: data</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="93" endline="94" begincolumn="0" endcolumn="0" priority="2" rule="BD-TRS-DIFCS" ruleset="Threads &amp; Synchronization" package="Physics">"participants" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="94" endline="95" begincolumn="0" endcolumn="0" priority="2" rule="BD-TRS-DIFCS" ruleset="Threads &amp; Synchronization" package="Physics">"velocityArray" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="95" endline="96" begincolumn="0" endcolumn="0" priority="2" rule="BD-TRS-DIFCS" ruleset="Threads &amp; Synchronization" package="Physics">"ring" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="103" endline="104" begincolumn="0" endcolumn="0" priority="1" rule="BD-TRS-LOCK" ruleset="Threads &amp; Synchronization" package="Physics">Unreleased lock: changePositionMutex</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="103" endline="104" begincolumn="0" endcolumn="0" priority="3" rule="CERT_C-CON01-a" ruleset="CERT-CON01_C (REC) Acquire and release synchronization primitives in the same module, at the same level of abstraction" package="Physics">Unreleased lock: changePositionMutex</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="103" endline="104" begincolumn="0" endcolumn="0" priority="4" rule="MISRA2012-DIR-4_13_d" ruleset="MISRA C 2012 Directives" package="Physics">Unreleased lock: changePositionMutex</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="103" endline="104" begincolumn="0" endcolumn="0" priority="4" rule="MISRAC2012-DIR_4_13-d" ruleset="Dir 4.13 (Advisory) Functions which are designed to provide operations on a resource should be called in an appropriate sequence" package="Physics">Unreleased lock: changePositionMutex</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="119" endline="120" begincolumn="0" endcolumn="0" priority="2" rule="BD-TRS-DIFCS" ruleset="Threads &amp; Synchronization" package="Render">"ring" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="125" begincolumn="0" endcolumn="0" priority="2" rule="BD-TRS-DIFCS" ruleset="Threads &amp; Synchronization" package="Render">"participants" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation</violation>
  </file>
  <file name="/FlowAnalysisCpp/DeadLock.cpp">
    <violation beginline="124" endline="125" begincolumn="0" endcolumn="0" priority="2" rule="BD-TRS-DIFCS" ruleset="Threads &amp; Synchronization" package="Render">"currentCameraVelocity" is used in two critical sections in context of single method, using one critical section will improve atomicity of operation</violation>
  </file>
</pmd>
